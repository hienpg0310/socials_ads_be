
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Campaign
 * 
 */
export type Campaign = $Result.DefaultSelection<Prisma.$CampaignPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model PostSetting
 * 
 */
export type PostSetting = $Result.DefaultSelection<Prisma.$PostSettingPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model UploadFile
 * 
 */
export type UploadFile = $Result.DefaultSelection<Prisma.$UploadFilePayload>
/**
 * Model SocialPlatformSetting
 * 
 */
export type SocialPlatformSetting = $Result.DefaultSelection<Prisma.$SocialPlatformSettingPayload>
/**
 * Model UserPageSetting
 * 
 */
export type UserPageSetting = $Result.DefaultSelection<Prisma.$UserPageSettingPayload>
/**
 * Model Team
 * 
 */
export type Team = $Result.DefaultSelection<Prisma.$TeamPayload>
/**
 * Model TeamMember
 * 
 */
export type TeamMember = $Result.DefaultSelection<Prisma.$TeamMemberPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const CampaignObjective: {
  traffic: 'traffic',
  conversions: 'conversions',
  engagement: 'engagement',
  brand_awareness: 'brand_awareness'
};

export type CampaignObjective = (typeof CampaignObjective)[keyof typeof CampaignObjective]


export const CampaignStatus: {
  active: 'active',
  paused: 'paused',
  completed: 'completed'
};

export type CampaignStatus = (typeof CampaignStatus)[keyof typeof CampaignStatus]


export const UserRole: {
  admin: 'admin',
  page_admin: 'page_admin',
  collaborator: 'collaborator'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const PostStatus: {
  processing: 'processing',
  draft: 'draft',
  checked: 'checked',
  scheduled: 'scheduled',
  publishing: 'publishing',
  live: 'live'
};

export type PostStatus = (typeof PostStatus)[keyof typeof PostStatus]


export const UploadFileType: {
  video: 'video',
  image: 'image'
};

export type UploadFileType = (typeof UploadFileType)[keyof typeof UploadFileType]


export const UploadSource: {
  img_bb: 'img_bb',
  google_drive: 'google_drive'
};

export type UploadSource = (typeof UploadSource)[keyof typeof UploadSource]


export const Platform: {
  facebook: 'facebook',
  tiktok: 'tiktok',
  instagram: 'instagram'
};

export type Platform = (typeof Platform)[keyof typeof Platform]


export const SettingStatus: {
  connected: 'connected',
  not_connected: 'not_connected'
};

export type SettingStatus = (typeof SettingStatus)[keyof typeof SettingStatus]


export const TeamRole: {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  COLLABORATOR: 'COLLABORATOR'
};

export type TeamRole = (typeof TeamRole)[keyof typeof TeamRole]

}

export type CampaignObjective = $Enums.CampaignObjective

export const CampaignObjective: typeof $Enums.CampaignObjective

export type CampaignStatus = $Enums.CampaignStatus

export const CampaignStatus: typeof $Enums.CampaignStatus

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type PostStatus = $Enums.PostStatus

export const PostStatus: typeof $Enums.PostStatus

export type UploadFileType = $Enums.UploadFileType

export const UploadFileType: typeof $Enums.UploadFileType

export type UploadSource = $Enums.UploadSource

export const UploadSource: typeof $Enums.UploadSource

export type Platform = $Enums.Platform

export const Platform: typeof $Enums.Platform

export type SettingStatus = $Enums.SettingStatus

export const SettingStatus: typeof $Enums.SettingStatus

export type TeamRole = $Enums.TeamRole

export const TeamRole: typeof $Enums.TeamRole

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.campaign`: Exposes CRUD operations for the **Campaign** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Campaigns
    * const campaigns = await prisma.campaign.findMany()
    * ```
    */
  get campaign(): Prisma.CampaignDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.postSetting`: Exposes CRUD operations for the **PostSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostSettings
    * const postSettings = await prisma.postSetting.findMany()
    * ```
    */
  get postSetting(): Prisma.PostSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.uploadFile`: Exposes CRUD operations for the **UploadFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UploadFiles
    * const uploadFiles = await prisma.uploadFile.findMany()
    * ```
    */
  get uploadFile(): Prisma.UploadFileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.socialPlatformSetting`: Exposes CRUD operations for the **SocialPlatformSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SocialPlatformSettings
    * const socialPlatformSettings = await prisma.socialPlatformSetting.findMany()
    * ```
    */
  get socialPlatformSetting(): Prisma.SocialPlatformSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPageSetting`: Exposes CRUD operations for the **UserPageSetting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPageSettings
    * const userPageSettings = await prisma.userPageSetting.findMany()
    * ```
    */
  get userPageSetting(): Prisma.UserPageSettingDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.team`: Exposes CRUD operations for the **Team** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Teams
    * const teams = await prisma.team.findMany()
    * ```
    */
  get team(): Prisma.TeamDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.teamMember`: Exposes CRUD operations for the **TeamMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TeamMembers
    * const teamMembers = await prisma.teamMember.findMany()
    * ```
    */
  get teamMember(): Prisma.TeamMemberDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.10.1
   * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Campaign: 'Campaign',
    Post: 'Post',
    PostSetting: 'PostSetting',
    Image: 'Image',
    UploadFile: 'UploadFile',
    SocialPlatformSetting: 'SocialPlatformSetting',
    UserPageSetting: 'UserPageSetting',
    Team: 'Team',
    TeamMember: 'TeamMember'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "campaign" | "post" | "postSetting" | "image" | "uploadFile" | "socialPlatformSetting" | "userPageSetting" | "team" | "teamMember"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Campaign: {
        payload: Prisma.$CampaignPayload<ExtArgs>
        fields: Prisma.CampaignFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CampaignFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CampaignFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findFirst: {
            args: Prisma.CampaignFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CampaignFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          findMany: {
            args: Prisma.CampaignFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          create: {
            args: Prisma.CampaignCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          createMany: {
            args: Prisma.CampaignCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CampaignCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          delete: {
            args: Prisma.CampaignDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          update: {
            args: Prisma.CampaignUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          deleteMany: {
            args: Prisma.CampaignDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CampaignUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CampaignUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>[]
          }
          upsert: {
            args: Prisma.CampaignUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CampaignPayload>
          }
          aggregate: {
            args: Prisma.CampaignAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCampaign>
          }
          groupBy: {
            args: Prisma.CampaignGroupByArgs<ExtArgs>
            result: $Utils.Optional<CampaignGroupByOutputType>[]
          }
          count: {
            args: Prisma.CampaignCountArgs<ExtArgs>
            result: $Utils.Optional<CampaignCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      PostSetting: {
        payload: Prisma.$PostSettingPayload<ExtArgs>
        fields: Prisma.PostSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>
          }
          findFirst: {
            args: Prisma.PostSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>
          }
          findMany: {
            args: Prisma.PostSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>[]
          }
          create: {
            args: Prisma.PostSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>
          }
          createMany: {
            args: Prisma.PostSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PostSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>[]
          }
          delete: {
            args: Prisma.PostSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>
          }
          update: {
            args: Prisma.PostSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>
          }
          deleteMany: {
            args: Prisma.PostSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PostSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PostSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>[]
          }
          upsert: {
            args: Prisma.PostSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PostSettingPayload>
          }
          aggregate: {
            args: Prisma.PostSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePostSetting>
          }
          groupBy: {
            args: Prisma.PostSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostSettingCountArgs<ExtArgs>
            result: $Utils.Optional<PostSettingCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ImageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ImageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      UploadFile: {
        payload: Prisma.$UploadFilePayload<ExtArgs>
        fields: Prisma.UploadFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UploadFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UploadFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>
          }
          findFirst: {
            args: Prisma.UploadFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UploadFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>
          }
          findMany: {
            args: Prisma.UploadFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>[]
          }
          create: {
            args: Prisma.UploadFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>
          }
          createMany: {
            args: Prisma.UploadFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UploadFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>[]
          }
          delete: {
            args: Prisma.UploadFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>
          }
          update: {
            args: Prisma.UploadFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>
          }
          deleteMany: {
            args: Prisma.UploadFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UploadFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UploadFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>[]
          }
          upsert: {
            args: Prisma.UploadFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UploadFilePayload>
          }
          aggregate: {
            args: Prisma.UploadFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUploadFile>
          }
          groupBy: {
            args: Prisma.UploadFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<UploadFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.UploadFileCountArgs<ExtArgs>
            result: $Utils.Optional<UploadFileCountAggregateOutputType> | number
          }
        }
      }
      SocialPlatformSetting: {
        payload: Prisma.$SocialPlatformSettingPayload<ExtArgs>
        fields: Prisma.SocialPlatformSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SocialPlatformSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SocialPlatformSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>
          }
          findFirst: {
            args: Prisma.SocialPlatformSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SocialPlatformSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>
          }
          findMany: {
            args: Prisma.SocialPlatformSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>[]
          }
          create: {
            args: Prisma.SocialPlatformSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>
          }
          createMany: {
            args: Prisma.SocialPlatformSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SocialPlatformSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>[]
          }
          delete: {
            args: Prisma.SocialPlatformSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>
          }
          update: {
            args: Prisma.SocialPlatformSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>
          }
          deleteMany: {
            args: Prisma.SocialPlatformSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SocialPlatformSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SocialPlatformSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>[]
          }
          upsert: {
            args: Prisma.SocialPlatformSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SocialPlatformSettingPayload>
          }
          aggregate: {
            args: Prisma.SocialPlatformSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSocialPlatformSetting>
          }
          groupBy: {
            args: Prisma.SocialPlatformSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<SocialPlatformSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.SocialPlatformSettingCountArgs<ExtArgs>
            result: $Utils.Optional<SocialPlatformSettingCountAggregateOutputType> | number
          }
        }
      }
      UserPageSetting: {
        payload: Prisma.$UserPageSettingPayload<ExtArgs>
        fields: Prisma.UserPageSettingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPageSettingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPageSettingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>
          }
          findFirst: {
            args: Prisma.UserPageSettingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPageSettingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>
          }
          findMany: {
            args: Prisma.UserPageSettingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>[]
          }
          create: {
            args: Prisma.UserPageSettingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>
          }
          createMany: {
            args: Prisma.UserPageSettingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPageSettingCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>[]
          }
          delete: {
            args: Prisma.UserPageSettingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>
          }
          update: {
            args: Prisma.UserPageSettingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>
          }
          deleteMany: {
            args: Prisma.UserPageSettingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPageSettingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPageSettingUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>[]
          }
          upsert: {
            args: Prisma.UserPageSettingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPageSettingPayload>
          }
          aggregate: {
            args: Prisma.UserPageSettingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPageSetting>
          }
          groupBy: {
            args: Prisma.UserPageSettingGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPageSettingGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPageSettingCountArgs<ExtArgs>
            result: $Utils.Optional<UserPageSettingCountAggregateOutputType> | number
          }
        }
      }
      Team: {
        payload: Prisma.$TeamPayload<ExtArgs>
        fields: Prisma.TeamFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findFirst: {
            args: Prisma.TeamFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          findMany: {
            args: Prisma.TeamFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          create: {
            args: Prisma.TeamCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          createMany: {
            args: Prisma.TeamCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          delete: {
            args: Prisma.TeamDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          update: {
            args: Prisma.TeamUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          deleteMany: {
            args: Prisma.TeamDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>[]
          }
          upsert: {
            args: Prisma.TeamUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamPayload>
          }
          aggregate: {
            args: Prisma.TeamAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeam>
          }
          groupBy: {
            args: Prisma.TeamGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamCountArgs<ExtArgs>
            result: $Utils.Optional<TeamCountAggregateOutputType> | number
          }
        }
      }
      TeamMember: {
        payload: Prisma.$TeamMemberPayload<ExtArgs>
        fields: Prisma.TeamMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TeamMemberFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TeamMemberFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findFirst: {
            args: Prisma.TeamMemberFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TeamMemberFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          findMany: {
            args: Prisma.TeamMemberFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          create: {
            args: Prisma.TeamMemberCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          createMany: {
            args: Prisma.TeamMemberCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TeamMemberCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          delete: {
            args: Prisma.TeamMemberDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          update: {
            args: Prisma.TeamMemberUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          deleteMany: {
            args: Prisma.TeamMemberDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TeamMemberUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TeamMemberUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>[]
          }
          upsert: {
            args: Prisma.TeamMemberUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TeamMemberPayload>
          }
          aggregate: {
            args: Prisma.TeamMemberAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTeamMember>
          }
          groupBy: {
            args: Prisma.TeamMemberGroupByArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.TeamMemberCountArgs<ExtArgs>
            result: $Utils.Optional<TeamMemberCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    campaign?: CampaignOmit
    post?: PostOmit
    postSetting?: PostSettingOmit
    image?: ImageOmit
    uploadFile?: UploadFileOmit
    socialPlatformSetting?: SocialPlatformSettingOmit
    userPageSetting?: UserPageSettingOmit
    team?: TeamOmit
    teamMember?: TeamMemberOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    UserPageSetting: number
    TeamMember: number
    Campaign: number
    SocialPlatformSetting: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserPageSetting?: boolean | UserCountOutputTypeCountUserPageSettingArgs
    TeamMember?: boolean | UserCountOutputTypeCountTeamMemberArgs
    Campaign?: boolean | UserCountOutputTypeCountCampaignArgs
    SocialPlatformSetting?: boolean | UserCountOutputTypeCountSocialPlatformSettingArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUserPageSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPageSettingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTeamMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSocialPlatformSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialPlatformSettingWhereInput
  }


  /**
   * Count Type CampaignCountOutputType
   */

  export type CampaignCountOutputType = {
    Post: number
  }

  export type CampaignCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Post?: boolean | CampaignCountOutputTypeCountPostArgs
  }

  // Custom InputTypes
  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CampaignCountOutputType
     */
    select?: CampaignCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CampaignCountOutputType without action
   */
  export type CampaignCountOutputTypeCountPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    PostSetting: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PostSetting?: boolean | PostCountOutputTypeCountPostSettingArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountPostSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostSettingWhereInput
  }


  /**
   * Count Type SocialPlatformSettingCountOutputType
   */

  export type SocialPlatformSettingCountOutputType = {
    PostSetting: number
    UserPageSetting: number
  }

  export type SocialPlatformSettingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PostSetting?: boolean | SocialPlatformSettingCountOutputTypeCountPostSettingArgs
    UserPageSetting?: boolean | SocialPlatformSettingCountOutputTypeCountUserPageSettingArgs
  }

  // Custom InputTypes
  /**
   * SocialPlatformSettingCountOutputType without action
   */
  export type SocialPlatformSettingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSettingCountOutputType
     */
    select?: SocialPlatformSettingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * SocialPlatformSettingCountOutputType without action
   */
  export type SocialPlatformSettingCountOutputTypeCountPostSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostSettingWhereInput
  }

  /**
   * SocialPlatformSettingCountOutputType without action
   */
  export type SocialPlatformSettingCountOutputTypeCountUserPageSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPageSettingWhereInput
  }


  /**
   * Count Type TeamCountOutputType
   */

  export type TeamCountOutputType = {
    members: number
    Campaign: number
    SocialPlatformSetting: number
  }

  export type TeamCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | TeamCountOutputTypeCountMembersArgs
    Campaign?: boolean | TeamCountOutputTypeCountCampaignArgs
    SocialPlatformSetting?: boolean | TeamCountOutputTypeCountSocialPlatformSettingArgs
  }

  // Custom InputTypes
  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamCountOutputType
     */
    select?: TeamCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountCampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
  }

  /**
   * TeamCountOutputType without action
   */
  export type TeamCountOutputTypeCountSocialPlatformSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialPlatformSettingWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    age: number | null
  }

  export type UserSumAggregateOutputType = {
    age: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    salt: string | null
    password: string | null
    age: number | null
    isVerified: boolean | null
    isActivated: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    salt: string | null
    password: string | null
    age: number | null
    isVerified: boolean | null
    isActivated: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    salt: number
    password: number
    age: number
    isVerified: number
    isActivated: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    age?: true
  }

  export type UserSumAggregateInputType = {
    age?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    salt?: true
    password?: true
    age?: true
    isVerified?: true
    isActivated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    salt?: true
    password?: true
    age?: true
    isVerified?: true
    isActivated?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    salt?: true
    password?: true
    age?: true
    isVerified?: true
    isActivated?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string
    email: string
    salt: string | null
    password: string
    age: number | null
    isVerified: boolean | null
    isActivated: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    salt?: boolean
    password?: boolean
    age?: boolean
    isVerified?: boolean
    isActivated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    UserPageSetting?: boolean | User$UserPageSettingArgs<ExtArgs>
    TeamMember?: boolean | User$TeamMemberArgs<ExtArgs>
    Campaign?: boolean | User$CampaignArgs<ExtArgs>
    SocialPlatformSetting?: boolean | User$SocialPlatformSettingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    salt?: boolean
    password?: boolean
    age?: boolean
    isVerified?: boolean
    isActivated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    salt?: boolean
    password?: boolean
    age?: boolean
    isVerified?: boolean
    isActivated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    salt?: boolean
    password?: boolean
    age?: boolean
    isVerified?: boolean
    isActivated?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "salt" | "password" | "age" | "isVerified" | "isActivated" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    UserPageSetting?: boolean | User$UserPageSettingArgs<ExtArgs>
    TeamMember?: boolean | User$TeamMemberArgs<ExtArgs>
    Campaign?: boolean | User$CampaignArgs<ExtArgs>
    SocialPlatformSetting?: boolean | User$SocialPlatformSettingArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      UserPageSetting: Prisma.$UserPageSettingPayload<ExtArgs>[]
      TeamMember: Prisma.$TeamMemberPayload<ExtArgs>[]
      Campaign: Prisma.$CampaignPayload<ExtArgs>[]
      SocialPlatformSetting: Prisma.$SocialPlatformSettingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      email: string
      salt: string | null
      password: string
      age: number | null
      isVerified: boolean | null
      isActivated: boolean | null
      createdAt: Date | null
      updatedAt: Date | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    UserPageSetting<T extends User$UserPageSettingArgs<ExtArgs> = {}>(args?: Subset<T, User$UserPageSettingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    TeamMember<T extends User$TeamMemberArgs<ExtArgs> = {}>(args?: Subset<T, User$TeamMemberArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Campaign<T extends User$CampaignArgs<ExtArgs> = {}>(args?: Subset<T, User$CampaignArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    SocialPlatformSetting<T extends User$SocialPlatformSettingArgs<ExtArgs> = {}>(args?: Subset<T, User$SocialPlatformSettingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly salt: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly age: FieldRef<"User", 'Int'>
    readonly isVerified: FieldRef<"User", 'Boolean'>
    readonly isActivated: FieldRef<"User", 'Boolean'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.UserPageSetting
   */
  export type User$UserPageSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    where?: UserPageSettingWhereInput
    orderBy?: UserPageSettingOrderByWithRelationInput | UserPageSettingOrderByWithRelationInput[]
    cursor?: UserPageSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPageSettingScalarFieldEnum | UserPageSettingScalarFieldEnum[]
  }

  /**
   * User.TeamMember
   */
  export type User$TeamMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * User.Campaign
   */
  export type User$CampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * User.SocialPlatformSetting
   */
  export type User$SocialPlatformSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    where?: SocialPlatformSettingWhereInput
    orderBy?: SocialPlatformSettingOrderByWithRelationInput | SocialPlatformSettingOrderByWithRelationInput[]
    cursor?: SocialPlatformSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SocialPlatformSettingScalarFieldEnum | SocialPlatformSettingScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Campaign
   */

  export type AggregateCampaign = {
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  export type CampaignAvgAggregateOutputType = {
    dailyBudget: number | null
    totalBudget: number | null
  }

  export type CampaignSumAggregateOutputType = {
    dailyBudget: number | null
    totalBudget: number | null
  }

  export type CampaignMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    objective: $Enums.CampaignObjective | null
    startDate: Date | null
    endDate: Date | null
    dailyBudget: number | null
    totalBudget: number | null
    status: $Enums.CampaignStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    createdUserId: string | null
    teamId: string | null
  }

  export type CampaignMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    objective: $Enums.CampaignObjective | null
    startDate: Date | null
    endDate: Date | null
    dailyBudget: number | null
    totalBudget: number | null
    status: $Enums.CampaignStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    createdUserId: string | null
    teamId: string | null
  }

  export type CampaignCountAggregateOutputType = {
    id: number
    name: number
    description: number
    objective: number
    startDate: number
    endDate: number
    dailyBudget: number
    totalBudget: number
    status: number
    createdAt: number
    updatedAt: number
    createdUserId: number
    teamId: number
    _all: number
  }


  export type CampaignAvgAggregateInputType = {
    dailyBudget?: true
    totalBudget?: true
  }

  export type CampaignSumAggregateInputType = {
    dailyBudget?: true
    totalBudget?: true
  }

  export type CampaignMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    objective?: true
    startDate?: true
    endDate?: true
    dailyBudget?: true
    totalBudget?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdUserId?: true
    teamId?: true
  }

  export type CampaignMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    objective?: true
    startDate?: true
    endDate?: true
    dailyBudget?: true
    totalBudget?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdUserId?: true
    teamId?: true
  }

  export type CampaignCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    objective?: true
    startDate?: true
    endDate?: true
    dailyBudget?: true
    totalBudget?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    createdUserId?: true
    teamId?: true
    _all?: true
  }

  export type CampaignAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaign to aggregate.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Campaigns
    **/
    _count?: true | CampaignCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CampaignAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CampaignSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CampaignMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CampaignMaxAggregateInputType
  }

  export type GetCampaignAggregateType<T extends CampaignAggregateArgs> = {
        [P in keyof T & keyof AggregateCampaign]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCampaign[P]>
      : GetScalarType<T[P], AggregateCampaign[P]>
  }




  export type CampaignGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithAggregationInput | CampaignOrderByWithAggregationInput[]
    by: CampaignScalarFieldEnum[] | CampaignScalarFieldEnum
    having?: CampaignScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CampaignCountAggregateInputType | true
    _avg?: CampaignAvgAggregateInputType
    _sum?: CampaignSumAggregateInputType
    _min?: CampaignMinAggregateInputType
    _max?: CampaignMaxAggregateInputType
  }

  export type CampaignGroupByOutputType = {
    id: string
    name: string
    description: string | null
    objective: $Enums.CampaignObjective
    startDate: Date
    endDate: Date | null
    dailyBudget: number | null
    totalBudget: number | null
    status: $Enums.CampaignStatus
    createdAt: Date | null
    updatedAt: Date | null
    createdUserId: string | null
    teamId: string
    _count: CampaignCountAggregateOutputType | null
    _avg: CampaignAvgAggregateOutputType | null
    _sum: CampaignSumAggregateOutputType | null
    _min: CampaignMinAggregateOutputType | null
    _max: CampaignMaxAggregateOutputType | null
  }

  type GetCampaignGroupByPayload<T extends CampaignGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CampaignGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CampaignGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CampaignGroupByOutputType[P]>
            : GetScalarType<T[P], CampaignGroupByOutputType[P]>
        }
      >
    >


  export type CampaignSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    objective?: boolean
    startDate?: boolean
    endDate?: boolean
    dailyBudget?: boolean
    totalBudget?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdUserId?: boolean
    teamId?: boolean
    Post?: boolean | Campaign$PostArgs<ExtArgs>
    createdUser?: boolean | Campaign$createdUserArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    objective?: boolean
    startDate?: boolean
    endDate?: boolean
    dailyBudget?: boolean
    totalBudget?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdUserId?: boolean
    teamId?: boolean
    createdUser?: boolean | Campaign$createdUserArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    objective?: boolean
    startDate?: boolean
    endDate?: boolean
    dailyBudget?: boolean
    totalBudget?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdUserId?: boolean
    teamId?: boolean
    createdUser?: boolean | Campaign$createdUserArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["campaign"]>

  export type CampaignSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    objective?: boolean
    startDate?: boolean
    endDate?: boolean
    dailyBudget?: boolean
    totalBudget?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdUserId?: boolean
    teamId?: boolean
  }

  export type CampaignOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "objective" | "startDate" | "endDate" | "dailyBudget" | "totalBudget" | "status" | "createdAt" | "updatedAt" | "createdUserId" | "teamId", ExtArgs["result"]["campaign"]>
  export type CampaignInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    Post?: boolean | Campaign$PostArgs<ExtArgs>
    createdUser?: boolean | Campaign$createdUserArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    _count?: boolean | CampaignCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdUser?: boolean | Campaign$createdUserArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type CampaignIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdUser?: boolean | Campaign$createdUserArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $CampaignPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Campaign"
    objects: {
      Post: Prisma.$PostPayload<ExtArgs>[]
      createdUser: Prisma.$UserPayload<ExtArgs> | null
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      objective: $Enums.CampaignObjective
      startDate: Date
      endDate: Date | null
      dailyBudget: number | null
      totalBudget: number | null
      status: $Enums.CampaignStatus
      createdAt: Date | null
      updatedAt: Date | null
      createdUserId: string | null
      teamId: string
    }, ExtArgs["result"]["campaign"]>
    composites: {}
  }

  type CampaignGetPayload<S extends boolean | null | undefined | CampaignDefaultArgs> = $Result.GetResult<Prisma.$CampaignPayload, S>

  type CampaignCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CampaignFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CampaignCountAggregateInputType | true
    }

  export interface CampaignDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Campaign'], meta: { name: 'Campaign' } }
    /**
     * Find zero or one Campaign that matches the filter.
     * @param {CampaignFindUniqueArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CampaignFindUniqueArgs>(args: SelectSubset<T, CampaignFindUniqueArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Campaign that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CampaignFindUniqueOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CampaignFindUniqueOrThrowArgs>(args: SelectSubset<T, CampaignFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CampaignFindFirstArgs>(args?: SelectSubset<T, CampaignFindFirstArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Campaign that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindFirstOrThrowArgs} args - Arguments to find a Campaign
     * @example
     * // Get one Campaign
     * const campaign = await prisma.campaign.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CampaignFindFirstOrThrowArgs>(args?: SelectSubset<T, CampaignFindFirstOrThrowArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Campaigns that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Campaigns
     * const campaigns = await prisma.campaign.findMany()
     * 
     * // Get first 10 Campaigns
     * const campaigns = await prisma.campaign.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const campaignWithIdOnly = await prisma.campaign.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CampaignFindManyArgs>(args?: SelectSubset<T, CampaignFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Campaign.
     * @param {CampaignCreateArgs} args - Arguments to create a Campaign.
     * @example
     * // Create one Campaign
     * const Campaign = await prisma.campaign.create({
     *   data: {
     *     // ... data to create a Campaign
     *   }
     * })
     * 
     */
    create<T extends CampaignCreateArgs>(args: SelectSubset<T, CampaignCreateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Campaigns.
     * @param {CampaignCreateManyArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CampaignCreateManyArgs>(args?: SelectSubset<T, CampaignCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Campaigns and returns the data saved in the database.
     * @param {CampaignCreateManyAndReturnArgs} args - Arguments to create many Campaigns.
     * @example
     * // Create many Campaigns
     * const campaign = await prisma.campaign.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CampaignCreateManyAndReturnArgs>(args?: SelectSubset<T, CampaignCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Campaign.
     * @param {CampaignDeleteArgs} args - Arguments to delete one Campaign.
     * @example
     * // Delete one Campaign
     * const Campaign = await prisma.campaign.delete({
     *   where: {
     *     // ... filter to delete one Campaign
     *   }
     * })
     * 
     */
    delete<T extends CampaignDeleteArgs>(args: SelectSubset<T, CampaignDeleteArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Campaign.
     * @param {CampaignUpdateArgs} args - Arguments to update one Campaign.
     * @example
     * // Update one Campaign
     * const campaign = await prisma.campaign.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CampaignUpdateArgs>(args: SelectSubset<T, CampaignUpdateArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Campaigns.
     * @param {CampaignDeleteManyArgs} args - Arguments to filter Campaigns to delete.
     * @example
     * // Delete a few Campaigns
     * const { count } = await prisma.campaign.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CampaignDeleteManyArgs>(args?: SelectSubset<T, CampaignDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CampaignUpdateManyArgs>(args: SelectSubset<T, CampaignUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Campaigns and returns the data updated in the database.
     * @param {CampaignUpdateManyAndReturnArgs} args - Arguments to update many Campaigns.
     * @example
     * // Update many Campaigns
     * const campaign = await prisma.campaign.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Campaigns and only return the `id`
     * const campaignWithIdOnly = await prisma.campaign.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CampaignUpdateManyAndReturnArgs>(args: SelectSubset<T, CampaignUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Campaign.
     * @param {CampaignUpsertArgs} args - Arguments to update or create a Campaign.
     * @example
     * // Update or create a Campaign
     * const campaign = await prisma.campaign.upsert({
     *   create: {
     *     // ... data to create a Campaign
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Campaign we want to update
     *   }
     * })
     */
    upsert<T extends CampaignUpsertArgs>(args: SelectSubset<T, CampaignUpsertArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Campaigns.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignCountArgs} args - Arguments to filter Campaigns to count.
     * @example
     * // Count the number of Campaigns
     * const count = await prisma.campaign.count({
     *   where: {
     *     // ... the filter for the Campaigns we want to count
     *   }
     * })
    **/
    count<T extends CampaignCountArgs>(
      args?: Subset<T, CampaignCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CampaignCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CampaignAggregateArgs>(args: Subset<T, CampaignAggregateArgs>): Prisma.PrismaPromise<GetCampaignAggregateType<T>>

    /**
     * Group by Campaign.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CampaignGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CampaignGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CampaignGroupByArgs['orderBy'] }
        : { orderBy?: CampaignGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CampaignGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCampaignGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Campaign model
   */
  readonly fields: CampaignFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Campaign.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CampaignClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    Post<T extends Campaign$PostArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$PostArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdUser<T extends Campaign$createdUserArgs<ExtArgs> = {}>(args?: Subset<T, Campaign$createdUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Campaign model
   */
  interface CampaignFieldRefs {
    readonly id: FieldRef<"Campaign", 'String'>
    readonly name: FieldRef<"Campaign", 'String'>
    readonly description: FieldRef<"Campaign", 'String'>
    readonly objective: FieldRef<"Campaign", 'CampaignObjective'>
    readonly startDate: FieldRef<"Campaign", 'DateTime'>
    readonly endDate: FieldRef<"Campaign", 'DateTime'>
    readonly dailyBudget: FieldRef<"Campaign", 'Float'>
    readonly totalBudget: FieldRef<"Campaign", 'Float'>
    readonly status: FieldRef<"Campaign", 'CampaignStatus'>
    readonly createdAt: FieldRef<"Campaign", 'DateTime'>
    readonly updatedAt: FieldRef<"Campaign", 'DateTime'>
    readonly createdUserId: FieldRef<"Campaign", 'String'>
    readonly teamId: FieldRef<"Campaign", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Campaign findUnique
   */
  export type CampaignFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findUniqueOrThrow
   */
  export type CampaignFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign findFirst
   */
  export type CampaignFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findFirstOrThrow
   */
  export type CampaignFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaign to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Campaigns.
     */
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign findMany
   */
  export type CampaignFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter, which Campaigns to fetch.
     */
    where?: CampaignWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Campaigns to fetch.
     */
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Campaigns.
     */
    cursor?: CampaignWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Campaigns from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Campaigns.
     */
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Campaign create
   */
  export type CampaignCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to create a Campaign.
     */
    data: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
  }

  /**
   * Campaign createMany
   */
  export type CampaignCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Campaign createManyAndReturn
   */
  export type CampaignCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to create many Campaigns.
     */
    data: CampaignCreateManyInput | CampaignCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign update
   */
  export type CampaignUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The data needed to update a Campaign.
     */
    data: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
    /**
     * Choose, which Campaign to update.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign updateMany
   */
  export type CampaignUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
  }

  /**
   * Campaign updateManyAndReturn
   */
  export type CampaignUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * The data used to update Campaigns.
     */
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyInput>
    /**
     * Filter which Campaigns to update
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Campaign upsert
   */
  export type CampaignUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * The filter to search for the Campaign to update in case it exists.
     */
    where: CampaignWhereUniqueInput
    /**
     * In case the Campaign found by the `where` argument doesn't exist, create a new Campaign with this data.
     */
    create: XOR<CampaignCreateInput, CampaignUncheckedCreateInput>
    /**
     * In case the Campaign was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CampaignUpdateInput, CampaignUncheckedUpdateInput>
  }

  /**
   * Campaign delete
   */
  export type CampaignDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    /**
     * Filter which Campaign to delete.
     */
    where: CampaignWhereUniqueInput
  }

  /**
   * Campaign deleteMany
   */
  export type CampaignDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Campaigns to delete
     */
    where?: CampaignWhereInput
    /**
     * Limit how many Campaigns to delete.
     */
    limit?: number
  }

  /**
   * Campaign.Post
   */
  export type Campaign$PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Campaign.createdUser
   */
  export type Campaign$createdUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Campaign without action
   */
  export type CampaignDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    campaignId: string | null
    description: string | null
    content: string | null
    status: $Enums.PostStatus | null
    postedTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    publishedUrl: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    campaignId: string | null
    description: string | null
    content: string | null
    status: $Enums.PostStatus | null
    postedTime: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    publishedUrl: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    campaignId: number
    description: number
    content: number
    status: number
    postedTime: number
    platformIds: number
    createdAt: number
    updatedAt: number
    imageIds: number
    publishedUrl: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true
    campaignId?: true
    description?: true
    content?: true
    status?: true
    postedTime?: true
    createdAt?: true
    updatedAt?: true
    publishedUrl?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    campaignId?: true
    description?: true
    content?: true
    status?: true
    postedTime?: true
    createdAt?: true
    updatedAt?: true
    publishedUrl?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    campaignId?: true
    description?: true
    content?: true
    status?: true
    postedTime?: true
    platformIds?: true
    createdAt?: true
    updatedAt?: true
    imageIds?: true
    publishedUrl?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    campaignId: string | null
    description: string
    content: string | null
    status: $Enums.PostStatus
    postedTime: Date
    platformIds: string[]
    createdAt: Date
    updatedAt: Date
    imageIds: string[]
    publishedUrl: string | null
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    description?: boolean
    content?: boolean
    status?: boolean
    postedTime?: boolean
    platformIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageIds?: boolean
    publishedUrl?: boolean
    campaign?: boolean | Post$campaignArgs<ExtArgs>
    PostSetting?: boolean | Post$PostSettingArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    description?: boolean
    content?: boolean
    status?: boolean
    postedTime?: boolean
    platformIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageIds?: boolean
    publishedUrl?: boolean
    campaign?: boolean | Post$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    campaignId?: boolean
    description?: boolean
    content?: boolean
    status?: boolean
    postedTime?: boolean
    platformIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageIds?: boolean
    publishedUrl?: boolean
    campaign?: boolean | Post$campaignArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    campaignId?: boolean
    description?: boolean
    content?: boolean
    status?: boolean
    postedTime?: boolean
    platformIds?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    imageIds?: boolean
    publishedUrl?: boolean
  }

  export type PostOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "campaignId" | "description" | "content" | "status" | "postedTime" | "platformIds" | "createdAt" | "updatedAt" | "imageIds" | "publishedUrl", ExtArgs["result"]["post"]>
  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | Post$campaignArgs<ExtArgs>
    PostSetting?: boolean | Post$PostSettingArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | Post$campaignArgs<ExtArgs>
  }
  export type PostIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    campaign?: boolean | Post$campaignArgs<ExtArgs>
  }

  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      campaign: Prisma.$CampaignPayload<ExtArgs> | null
      PostSetting: Prisma.$PostSettingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      campaignId: string | null
      description: string
      content: string | null
      status: $Enums.PostStatus
      postedTime: Date
      platformIds: string[]
      createdAt: Date
      updatedAt: Date
      imageIds: string[]
      publishedUrl: string | null
    }, ExtArgs["result"]["post"]>
    composites: {}
  }

  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostFindUniqueArgs>(args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Post that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs>(args: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostFindFirstArgs>(args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs>(args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PostFindManyArgs>(args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
     */
    create<T extends PostCreateArgs>(args: SelectSubset<T, PostCreateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Posts.
     * @param {PostCreateManyArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostCreateManyArgs>(args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Posts and returns the data saved in the database.
     * @param {PostCreateManyAndReturnArgs} args - Arguments to create many Posts.
     * @example
     * // Create many Posts
     * const post = await prisma.post.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostCreateManyAndReturnArgs>(args?: SelectSubset<T, PostCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
     */
    delete<T extends PostDeleteArgs>(args: SelectSubset<T, PostDeleteArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostUpdateArgs>(args: SelectSubset<T, PostUpdateArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostDeleteManyArgs>(args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostUpdateManyArgs>(args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts and returns the data updated in the database.
     * @param {PostUpdateManyAndReturnArgs} args - Arguments to update many Posts.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Posts and only return the `id`
     * const postWithIdOnly = await prisma.post.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostUpdateManyAndReturnArgs>(args: SelectSubset<T, PostUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
     */
    upsert<T extends PostUpsertArgs>(args: SelectSubset<T, PostUpsertArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    campaign<T extends Post$campaignArgs<ExtArgs> = {}>(args?: Subset<T, Post$campaignArgs<ExtArgs>>): Prisma__CampaignClient<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    PostSetting<T extends Post$PostSettingArgs<ExtArgs> = {}>(args?: Subset<T, Post$PostSettingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Post model
   */
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly campaignId: FieldRef<"Post", 'String'>
    readonly description: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly status: FieldRef<"Post", 'PostStatus'>
    readonly postedTime: FieldRef<"Post", 'DateTime'>
    readonly platformIds: FieldRef<"Post", 'String[]'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly imageIds: FieldRef<"Post", 'String[]'>
    readonly publishedUrl: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post createManyAndReturn
   */
  export type PostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
  }

  /**
   * Post updateManyAndReturn
   */
  export type PostUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
    /**
     * Limit how many Posts to delete.
     */
    limit?: number
  }

  /**
   * Post.campaign
   */
  export type Post$campaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
  }

  /**
   * Post.PostSetting
   */
  export type Post$PostSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    where?: PostSettingWhereInput
    orderBy?: PostSettingOrderByWithRelationInput | PostSettingOrderByWithRelationInput[]
    cursor?: PostSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostSettingScalarFieldEnum | PostSettingScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Post
     */
    omit?: PostOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model PostSetting
   */

  export type AggregatePostSetting = {
    _count: PostSettingCountAggregateOutputType | null
    _min: PostSettingMinAggregateOutputType | null
    _max: PostSettingMaxAggregateOutputType | null
  }

  export type PostSettingMinAggregateOutputType = {
    postId: string | null
    socialSettingId: string | null
    model: string | null
  }

  export type PostSettingMaxAggregateOutputType = {
    postId: string | null
    socialSettingId: string | null
    model: string | null
  }

  export type PostSettingCountAggregateOutputType = {
    postId: number
    socialSettingId: number
    model: number
    _all: number
  }


  export type PostSettingMinAggregateInputType = {
    postId?: true
    socialSettingId?: true
    model?: true
  }

  export type PostSettingMaxAggregateInputType = {
    postId?: true
    socialSettingId?: true
    model?: true
  }

  export type PostSettingCountAggregateInputType = {
    postId?: true
    socialSettingId?: true
    model?: true
    _all?: true
  }

  export type PostSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostSetting to aggregate.
     */
    where?: PostSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSettings to fetch.
     */
    orderBy?: PostSettingOrderByWithRelationInput | PostSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostSettings
    **/
    _count?: true | PostSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostSettingMaxAggregateInputType
  }

  export type GetPostSettingAggregateType<T extends PostSettingAggregateArgs> = {
        [P in keyof T & keyof AggregatePostSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostSetting[P]>
      : GetScalarType<T[P], AggregatePostSetting[P]>
  }




  export type PostSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostSettingWhereInput
    orderBy?: PostSettingOrderByWithAggregationInput | PostSettingOrderByWithAggregationInput[]
    by: PostSettingScalarFieldEnum[] | PostSettingScalarFieldEnum
    having?: PostSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostSettingCountAggregateInputType | true
    _min?: PostSettingMinAggregateInputType
    _max?: PostSettingMaxAggregateInputType
  }

  export type PostSettingGroupByOutputType = {
    postId: string
    socialSettingId: string
    model: string | null
    _count: PostSettingCountAggregateOutputType | null
    _min: PostSettingMinAggregateOutputType | null
    _max: PostSettingMaxAggregateOutputType | null
  }

  type GetPostSettingGroupByPayload<T extends PostSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostSettingGroupByOutputType[P]>
            : GetScalarType<T[P], PostSettingGroupByOutputType[P]>
        }
      >
    >


  export type PostSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    postId?: boolean
    socialSettingId?: boolean
    model?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postSetting"]>

  export type PostSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    postId?: boolean
    socialSettingId?: boolean
    model?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postSetting"]>

  export type PostSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    postId?: boolean
    socialSettingId?: boolean
    model?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postSetting"]>

  export type PostSettingSelectScalar = {
    postId?: boolean
    socialSettingId?: boolean
    model?: boolean
  }

  export type PostSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"postId" | "socialSettingId" | "model", ExtArgs["result"]["postSetting"]>
  export type PostSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }
  export type PostSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }
  export type PostSettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }

  export type $PostSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostSetting"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
      socialSetting: Prisma.$SocialPlatformSettingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      postId: string
      socialSettingId: string
      model: string | null
    }, ExtArgs["result"]["postSetting"]>
    composites: {}
  }

  type PostSettingGetPayload<S extends boolean | null | undefined | PostSettingDefaultArgs> = $Result.GetResult<Prisma.$PostSettingPayload, S>

  type PostSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PostSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PostSettingCountAggregateInputType | true
    }

  export interface PostSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostSetting'], meta: { name: 'PostSetting' } }
    /**
     * Find zero or one PostSetting that matches the filter.
     * @param {PostSettingFindUniqueArgs} args - Arguments to find a PostSetting
     * @example
     * // Get one PostSetting
     * const postSetting = await prisma.postSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PostSettingFindUniqueArgs>(args: SelectSubset<T, PostSettingFindUniqueArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PostSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PostSettingFindUniqueOrThrowArgs} args - Arguments to find a PostSetting
     * @example
     * // Get one PostSetting
     * const postSetting = await prisma.postSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PostSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, PostSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSettingFindFirstArgs} args - Arguments to find a PostSetting
     * @example
     * // Get one PostSetting
     * const postSetting = await prisma.postSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PostSettingFindFirstArgs>(args?: SelectSubset<T, PostSettingFindFirstArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PostSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSettingFindFirstOrThrowArgs} args - Arguments to find a PostSetting
     * @example
     * // Get one PostSetting
     * const postSetting = await prisma.postSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PostSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, PostSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PostSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostSettings
     * const postSettings = await prisma.postSetting.findMany()
     * 
     * // Get first 10 PostSettings
     * const postSettings = await prisma.postSetting.findMany({ take: 10 })
     * 
     * // Only select the `postId`
     * const postSettingWithPostIdOnly = await prisma.postSetting.findMany({ select: { postId: true } })
     * 
     */
    findMany<T extends PostSettingFindManyArgs>(args?: SelectSubset<T, PostSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PostSetting.
     * @param {PostSettingCreateArgs} args - Arguments to create a PostSetting.
     * @example
     * // Create one PostSetting
     * const PostSetting = await prisma.postSetting.create({
     *   data: {
     *     // ... data to create a PostSetting
     *   }
     * })
     * 
     */
    create<T extends PostSettingCreateArgs>(args: SelectSubset<T, PostSettingCreateArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PostSettings.
     * @param {PostSettingCreateManyArgs} args - Arguments to create many PostSettings.
     * @example
     * // Create many PostSettings
     * const postSetting = await prisma.postSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PostSettingCreateManyArgs>(args?: SelectSubset<T, PostSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PostSettings and returns the data saved in the database.
     * @param {PostSettingCreateManyAndReturnArgs} args - Arguments to create many PostSettings.
     * @example
     * // Create many PostSettings
     * const postSetting = await prisma.postSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PostSettings and only return the `postId`
     * const postSettingWithPostIdOnly = await prisma.postSetting.createManyAndReturn({
     *   select: { postId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PostSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, PostSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PostSetting.
     * @param {PostSettingDeleteArgs} args - Arguments to delete one PostSetting.
     * @example
     * // Delete one PostSetting
     * const PostSetting = await prisma.postSetting.delete({
     *   where: {
     *     // ... filter to delete one PostSetting
     *   }
     * })
     * 
     */
    delete<T extends PostSettingDeleteArgs>(args: SelectSubset<T, PostSettingDeleteArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PostSetting.
     * @param {PostSettingUpdateArgs} args - Arguments to update one PostSetting.
     * @example
     * // Update one PostSetting
     * const postSetting = await prisma.postSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PostSettingUpdateArgs>(args: SelectSubset<T, PostSettingUpdateArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PostSettings.
     * @param {PostSettingDeleteManyArgs} args - Arguments to filter PostSettings to delete.
     * @example
     * // Delete a few PostSettings
     * const { count } = await prisma.postSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PostSettingDeleteManyArgs>(args?: SelectSubset<T, PostSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostSettings
     * const postSetting = await prisma.postSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PostSettingUpdateManyArgs>(args: SelectSubset<T, PostSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostSettings and returns the data updated in the database.
     * @param {PostSettingUpdateManyAndReturnArgs} args - Arguments to update many PostSettings.
     * @example
     * // Update many PostSettings
     * const postSetting = await prisma.postSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PostSettings and only return the `postId`
     * const postSettingWithPostIdOnly = await prisma.postSetting.updateManyAndReturn({
     *   select: { postId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PostSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, PostSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PostSetting.
     * @param {PostSettingUpsertArgs} args - Arguments to update or create a PostSetting.
     * @example
     * // Update or create a PostSetting
     * const postSetting = await prisma.postSetting.upsert({
     *   create: {
     *     // ... data to create a PostSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostSetting we want to update
     *   }
     * })
     */
    upsert<T extends PostSettingUpsertArgs>(args: SelectSubset<T, PostSettingUpsertArgs<ExtArgs>>): Prisma__PostSettingClient<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PostSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSettingCountArgs} args - Arguments to filter PostSettings to count.
     * @example
     * // Count the number of PostSettings
     * const count = await prisma.postSetting.count({
     *   where: {
     *     // ... the filter for the PostSettings we want to count
     *   }
     * })
    **/
    count<T extends PostSettingCountArgs>(
      args?: Subset<T, PostSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostSettingAggregateArgs>(args: Subset<T, PostSettingAggregateArgs>): Prisma.PrismaPromise<GetPostSettingAggregateType<T>>

    /**
     * Group by PostSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostSettingGroupByArgs['orderBy'] }
        : { orderBy?: PostSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostSetting model
   */
  readonly fields: PostSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    socialSetting<T extends SocialPlatformSettingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SocialPlatformSettingDefaultArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PostSetting model
   */
  interface PostSettingFieldRefs {
    readonly postId: FieldRef<"PostSetting", 'String'>
    readonly socialSettingId: FieldRef<"PostSetting", 'String'>
    readonly model: FieldRef<"PostSetting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostSetting findUnique
   */
  export type PostSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * Filter, which PostSetting to fetch.
     */
    where: PostSettingWhereUniqueInput
  }

  /**
   * PostSetting findUniqueOrThrow
   */
  export type PostSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * Filter, which PostSetting to fetch.
     */
    where: PostSettingWhereUniqueInput
  }

  /**
   * PostSetting findFirst
   */
  export type PostSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * Filter, which PostSetting to fetch.
     */
    where?: PostSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSettings to fetch.
     */
    orderBy?: PostSettingOrderByWithRelationInput | PostSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostSettings.
     */
    cursor?: PostSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostSettings.
     */
    distinct?: PostSettingScalarFieldEnum | PostSettingScalarFieldEnum[]
  }

  /**
   * PostSetting findFirstOrThrow
   */
  export type PostSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * Filter, which PostSetting to fetch.
     */
    where?: PostSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSettings to fetch.
     */
    orderBy?: PostSettingOrderByWithRelationInput | PostSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostSettings.
     */
    cursor?: PostSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostSettings.
     */
    distinct?: PostSettingScalarFieldEnum | PostSettingScalarFieldEnum[]
  }

  /**
   * PostSetting findMany
   */
  export type PostSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * Filter, which PostSettings to fetch.
     */
    where?: PostSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostSettings to fetch.
     */
    orderBy?: PostSettingOrderByWithRelationInput | PostSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostSettings.
     */
    cursor?: PostSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostSettings.
     */
    skip?: number
    distinct?: PostSettingScalarFieldEnum | PostSettingScalarFieldEnum[]
  }

  /**
   * PostSetting create
   */
  export type PostSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a PostSetting.
     */
    data: XOR<PostSettingCreateInput, PostSettingUncheckedCreateInput>
  }

  /**
   * PostSetting createMany
   */
  export type PostSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostSettings.
     */
    data: PostSettingCreateManyInput | PostSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostSetting createManyAndReturn
   */
  export type PostSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * The data used to create many PostSettings.
     */
    data: PostSettingCreateManyInput | PostSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostSetting update
   */
  export type PostSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a PostSetting.
     */
    data: XOR<PostSettingUpdateInput, PostSettingUncheckedUpdateInput>
    /**
     * Choose, which PostSetting to update.
     */
    where: PostSettingWhereUniqueInput
  }

  /**
   * PostSetting updateMany
   */
  export type PostSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostSettings.
     */
    data: XOR<PostSettingUpdateManyMutationInput, PostSettingUncheckedUpdateManyInput>
    /**
     * Filter which PostSettings to update
     */
    where?: PostSettingWhereInput
    /**
     * Limit how many PostSettings to update.
     */
    limit?: number
  }

  /**
   * PostSetting updateManyAndReturn
   */
  export type PostSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * The data used to update PostSettings.
     */
    data: XOR<PostSettingUpdateManyMutationInput, PostSettingUncheckedUpdateManyInput>
    /**
     * Filter which PostSettings to update
     */
    where?: PostSettingWhereInput
    /**
     * Limit how many PostSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PostSetting upsert
   */
  export type PostSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the PostSetting to update in case it exists.
     */
    where: PostSettingWhereUniqueInput
    /**
     * In case the PostSetting found by the `where` argument doesn't exist, create a new PostSetting with this data.
     */
    create: XOR<PostSettingCreateInput, PostSettingUncheckedCreateInput>
    /**
     * In case the PostSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostSettingUpdateInput, PostSettingUncheckedUpdateInput>
  }

  /**
   * PostSetting delete
   */
  export type PostSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    /**
     * Filter which PostSetting to delete.
     */
    where: PostSettingWhereUniqueInput
  }

  /**
   * PostSetting deleteMany
   */
  export type PostSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostSettings to delete
     */
    where?: PostSettingWhereInput
    /**
     * Limit how many PostSettings to delete.
     */
    limit?: number
  }

  /**
   * PostSetting without action
   */
  export type PostSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    aspectRatio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    aspectRatio: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    url: number
    aspectRatio: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    url?: true
    aspectRatio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    url?: true
    aspectRatio?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    url?: true
    aspectRatio?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    url: string
    aspectRatio: string | null
    createdAt: Date
    updatedAt: Date
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    aspectRatio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    aspectRatio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    aspectRatio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    url?: boolean
    aspectRatio?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ImageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "aspectRatio" | "createdAt" | "updatedAt", ExtArgs["result"]["image"]>

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      aspectRatio: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Images and returns the data saved in the database.
     * @param {ImageCreateManyAndReturnArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ImageCreateManyAndReturnArgs>(args?: SelectSubset<T, ImageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images and returns the data updated in the database.
     * @param {ImageUpdateManyAndReturnArgs} args - Arguments to update many Images.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Images and only return the `id`
     * const imageWithIdOnly = await prisma.image.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ImageUpdateManyAndReturnArgs>(args: SelectSubset<T, ImageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly url: FieldRef<"Image", 'String'>
    readonly aspectRatio: FieldRef<"Image", 'String'>
    readonly createdAt: FieldRef<"Image", 'DateTime'>
    readonly updatedAt: FieldRef<"Image", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image createManyAndReturn
   */
  export type ImageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image updateManyAndReturn
   */
  export type ImageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to update.
     */
    limit?: number
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
    /**
     * Limit how many Images to delete.
     */
    limit?: number
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Image
     */
    omit?: ImageOmit<ExtArgs> | null
  }


  /**
   * Model UploadFile
   */

  export type AggregateUploadFile = {
    _count: UploadFileCountAggregateOutputType | null
    _min: UploadFileMinAggregateOutputType | null
    _max: UploadFileMaxAggregateOutputType | null
  }

  export type UploadFileMinAggregateOutputType = {
    id: string | null
    url: string | null
    type: $Enums.UploadFileType | null
    originalName: string | null
    source: $Enums.UploadSource | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UploadFileMaxAggregateOutputType = {
    id: string | null
    url: string | null
    type: $Enums.UploadFileType | null
    originalName: string | null
    source: $Enums.UploadSource | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UploadFileCountAggregateOutputType = {
    id: number
    url: number
    type: number
    originalName: number
    source: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UploadFileMinAggregateInputType = {
    id?: true
    url?: true
    type?: true
    originalName?: true
    source?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UploadFileMaxAggregateInputType = {
    id?: true
    url?: true
    type?: true
    originalName?: true
    source?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UploadFileCountAggregateInputType = {
    id?: true
    url?: true
    type?: true
    originalName?: true
    source?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UploadFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UploadFile to aggregate.
     */
    where?: UploadFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadFiles to fetch.
     */
    orderBy?: UploadFileOrderByWithRelationInput | UploadFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UploadFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UploadFiles
    **/
    _count?: true | UploadFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UploadFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UploadFileMaxAggregateInputType
  }

  export type GetUploadFileAggregateType<T extends UploadFileAggregateArgs> = {
        [P in keyof T & keyof AggregateUploadFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUploadFile[P]>
      : GetScalarType<T[P], AggregateUploadFile[P]>
  }




  export type UploadFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UploadFileWhereInput
    orderBy?: UploadFileOrderByWithAggregationInput | UploadFileOrderByWithAggregationInput[]
    by: UploadFileScalarFieldEnum[] | UploadFileScalarFieldEnum
    having?: UploadFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UploadFileCountAggregateInputType | true
    _min?: UploadFileMinAggregateInputType
    _max?: UploadFileMaxAggregateInputType
  }

  export type UploadFileGroupByOutputType = {
    id: string
    url: string
    type: $Enums.UploadFileType
    originalName: string | null
    source: $Enums.UploadSource | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    _count: UploadFileCountAggregateOutputType | null
    _min: UploadFileMinAggregateOutputType | null
    _max: UploadFileMaxAggregateOutputType | null
  }

  type GetUploadFileGroupByPayload<T extends UploadFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UploadFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UploadFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UploadFileGroupByOutputType[P]>
            : GetScalarType<T[P], UploadFileGroupByOutputType[P]>
        }
      >
    >


  export type UploadFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    type?: boolean
    originalName?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["uploadFile"]>

  export type UploadFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    type?: boolean
    originalName?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["uploadFile"]>

  export type UploadFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    type?: boolean
    originalName?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["uploadFile"]>

  export type UploadFileSelectScalar = {
    id?: boolean
    url?: boolean
    type?: boolean
    originalName?: boolean
    source?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UploadFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "url" | "type" | "originalName" | "source" | "metadata" | "createdAt" | "updatedAt", ExtArgs["result"]["uploadFile"]>

  export type $UploadFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UploadFile"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      type: $Enums.UploadFileType
      originalName: string | null
      source: $Enums.UploadSource | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["uploadFile"]>
    composites: {}
  }

  type UploadFileGetPayload<S extends boolean | null | undefined | UploadFileDefaultArgs> = $Result.GetResult<Prisma.$UploadFilePayload, S>

  type UploadFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UploadFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UploadFileCountAggregateInputType | true
    }

  export interface UploadFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UploadFile'], meta: { name: 'UploadFile' } }
    /**
     * Find zero or one UploadFile that matches the filter.
     * @param {UploadFileFindUniqueArgs} args - Arguments to find a UploadFile
     * @example
     * // Get one UploadFile
     * const uploadFile = await prisma.uploadFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UploadFileFindUniqueArgs>(args: SelectSubset<T, UploadFileFindUniqueArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UploadFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UploadFileFindUniqueOrThrowArgs} args - Arguments to find a UploadFile
     * @example
     * // Get one UploadFile
     * const uploadFile = await prisma.uploadFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UploadFileFindUniqueOrThrowArgs>(args: SelectSubset<T, UploadFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UploadFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadFileFindFirstArgs} args - Arguments to find a UploadFile
     * @example
     * // Get one UploadFile
     * const uploadFile = await prisma.uploadFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UploadFileFindFirstArgs>(args?: SelectSubset<T, UploadFileFindFirstArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UploadFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadFileFindFirstOrThrowArgs} args - Arguments to find a UploadFile
     * @example
     * // Get one UploadFile
     * const uploadFile = await prisma.uploadFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UploadFileFindFirstOrThrowArgs>(args?: SelectSubset<T, UploadFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UploadFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UploadFiles
     * const uploadFiles = await prisma.uploadFile.findMany()
     * 
     * // Get first 10 UploadFiles
     * const uploadFiles = await prisma.uploadFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const uploadFileWithIdOnly = await prisma.uploadFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UploadFileFindManyArgs>(args?: SelectSubset<T, UploadFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UploadFile.
     * @param {UploadFileCreateArgs} args - Arguments to create a UploadFile.
     * @example
     * // Create one UploadFile
     * const UploadFile = await prisma.uploadFile.create({
     *   data: {
     *     // ... data to create a UploadFile
     *   }
     * })
     * 
     */
    create<T extends UploadFileCreateArgs>(args: SelectSubset<T, UploadFileCreateArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UploadFiles.
     * @param {UploadFileCreateManyArgs} args - Arguments to create many UploadFiles.
     * @example
     * // Create many UploadFiles
     * const uploadFile = await prisma.uploadFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UploadFileCreateManyArgs>(args?: SelectSubset<T, UploadFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UploadFiles and returns the data saved in the database.
     * @param {UploadFileCreateManyAndReturnArgs} args - Arguments to create many UploadFiles.
     * @example
     * // Create many UploadFiles
     * const uploadFile = await prisma.uploadFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UploadFiles and only return the `id`
     * const uploadFileWithIdOnly = await prisma.uploadFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UploadFileCreateManyAndReturnArgs>(args?: SelectSubset<T, UploadFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UploadFile.
     * @param {UploadFileDeleteArgs} args - Arguments to delete one UploadFile.
     * @example
     * // Delete one UploadFile
     * const UploadFile = await prisma.uploadFile.delete({
     *   where: {
     *     // ... filter to delete one UploadFile
     *   }
     * })
     * 
     */
    delete<T extends UploadFileDeleteArgs>(args: SelectSubset<T, UploadFileDeleteArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UploadFile.
     * @param {UploadFileUpdateArgs} args - Arguments to update one UploadFile.
     * @example
     * // Update one UploadFile
     * const uploadFile = await prisma.uploadFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UploadFileUpdateArgs>(args: SelectSubset<T, UploadFileUpdateArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UploadFiles.
     * @param {UploadFileDeleteManyArgs} args - Arguments to filter UploadFiles to delete.
     * @example
     * // Delete a few UploadFiles
     * const { count } = await prisma.uploadFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UploadFileDeleteManyArgs>(args?: SelectSubset<T, UploadFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UploadFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UploadFiles
     * const uploadFile = await prisma.uploadFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UploadFileUpdateManyArgs>(args: SelectSubset<T, UploadFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UploadFiles and returns the data updated in the database.
     * @param {UploadFileUpdateManyAndReturnArgs} args - Arguments to update many UploadFiles.
     * @example
     * // Update many UploadFiles
     * const uploadFile = await prisma.uploadFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UploadFiles and only return the `id`
     * const uploadFileWithIdOnly = await prisma.uploadFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UploadFileUpdateManyAndReturnArgs>(args: SelectSubset<T, UploadFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UploadFile.
     * @param {UploadFileUpsertArgs} args - Arguments to update or create a UploadFile.
     * @example
     * // Update or create a UploadFile
     * const uploadFile = await prisma.uploadFile.upsert({
     *   create: {
     *     // ... data to create a UploadFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UploadFile we want to update
     *   }
     * })
     */
    upsert<T extends UploadFileUpsertArgs>(args: SelectSubset<T, UploadFileUpsertArgs<ExtArgs>>): Prisma__UploadFileClient<$Result.GetResult<Prisma.$UploadFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UploadFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadFileCountArgs} args - Arguments to filter UploadFiles to count.
     * @example
     * // Count the number of UploadFiles
     * const count = await prisma.uploadFile.count({
     *   where: {
     *     // ... the filter for the UploadFiles we want to count
     *   }
     * })
    **/
    count<T extends UploadFileCountArgs>(
      args?: Subset<T, UploadFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UploadFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UploadFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UploadFileAggregateArgs>(args: Subset<T, UploadFileAggregateArgs>): Prisma.PrismaPromise<GetUploadFileAggregateType<T>>

    /**
     * Group by UploadFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UploadFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UploadFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UploadFileGroupByArgs['orderBy'] }
        : { orderBy?: UploadFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UploadFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUploadFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UploadFile model
   */
  readonly fields: UploadFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UploadFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UploadFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UploadFile model
   */
  interface UploadFileFieldRefs {
    readonly id: FieldRef<"UploadFile", 'String'>
    readonly url: FieldRef<"UploadFile", 'String'>
    readonly type: FieldRef<"UploadFile", 'UploadFileType'>
    readonly originalName: FieldRef<"UploadFile", 'String'>
    readonly source: FieldRef<"UploadFile", 'UploadSource'>
    readonly metadata: FieldRef<"UploadFile", 'Json'>
    readonly createdAt: FieldRef<"UploadFile", 'DateTime'>
    readonly updatedAt: FieldRef<"UploadFile", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UploadFile findUnique
   */
  export type UploadFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * Filter, which UploadFile to fetch.
     */
    where: UploadFileWhereUniqueInput
  }

  /**
   * UploadFile findUniqueOrThrow
   */
  export type UploadFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * Filter, which UploadFile to fetch.
     */
    where: UploadFileWhereUniqueInput
  }

  /**
   * UploadFile findFirst
   */
  export type UploadFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * Filter, which UploadFile to fetch.
     */
    where?: UploadFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadFiles to fetch.
     */
    orderBy?: UploadFileOrderByWithRelationInput | UploadFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UploadFiles.
     */
    cursor?: UploadFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UploadFiles.
     */
    distinct?: UploadFileScalarFieldEnum | UploadFileScalarFieldEnum[]
  }

  /**
   * UploadFile findFirstOrThrow
   */
  export type UploadFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * Filter, which UploadFile to fetch.
     */
    where?: UploadFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadFiles to fetch.
     */
    orderBy?: UploadFileOrderByWithRelationInput | UploadFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UploadFiles.
     */
    cursor?: UploadFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UploadFiles.
     */
    distinct?: UploadFileScalarFieldEnum | UploadFileScalarFieldEnum[]
  }

  /**
   * UploadFile findMany
   */
  export type UploadFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * Filter, which UploadFiles to fetch.
     */
    where?: UploadFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UploadFiles to fetch.
     */
    orderBy?: UploadFileOrderByWithRelationInput | UploadFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UploadFiles.
     */
    cursor?: UploadFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UploadFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UploadFiles.
     */
    skip?: number
    distinct?: UploadFileScalarFieldEnum | UploadFileScalarFieldEnum[]
  }

  /**
   * UploadFile create
   */
  export type UploadFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * The data needed to create a UploadFile.
     */
    data: XOR<UploadFileCreateInput, UploadFileUncheckedCreateInput>
  }

  /**
   * UploadFile createMany
   */
  export type UploadFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UploadFiles.
     */
    data: UploadFileCreateManyInput | UploadFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UploadFile createManyAndReturn
   */
  export type UploadFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * The data used to create many UploadFiles.
     */
    data: UploadFileCreateManyInput | UploadFileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UploadFile update
   */
  export type UploadFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * The data needed to update a UploadFile.
     */
    data: XOR<UploadFileUpdateInput, UploadFileUncheckedUpdateInput>
    /**
     * Choose, which UploadFile to update.
     */
    where: UploadFileWhereUniqueInput
  }

  /**
   * UploadFile updateMany
   */
  export type UploadFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UploadFiles.
     */
    data: XOR<UploadFileUpdateManyMutationInput, UploadFileUncheckedUpdateManyInput>
    /**
     * Filter which UploadFiles to update
     */
    where?: UploadFileWhereInput
    /**
     * Limit how many UploadFiles to update.
     */
    limit?: number
  }

  /**
   * UploadFile updateManyAndReturn
   */
  export type UploadFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * The data used to update UploadFiles.
     */
    data: XOR<UploadFileUpdateManyMutationInput, UploadFileUncheckedUpdateManyInput>
    /**
     * Filter which UploadFiles to update
     */
    where?: UploadFileWhereInput
    /**
     * Limit how many UploadFiles to update.
     */
    limit?: number
  }

  /**
   * UploadFile upsert
   */
  export type UploadFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * The filter to search for the UploadFile to update in case it exists.
     */
    where: UploadFileWhereUniqueInput
    /**
     * In case the UploadFile found by the `where` argument doesn't exist, create a new UploadFile with this data.
     */
    create: XOR<UploadFileCreateInput, UploadFileUncheckedCreateInput>
    /**
     * In case the UploadFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UploadFileUpdateInput, UploadFileUncheckedUpdateInput>
  }

  /**
   * UploadFile delete
   */
  export type UploadFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
    /**
     * Filter which UploadFile to delete.
     */
    where: UploadFileWhereUniqueInput
  }

  /**
   * UploadFile deleteMany
   */
  export type UploadFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UploadFiles to delete
     */
    where?: UploadFileWhereInput
    /**
     * Limit how many UploadFiles to delete.
     */
    limit?: number
  }

  /**
   * UploadFile without action
   */
  export type UploadFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UploadFile
     */
    select?: UploadFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UploadFile
     */
    omit?: UploadFileOmit<ExtArgs> | null
  }


  /**
   * Model SocialPlatformSetting
   */

  export type AggregateSocialPlatformSetting = {
    _count: SocialPlatformSettingCountAggregateOutputType | null
    _min: SocialPlatformSettingMinAggregateOutputType | null
    _max: SocialPlatformSettingMaxAggregateOutputType | null
  }

  export type SocialPlatformSettingMinAggregateOutputType = {
    id: string | null
    platform: $Enums.Platform | null
    pageId: string | null
    pageName: string | null
    pageLink: string | null
    accessToken: string | null
    status: $Enums.SettingStatus | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: string | null
    createdBy: string | null
  }

  export type SocialPlatformSettingMaxAggregateOutputType = {
    id: string | null
    platform: $Enums.Platform | null
    pageId: string | null
    pageName: string | null
    pageLink: string | null
    accessToken: string | null
    status: $Enums.SettingStatus | null
    expiresAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    teamId: string | null
    createdBy: string | null
  }

  export type SocialPlatformSettingCountAggregateOutputType = {
    id: number
    platform: number
    pageId: number
    pageName: number
    pageLink: number
    accessToken: number
    status: number
    expiresAt: number
    metadata: number
    createdAt: number
    updatedAt: number
    teamId: number
    createdBy: number
    _all: number
  }


  export type SocialPlatformSettingMinAggregateInputType = {
    id?: true
    platform?: true
    pageId?: true
    pageName?: true
    pageLink?: true
    accessToken?: true
    status?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    createdBy?: true
  }

  export type SocialPlatformSettingMaxAggregateInputType = {
    id?: true
    platform?: true
    pageId?: true
    pageName?: true
    pageLink?: true
    accessToken?: true
    status?: true
    expiresAt?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    createdBy?: true
  }

  export type SocialPlatformSettingCountAggregateInputType = {
    id?: true
    platform?: true
    pageId?: true
    pageName?: true
    pageLink?: true
    accessToken?: true
    status?: true
    expiresAt?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    teamId?: true
    createdBy?: true
    _all?: true
  }

  export type SocialPlatformSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialPlatformSetting to aggregate.
     */
    where?: SocialPlatformSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialPlatformSettings to fetch.
     */
    orderBy?: SocialPlatformSettingOrderByWithRelationInput | SocialPlatformSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SocialPlatformSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialPlatformSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialPlatformSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned SocialPlatformSettings
    **/
    _count?: true | SocialPlatformSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SocialPlatformSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SocialPlatformSettingMaxAggregateInputType
  }

  export type GetSocialPlatformSettingAggregateType<T extends SocialPlatformSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateSocialPlatformSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSocialPlatformSetting[P]>
      : GetScalarType<T[P], AggregateSocialPlatformSetting[P]>
  }




  export type SocialPlatformSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SocialPlatformSettingWhereInput
    orderBy?: SocialPlatformSettingOrderByWithAggregationInput | SocialPlatformSettingOrderByWithAggregationInput[]
    by: SocialPlatformSettingScalarFieldEnum[] | SocialPlatformSettingScalarFieldEnum
    having?: SocialPlatformSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SocialPlatformSettingCountAggregateInputType | true
    _min?: SocialPlatformSettingMinAggregateInputType
    _max?: SocialPlatformSettingMaxAggregateInputType
  }

  export type SocialPlatformSettingGroupByOutputType = {
    id: string
    platform: $Enums.Platform
    pageId: string | null
    pageName: string | null
    pageLink: string | null
    accessToken: string
    status: $Enums.SettingStatus
    expiresAt: Date | null
    metadata: JsonValue | null
    createdAt: Date
    updatedAt: Date
    teamId: string
    createdBy: string | null
    _count: SocialPlatformSettingCountAggregateOutputType | null
    _min: SocialPlatformSettingMinAggregateOutputType | null
    _max: SocialPlatformSettingMaxAggregateOutputType | null
  }

  type GetSocialPlatformSettingGroupByPayload<T extends SocialPlatformSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SocialPlatformSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SocialPlatformSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SocialPlatformSettingGroupByOutputType[P]>
            : GetScalarType<T[P], SocialPlatformSettingGroupByOutputType[P]>
        }
      >
    >


  export type SocialPlatformSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platform?: boolean
    pageId?: boolean
    pageName?: boolean
    pageLink?: boolean
    accessToken?: boolean
    status?: boolean
    expiresAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    createdBy?: boolean
    PostSetting?: boolean | SocialPlatformSetting$PostSettingArgs<ExtArgs>
    UserPageSetting?: boolean | SocialPlatformSetting$UserPageSettingArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    createdUser?: boolean | SocialPlatformSetting$createdUserArgs<ExtArgs>
    _count?: boolean | SocialPlatformSettingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["socialPlatformSetting"]>

  export type SocialPlatformSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platform?: boolean
    pageId?: boolean
    pageName?: boolean
    pageLink?: boolean
    accessToken?: boolean
    status?: boolean
    expiresAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    createdBy?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    createdUser?: boolean | SocialPlatformSetting$createdUserArgs<ExtArgs>
  }, ExtArgs["result"]["socialPlatformSetting"]>

  export type SocialPlatformSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platform?: boolean
    pageId?: boolean
    pageName?: boolean
    pageLink?: boolean
    accessToken?: boolean
    status?: boolean
    expiresAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    createdBy?: boolean
    team?: boolean | TeamDefaultArgs<ExtArgs>
    createdUser?: boolean | SocialPlatformSetting$createdUserArgs<ExtArgs>
  }, ExtArgs["result"]["socialPlatformSetting"]>

  export type SocialPlatformSettingSelectScalar = {
    id?: boolean
    platform?: boolean
    pageId?: boolean
    pageName?: boolean
    pageLink?: boolean
    accessToken?: boolean
    status?: boolean
    expiresAt?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    teamId?: boolean
    createdBy?: boolean
  }

  export type SocialPlatformSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "platform" | "pageId" | "pageName" | "pageLink" | "accessToken" | "status" | "expiresAt" | "metadata" | "createdAt" | "updatedAt" | "teamId" | "createdBy", ExtArgs["result"]["socialPlatformSetting"]>
  export type SocialPlatformSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    PostSetting?: boolean | SocialPlatformSetting$PostSettingArgs<ExtArgs>
    UserPageSetting?: boolean | SocialPlatformSetting$UserPageSettingArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
    createdUser?: boolean | SocialPlatformSetting$createdUserArgs<ExtArgs>
    _count?: boolean | SocialPlatformSettingCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type SocialPlatformSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    createdUser?: boolean | SocialPlatformSetting$createdUserArgs<ExtArgs>
  }
  export type SocialPlatformSettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    team?: boolean | TeamDefaultArgs<ExtArgs>
    createdUser?: boolean | SocialPlatformSetting$createdUserArgs<ExtArgs>
  }

  export type $SocialPlatformSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "SocialPlatformSetting"
    objects: {
      /**
       * Relation (uncomment if you have a PlatformToken model)
       */
      PostSetting: Prisma.$PostSettingPayload<ExtArgs>[]
      UserPageSetting: Prisma.$UserPageSettingPayload<ExtArgs>[]
      team: Prisma.$TeamPayload<ExtArgs>
      createdUser: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      platform: $Enums.Platform
      pageId: string | null
      pageName: string | null
      pageLink: string | null
      accessToken: string
      status: $Enums.SettingStatus
      expiresAt: Date | null
      metadata: Prisma.JsonValue | null
      createdAt: Date
      updatedAt: Date
      teamId: string
      createdBy: string | null
    }, ExtArgs["result"]["socialPlatformSetting"]>
    composites: {}
  }

  type SocialPlatformSettingGetPayload<S extends boolean | null | undefined | SocialPlatformSettingDefaultArgs> = $Result.GetResult<Prisma.$SocialPlatformSettingPayload, S>

  type SocialPlatformSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SocialPlatformSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SocialPlatformSettingCountAggregateInputType | true
    }

  export interface SocialPlatformSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['SocialPlatformSetting'], meta: { name: 'SocialPlatformSetting' } }
    /**
     * Find zero or one SocialPlatformSetting that matches the filter.
     * @param {SocialPlatformSettingFindUniqueArgs} args - Arguments to find a SocialPlatformSetting
     * @example
     * // Get one SocialPlatformSetting
     * const socialPlatformSetting = await prisma.socialPlatformSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SocialPlatformSettingFindUniqueArgs>(args: SelectSubset<T, SocialPlatformSettingFindUniqueArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SocialPlatformSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SocialPlatformSettingFindUniqueOrThrowArgs} args - Arguments to find a SocialPlatformSetting
     * @example
     * // Get one SocialPlatformSetting
     * const socialPlatformSetting = await prisma.socialPlatformSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SocialPlatformSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, SocialPlatformSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SocialPlatformSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialPlatformSettingFindFirstArgs} args - Arguments to find a SocialPlatformSetting
     * @example
     * // Get one SocialPlatformSetting
     * const socialPlatformSetting = await prisma.socialPlatformSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SocialPlatformSettingFindFirstArgs>(args?: SelectSubset<T, SocialPlatformSettingFindFirstArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SocialPlatformSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialPlatformSettingFindFirstOrThrowArgs} args - Arguments to find a SocialPlatformSetting
     * @example
     * // Get one SocialPlatformSetting
     * const socialPlatformSetting = await prisma.socialPlatformSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SocialPlatformSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, SocialPlatformSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SocialPlatformSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialPlatformSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SocialPlatformSettings
     * const socialPlatformSettings = await prisma.socialPlatformSetting.findMany()
     * 
     * // Get first 10 SocialPlatformSettings
     * const socialPlatformSettings = await prisma.socialPlatformSetting.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const socialPlatformSettingWithIdOnly = await prisma.socialPlatformSetting.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends SocialPlatformSettingFindManyArgs>(args?: SelectSubset<T, SocialPlatformSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SocialPlatformSetting.
     * @param {SocialPlatformSettingCreateArgs} args - Arguments to create a SocialPlatformSetting.
     * @example
     * // Create one SocialPlatformSetting
     * const SocialPlatformSetting = await prisma.socialPlatformSetting.create({
     *   data: {
     *     // ... data to create a SocialPlatformSetting
     *   }
     * })
     * 
     */
    create<T extends SocialPlatformSettingCreateArgs>(args: SelectSubset<T, SocialPlatformSettingCreateArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SocialPlatformSettings.
     * @param {SocialPlatformSettingCreateManyArgs} args - Arguments to create many SocialPlatformSettings.
     * @example
     * // Create many SocialPlatformSettings
     * const socialPlatformSetting = await prisma.socialPlatformSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SocialPlatformSettingCreateManyArgs>(args?: SelectSubset<T, SocialPlatformSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SocialPlatformSettings and returns the data saved in the database.
     * @param {SocialPlatformSettingCreateManyAndReturnArgs} args - Arguments to create many SocialPlatformSettings.
     * @example
     * // Create many SocialPlatformSettings
     * const socialPlatformSetting = await prisma.socialPlatformSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SocialPlatformSettings and only return the `id`
     * const socialPlatformSettingWithIdOnly = await prisma.socialPlatformSetting.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SocialPlatformSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, SocialPlatformSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SocialPlatformSetting.
     * @param {SocialPlatformSettingDeleteArgs} args - Arguments to delete one SocialPlatformSetting.
     * @example
     * // Delete one SocialPlatformSetting
     * const SocialPlatformSetting = await prisma.socialPlatformSetting.delete({
     *   where: {
     *     // ... filter to delete one SocialPlatformSetting
     *   }
     * })
     * 
     */
    delete<T extends SocialPlatformSettingDeleteArgs>(args: SelectSubset<T, SocialPlatformSettingDeleteArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SocialPlatformSetting.
     * @param {SocialPlatformSettingUpdateArgs} args - Arguments to update one SocialPlatformSetting.
     * @example
     * // Update one SocialPlatformSetting
     * const socialPlatformSetting = await prisma.socialPlatformSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SocialPlatformSettingUpdateArgs>(args: SelectSubset<T, SocialPlatformSettingUpdateArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SocialPlatformSettings.
     * @param {SocialPlatformSettingDeleteManyArgs} args - Arguments to filter SocialPlatformSettings to delete.
     * @example
     * // Delete a few SocialPlatformSettings
     * const { count } = await prisma.socialPlatformSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SocialPlatformSettingDeleteManyArgs>(args?: SelectSubset<T, SocialPlatformSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialPlatformSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialPlatformSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SocialPlatformSettings
     * const socialPlatformSetting = await prisma.socialPlatformSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SocialPlatformSettingUpdateManyArgs>(args: SelectSubset<T, SocialPlatformSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SocialPlatformSettings and returns the data updated in the database.
     * @param {SocialPlatformSettingUpdateManyAndReturnArgs} args - Arguments to update many SocialPlatformSettings.
     * @example
     * // Update many SocialPlatformSettings
     * const socialPlatformSetting = await prisma.socialPlatformSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SocialPlatformSettings and only return the `id`
     * const socialPlatformSettingWithIdOnly = await prisma.socialPlatformSetting.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SocialPlatformSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, SocialPlatformSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SocialPlatformSetting.
     * @param {SocialPlatformSettingUpsertArgs} args - Arguments to update or create a SocialPlatformSetting.
     * @example
     * // Update or create a SocialPlatformSetting
     * const socialPlatformSetting = await prisma.socialPlatformSetting.upsert({
     *   create: {
     *     // ... data to create a SocialPlatformSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SocialPlatformSetting we want to update
     *   }
     * })
     */
    upsert<T extends SocialPlatformSettingUpsertArgs>(args: SelectSubset<T, SocialPlatformSettingUpsertArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SocialPlatformSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialPlatformSettingCountArgs} args - Arguments to filter SocialPlatformSettings to count.
     * @example
     * // Count the number of SocialPlatformSettings
     * const count = await prisma.socialPlatformSetting.count({
     *   where: {
     *     // ... the filter for the SocialPlatformSettings we want to count
     *   }
     * })
    **/
    count<T extends SocialPlatformSettingCountArgs>(
      args?: Subset<T, SocialPlatformSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SocialPlatformSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SocialPlatformSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialPlatformSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SocialPlatformSettingAggregateArgs>(args: Subset<T, SocialPlatformSettingAggregateArgs>): Prisma.PrismaPromise<GetSocialPlatformSettingAggregateType<T>>

    /**
     * Group by SocialPlatformSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SocialPlatformSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SocialPlatformSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SocialPlatformSettingGroupByArgs['orderBy'] }
        : { orderBy?: SocialPlatformSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SocialPlatformSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSocialPlatformSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the SocialPlatformSetting model
   */
  readonly fields: SocialPlatformSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for SocialPlatformSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SocialPlatformSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    PostSetting<T extends SocialPlatformSetting$PostSettingArgs<ExtArgs> = {}>(args?: Subset<T, SocialPlatformSetting$PostSettingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UserPageSetting<T extends SocialPlatformSetting$UserPageSettingArgs<ExtArgs> = {}>(args?: Subset<T, SocialPlatformSetting$UserPageSettingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdUser<T extends SocialPlatformSetting$createdUserArgs<ExtArgs> = {}>(args?: Subset<T, SocialPlatformSetting$createdUserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the SocialPlatformSetting model
   */
  interface SocialPlatformSettingFieldRefs {
    readonly id: FieldRef<"SocialPlatformSetting", 'String'>
    readonly platform: FieldRef<"SocialPlatformSetting", 'Platform'>
    readonly pageId: FieldRef<"SocialPlatformSetting", 'String'>
    readonly pageName: FieldRef<"SocialPlatformSetting", 'String'>
    readonly pageLink: FieldRef<"SocialPlatformSetting", 'String'>
    readonly accessToken: FieldRef<"SocialPlatformSetting", 'String'>
    readonly status: FieldRef<"SocialPlatformSetting", 'SettingStatus'>
    readonly expiresAt: FieldRef<"SocialPlatformSetting", 'DateTime'>
    readonly metadata: FieldRef<"SocialPlatformSetting", 'Json'>
    readonly createdAt: FieldRef<"SocialPlatformSetting", 'DateTime'>
    readonly updatedAt: FieldRef<"SocialPlatformSetting", 'DateTime'>
    readonly teamId: FieldRef<"SocialPlatformSetting", 'String'>
    readonly createdBy: FieldRef<"SocialPlatformSetting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * SocialPlatformSetting findUnique
   */
  export type SocialPlatformSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * Filter, which SocialPlatformSetting to fetch.
     */
    where: SocialPlatformSettingWhereUniqueInput
  }

  /**
   * SocialPlatformSetting findUniqueOrThrow
   */
  export type SocialPlatformSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * Filter, which SocialPlatformSetting to fetch.
     */
    where: SocialPlatformSettingWhereUniqueInput
  }

  /**
   * SocialPlatformSetting findFirst
   */
  export type SocialPlatformSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * Filter, which SocialPlatformSetting to fetch.
     */
    where?: SocialPlatformSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialPlatformSettings to fetch.
     */
    orderBy?: SocialPlatformSettingOrderByWithRelationInput | SocialPlatformSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialPlatformSettings.
     */
    cursor?: SocialPlatformSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialPlatformSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialPlatformSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialPlatformSettings.
     */
    distinct?: SocialPlatformSettingScalarFieldEnum | SocialPlatformSettingScalarFieldEnum[]
  }

  /**
   * SocialPlatformSetting findFirstOrThrow
   */
  export type SocialPlatformSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * Filter, which SocialPlatformSetting to fetch.
     */
    where?: SocialPlatformSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialPlatformSettings to fetch.
     */
    orderBy?: SocialPlatformSettingOrderByWithRelationInput | SocialPlatformSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for SocialPlatformSettings.
     */
    cursor?: SocialPlatformSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialPlatformSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialPlatformSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of SocialPlatformSettings.
     */
    distinct?: SocialPlatformSettingScalarFieldEnum | SocialPlatformSettingScalarFieldEnum[]
  }

  /**
   * SocialPlatformSetting findMany
   */
  export type SocialPlatformSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * Filter, which SocialPlatformSettings to fetch.
     */
    where?: SocialPlatformSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of SocialPlatformSettings to fetch.
     */
    orderBy?: SocialPlatformSettingOrderByWithRelationInput | SocialPlatformSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing SocialPlatformSettings.
     */
    cursor?: SocialPlatformSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` SocialPlatformSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` SocialPlatformSettings.
     */
    skip?: number
    distinct?: SocialPlatformSettingScalarFieldEnum | SocialPlatformSettingScalarFieldEnum[]
  }

  /**
   * SocialPlatformSetting create
   */
  export type SocialPlatformSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a SocialPlatformSetting.
     */
    data: XOR<SocialPlatformSettingCreateInput, SocialPlatformSettingUncheckedCreateInput>
  }

  /**
   * SocialPlatformSetting createMany
   */
  export type SocialPlatformSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many SocialPlatformSettings.
     */
    data: SocialPlatformSettingCreateManyInput | SocialPlatformSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * SocialPlatformSetting createManyAndReturn
   */
  export type SocialPlatformSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * The data used to create many SocialPlatformSettings.
     */
    data: SocialPlatformSettingCreateManyInput | SocialPlatformSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * SocialPlatformSetting update
   */
  export type SocialPlatformSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a SocialPlatformSetting.
     */
    data: XOR<SocialPlatformSettingUpdateInput, SocialPlatformSettingUncheckedUpdateInput>
    /**
     * Choose, which SocialPlatformSetting to update.
     */
    where: SocialPlatformSettingWhereUniqueInput
  }

  /**
   * SocialPlatformSetting updateMany
   */
  export type SocialPlatformSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update SocialPlatformSettings.
     */
    data: XOR<SocialPlatformSettingUpdateManyMutationInput, SocialPlatformSettingUncheckedUpdateManyInput>
    /**
     * Filter which SocialPlatformSettings to update
     */
    where?: SocialPlatformSettingWhereInput
    /**
     * Limit how many SocialPlatformSettings to update.
     */
    limit?: number
  }

  /**
   * SocialPlatformSetting updateManyAndReturn
   */
  export type SocialPlatformSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * The data used to update SocialPlatformSettings.
     */
    data: XOR<SocialPlatformSettingUpdateManyMutationInput, SocialPlatformSettingUncheckedUpdateManyInput>
    /**
     * Filter which SocialPlatformSettings to update
     */
    where?: SocialPlatformSettingWhereInput
    /**
     * Limit how many SocialPlatformSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * SocialPlatformSetting upsert
   */
  export type SocialPlatformSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the SocialPlatformSetting to update in case it exists.
     */
    where: SocialPlatformSettingWhereUniqueInput
    /**
     * In case the SocialPlatformSetting found by the `where` argument doesn't exist, create a new SocialPlatformSetting with this data.
     */
    create: XOR<SocialPlatformSettingCreateInput, SocialPlatformSettingUncheckedCreateInput>
    /**
     * In case the SocialPlatformSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SocialPlatformSettingUpdateInput, SocialPlatformSettingUncheckedUpdateInput>
  }

  /**
   * SocialPlatformSetting delete
   */
  export type SocialPlatformSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    /**
     * Filter which SocialPlatformSetting to delete.
     */
    where: SocialPlatformSettingWhereUniqueInput
  }

  /**
   * SocialPlatformSetting deleteMany
   */
  export type SocialPlatformSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which SocialPlatformSettings to delete
     */
    where?: SocialPlatformSettingWhereInput
    /**
     * Limit how many SocialPlatformSettings to delete.
     */
    limit?: number
  }

  /**
   * SocialPlatformSetting.PostSetting
   */
  export type SocialPlatformSetting$PostSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostSetting
     */
    select?: PostSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PostSetting
     */
    omit?: PostSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostSettingInclude<ExtArgs> | null
    where?: PostSettingWhereInput
    orderBy?: PostSettingOrderByWithRelationInput | PostSettingOrderByWithRelationInput[]
    cursor?: PostSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostSettingScalarFieldEnum | PostSettingScalarFieldEnum[]
  }

  /**
   * SocialPlatformSetting.UserPageSetting
   */
  export type SocialPlatformSetting$UserPageSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    where?: UserPageSettingWhereInput
    orderBy?: UserPageSettingOrderByWithRelationInput | UserPageSettingOrderByWithRelationInput[]
    cursor?: UserPageSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPageSettingScalarFieldEnum | UserPageSettingScalarFieldEnum[]
  }

  /**
   * SocialPlatformSetting.createdUser
   */
  export type SocialPlatformSetting$createdUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * SocialPlatformSetting without action
   */
  export type SocialPlatformSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
  }


  /**
   * Model UserPageSetting
   */

  export type AggregateUserPageSetting = {
    _count: UserPageSettingCountAggregateOutputType | null
    _min: UserPageSettingMinAggregateOutputType | null
    _max: UserPageSettingMaxAggregateOutputType | null
  }

  export type UserPageSettingMinAggregateOutputType = {
    userId: string | null
    socialSettingId: string | null
    role: $Enums.UserRole | null
  }

  export type UserPageSettingMaxAggregateOutputType = {
    userId: string | null
    socialSettingId: string | null
    role: $Enums.UserRole | null
  }

  export type UserPageSettingCountAggregateOutputType = {
    userId: number
    socialSettingId: number
    role: number
    _all: number
  }


  export type UserPageSettingMinAggregateInputType = {
    userId?: true
    socialSettingId?: true
    role?: true
  }

  export type UserPageSettingMaxAggregateInputType = {
    userId?: true
    socialSettingId?: true
    role?: true
  }

  export type UserPageSettingCountAggregateInputType = {
    userId?: true
    socialSettingId?: true
    role?: true
    _all?: true
  }

  export type UserPageSettingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPageSetting to aggregate.
     */
    where?: UserPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPageSettings to fetch.
     */
    orderBy?: UserPageSettingOrderByWithRelationInput | UserPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPageSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPageSettings
    **/
    _count?: true | UserPageSettingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPageSettingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPageSettingMaxAggregateInputType
  }

  export type GetUserPageSettingAggregateType<T extends UserPageSettingAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPageSetting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPageSetting[P]>
      : GetScalarType<T[P], AggregateUserPageSetting[P]>
  }




  export type UserPageSettingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPageSettingWhereInput
    orderBy?: UserPageSettingOrderByWithAggregationInput | UserPageSettingOrderByWithAggregationInput[]
    by: UserPageSettingScalarFieldEnum[] | UserPageSettingScalarFieldEnum
    having?: UserPageSettingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPageSettingCountAggregateInputType | true
    _min?: UserPageSettingMinAggregateInputType
    _max?: UserPageSettingMaxAggregateInputType
  }

  export type UserPageSettingGroupByOutputType = {
    userId: string
    socialSettingId: string
    role: $Enums.UserRole
    _count: UserPageSettingCountAggregateOutputType | null
    _min: UserPageSettingMinAggregateOutputType | null
    _max: UserPageSettingMaxAggregateOutputType | null
  }

  type GetUserPageSettingGroupByPayload<T extends UserPageSettingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPageSettingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPageSettingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPageSettingGroupByOutputType[P]>
            : GetScalarType<T[P], UserPageSettingGroupByOutputType[P]>
        }
      >
    >


  export type UserPageSettingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    socialSettingId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPageSetting"]>

  export type UserPageSettingSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    socialSettingId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPageSetting"]>

  export type UserPageSettingSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    socialSettingId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userPageSetting"]>

  export type UserPageSettingSelectScalar = {
    userId?: boolean
    socialSettingId?: boolean
    role?: boolean
  }

  export type UserPageSettingOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "socialSettingId" | "role", ExtArgs["result"]["userPageSetting"]>
  export type UserPageSettingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }
  export type UserPageSettingIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }
  export type UserPageSettingIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    socialSetting?: boolean | SocialPlatformSettingDefaultArgs<ExtArgs>
  }

  export type $UserPageSettingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPageSetting"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      socialSetting: Prisma.$SocialPlatformSettingPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      socialSettingId: string
      role: $Enums.UserRole
    }, ExtArgs["result"]["userPageSetting"]>
    composites: {}
  }

  type UserPageSettingGetPayload<S extends boolean | null | undefined | UserPageSettingDefaultArgs> = $Result.GetResult<Prisma.$UserPageSettingPayload, S>

  type UserPageSettingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPageSettingFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPageSettingCountAggregateInputType | true
    }

  export interface UserPageSettingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPageSetting'], meta: { name: 'UserPageSetting' } }
    /**
     * Find zero or one UserPageSetting that matches the filter.
     * @param {UserPageSettingFindUniqueArgs} args - Arguments to find a UserPageSetting
     * @example
     * // Get one UserPageSetting
     * const userPageSetting = await prisma.userPageSetting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPageSettingFindUniqueArgs>(args: SelectSubset<T, UserPageSettingFindUniqueArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPageSetting that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPageSettingFindUniqueOrThrowArgs} args - Arguments to find a UserPageSetting
     * @example
     * // Get one UserPageSetting
     * const userPageSetting = await prisma.userPageSetting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPageSettingFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPageSettingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPageSetting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPageSettingFindFirstArgs} args - Arguments to find a UserPageSetting
     * @example
     * // Get one UserPageSetting
     * const userPageSetting = await prisma.userPageSetting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPageSettingFindFirstArgs>(args?: SelectSubset<T, UserPageSettingFindFirstArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPageSetting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPageSettingFindFirstOrThrowArgs} args - Arguments to find a UserPageSetting
     * @example
     * // Get one UserPageSetting
     * const userPageSetting = await prisma.userPageSetting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPageSettingFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPageSettingFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPageSettings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPageSettingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPageSettings
     * const userPageSettings = await prisma.userPageSetting.findMany()
     * 
     * // Get first 10 UserPageSettings
     * const userPageSettings = await prisma.userPageSetting.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userPageSettingWithUserIdOnly = await prisma.userPageSetting.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends UserPageSettingFindManyArgs>(args?: SelectSubset<T, UserPageSettingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPageSetting.
     * @param {UserPageSettingCreateArgs} args - Arguments to create a UserPageSetting.
     * @example
     * // Create one UserPageSetting
     * const UserPageSetting = await prisma.userPageSetting.create({
     *   data: {
     *     // ... data to create a UserPageSetting
     *   }
     * })
     * 
     */
    create<T extends UserPageSettingCreateArgs>(args: SelectSubset<T, UserPageSettingCreateArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPageSettings.
     * @param {UserPageSettingCreateManyArgs} args - Arguments to create many UserPageSettings.
     * @example
     * // Create many UserPageSettings
     * const userPageSetting = await prisma.userPageSetting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPageSettingCreateManyArgs>(args?: SelectSubset<T, UserPageSettingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPageSettings and returns the data saved in the database.
     * @param {UserPageSettingCreateManyAndReturnArgs} args - Arguments to create many UserPageSettings.
     * @example
     * // Create many UserPageSettings
     * const userPageSetting = await prisma.userPageSetting.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPageSettings and only return the `userId`
     * const userPageSettingWithUserIdOnly = await prisma.userPageSetting.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPageSettingCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPageSettingCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPageSetting.
     * @param {UserPageSettingDeleteArgs} args - Arguments to delete one UserPageSetting.
     * @example
     * // Delete one UserPageSetting
     * const UserPageSetting = await prisma.userPageSetting.delete({
     *   where: {
     *     // ... filter to delete one UserPageSetting
     *   }
     * })
     * 
     */
    delete<T extends UserPageSettingDeleteArgs>(args: SelectSubset<T, UserPageSettingDeleteArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPageSetting.
     * @param {UserPageSettingUpdateArgs} args - Arguments to update one UserPageSetting.
     * @example
     * // Update one UserPageSetting
     * const userPageSetting = await prisma.userPageSetting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPageSettingUpdateArgs>(args: SelectSubset<T, UserPageSettingUpdateArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPageSettings.
     * @param {UserPageSettingDeleteManyArgs} args - Arguments to filter UserPageSettings to delete.
     * @example
     * // Delete a few UserPageSettings
     * const { count } = await prisma.userPageSetting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPageSettingDeleteManyArgs>(args?: SelectSubset<T, UserPageSettingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPageSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPageSettingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPageSettings
     * const userPageSetting = await prisma.userPageSetting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPageSettingUpdateManyArgs>(args: SelectSubset<T, UserPageSettingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPageSettings and returns the data updated in the database.
     * @param {UserPageSettingUpdateManyAndReturnArgs} args - Arguments to update many UserPageSettings.
     * @example
     * // Update many UserPageSettings
     * const userPageSetting = await prisma.userPageSetting.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPageSettings and only return the `userId`
     * const userPageSettingWithUserIdOnly = await prisma.userPageSetting.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPageSettingUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPageSettingUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPageSetting.
     * @param {UserPageSettingUpsertArgs} args - Arguments to update or create a UserPageSetting.
     * @example
     * // Update or create a UserPageSetting
     * const userPageSetting = await prisma.userPageSetting.upsert({
     *   create: {
     *     // ... data to create a UserPageSetting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPageSetting we want to update
     *   }
     * })
     */
    upsert<T extends UserPageSettingUpsertArgs>(args: SelectSubset<T, UserPageSettingUpsertArgs<ExtArgs>>): Prisma__UserPageSettingClient<$Result.GetResult<Prisma.$UserPageSettingPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPageSettings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPageSettingCountArgs} args - Arguments to filter UserPageSettings to count.
     * @example
     * // Count the number of UserPageSettings
     * const count = await prisma.userPageSetting.count({
     *   where: {
     *     // ... the filter for the UserPageSettings we want to count
     *   }
     * })
    **/
    count<T extends UserPageSettingCountArgs>(
      args?: Subset<T, UserPageSettingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPageSettingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPageSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPageSettingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPageSettingAggregateArgs>(args: Subset<T, UserPageSettingAggregateArgs>): Prisma.PrismaPromise<GetUserPageSettingAggregateType<T>>

    /**
     * Group by UserPageSetting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPageSettingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPageSettingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPageSettingGroupByArgs['orderBy'] }
        : { orderBy?: UserPageSettingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPageSettingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPageSettingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPageSetting model
   */
  readonly fields: UserPageSettingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPageSetting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPageSettingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    socialSetting<T extends SocialPlatformSettingDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SocialPlatformSettingDefaultArgs<ExtArgs>>): Prisma__SocialPlatformSettingClient<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPageSetting model
   */
  interface UserPageSettingFieldRefs {
    readonly userId: FieldRef<"UserPageSetting", 'String'>
    readonly socialSettingId: FieldRef<"UserPageSetting", 'String'>
    readonly role: FieldRef<"UserPageSetting", 'UserRole'>
  }
    

  // Custom InputTypes
  /**
   * UserPageSetting findUnique
   */
  export type UserPageSettingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserPageSetting to fetch.
     */
    where: UserPageSettingWhereUniqueInput
  }

  /**
   * UserPageSetting findUniqueOrThrow
   */
  export type UserPageSettingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserPageSetting to fetch.
     */
    where: UserPageSettingWhereUniqueInput
  }

  /**
   * UserPageSetting findFirst
   */
  export type UserPageSettingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserPageSetting to fetch.
     */
    where?: UserPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPageSettings to fetch.
     */
    orderBy?: UserPageSettingOrderByWithRelationInput | UserPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPageSettings.
     */
    cursor?: UserPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPageSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPageSettings.
     */
    distinct?: UserPageSettingScalarFieldEnum | UserPageSettingScalarFieldEnum[]
  }

  /**
   * UserPageSetting findFirstOrThrow
   */
  export type UserPageSettingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserPageSetting to fetch.
     */
    where?: UserPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPageSettings to fetch.
     */
    orderBy?: UserPageSettingOrderByWithRelationInput | UserPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPageSettings.
     */
    cursor?: UserPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPageSettings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPageSettings.
     */
    distinct?: UserPageSettingScalarFieldEnum | UserPageSettingScalarFieldEnum[]
  }

  /**
   * UserPageSetting findMany
   */
  export type UserPageSettingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * Filter, which UserPageSettings to fetch.
     */
    where?: UserPageSettingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPageSettings to fetch.
     */
    orderBy?: UserPageSettingOrderByWithRelationInput | UserPageSettingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPageSettings.
     */
    cursor?: UserPageSettingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPageSettings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPageSettings.
     */
    skip?: number
    distinct?: UserPageSettingScalarFieldEnum | UserPageSettingScalarFieldEnum[]
  }

  /**
   * UserPageSetting create
   */
  export type UserPageSettingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPageSetting.
     */
    data: XOR<UserPageSettingCreateInput, UserPageSettingUncheckedCreateInput>
  }

  /**
   * UserPageSetting createMany
   */
  export type UserPageSettingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPageSettings.
     */
    data: UserPageSettingCreateManyInput | UserPageSettingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPageSetting createManyAndReturn
   */
  export type UserPageSettingCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * The data used to create many UserPageSettings.
     */
    data: UserPageSettingCreateManyInput | UserPageSettingCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPageSetting update
   */
  export type UserPageSettingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPageSetting.
     */
    data: XOR<UserPageSettingUpdateInput, UserPageSettingUncheckedUpdateInput>
    /**
     * Choose, which UserPageSetting to update.
     */
    where: UserPageSettingWhereUniqueInput
  }

  /**
   * UserPageSetting updateMany
   */
  export type UserPageSettingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPageSettings.
     */
    data: XOR<UserPageSettingUpdateManyMutationInput, UserPageSettingUncheckedUpdateManyInput>
    /**
     * Filter which UserPageSettings to update
     */
    where?: UserPageSettingWhereInput
    /**
     * Limit how many UserPageSettings to update.
     */
    limit?: number
  }

  /**
   * UserPageSetting updateManyAndReturn
   */
  export type UserPageSettingUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * The data used to update UserPageSettings.
     */
    data: XOR<UserPageSettingUpdateManyMutationInput, UserPageSettingUncheckedUpdateManyInput>
    /**
     * Filter which UserPageSettings to update
     */
    where?: UserPageSettingWhereInput
    /**
     * Limit how many UserPageSettings to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPageSetting upsert
   */
  export type UserPageSettingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPageSetting to update in case it exists.
     */
    where: UserPageSettingWhereUniqueInput
    /**
     * In case the UserPageSetting found by the `where` argument doesn't exist, create a new UserPageSetting with this data.
     */
    create: XOR<UserPageSettingCreateInput, UserPageSettingUncheckedCreateInput>
    /**
     * In case the UserPageSetting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPageSettingUpdateInput, UserPageSettingUncheckedUpdateInput>
  }

  /**
   * UserPageSetting delete
   */
  export type UserPageSettingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
    /**
     * Filter which UserPageSetting to delete.
     */
    where: UserPageSettingWhereUniqueInput
  }

  /**
   * UserPageSetting deleteMany
   */
  export type UserPageSettingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPageSettings to delete
     */
    where?: UserPageSettingWhereInput
    /**
     * Limit how many UserPageSettings to delete.
     */
    limit?: number
  }

  /**
   * UserPageSetting without action
   */
  export type UserPageSettingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPageSetting
     */
    select?: UserPageSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPageSetting
     */
    omit?: UserPageSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPageSettingInclude<ExtArgs> | null
  }


  /**
   * Model Team
   */

  export type AggregateTeam = {
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  export type TeamMinAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamMaxAggregateOutputType = {
    id: string | null
    name: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TeamCountAggregateOutputType = {
    id: number
    name: number
    description: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TeamMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TeamCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TeamAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Team to aggregate.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Teams
    **/
    _count?: true | TeamCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMaxAggregateInputType
  }

  export type GetTeamAggregateType<T extends TeamAggregateArgs> = {
        [P in keyof T & keyof AggregateTeam]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeam[P]>
      : GetScalarType<T[P], AggregateTeam[P]>
  }




  export type TeamGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamWhereInput
    orderBy?: TeamOrderByWithAggregationInput | TeamOrderByWithAggregationInput[]
    by: TeamScalarFieldEnum[] | TeamScalarFieldEnum
    having?: TeamScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamCountAggregateInputType | true
    _min?: TeamMinAggregateInputType
    _max?: TeamMaxAggregateInputType
  }

  export type TeamGroupByOutputType = {
    id: string
    name: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    _count: TeamCountAggregateOutputType | null
    _min: TeamMinAggregateOutputType | null
    _max: TeamMaxAggregateOutputType | null
  }

  type GetTeamGroupByPayload<T extends TeamGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamGroupByOutputType[P]>
            : GetScalarType<T[P], TeamGroupByOutputType[P]>
        }
      >
    >


  export type TeamSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    members?: boolean | Team$membersArgs<ExtArgs>
    Campaign?: boolean | Team$CampaignArgs<ExtArgs>
    SocialPlatformSetting?: boolean | Team$SocialPlatformSettingArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["team"]>

  export type TeamSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["team"]>

  export type TeamSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TeamOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "description" | "createdAt" | "updatedAt", ExtArgs["result"]["team"]>
  export type TeamInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    members?: boolean | Team$membersArgs<ExtArgs>
    Campaign?: boolean | Team$CampaignArgs<ExtArgs>
    SocialPlatformSetting?: boolean | Team$SocialPlatformSettingArgs<ExtArgs>
    _count?: boolean | TeamCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TeamIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type TeamIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $TeamPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Team"
    objects: {
      members: Prisma.$TeamMemberPayload<ExtArgs>[]
      Campaign: Prisma.$CampaignPayload<ExtArgs>[]
      SocialPlatformSetting: Prisma.$SocialPlatformSettingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      description: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["team"]>
    composites: {}
  }

  type TeamGetPayload<S extends boolean | null | undefined | TeamDefaultArgs> = $Result.GetResult<Prisma.$TeamPayload, S>

  type TeamCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamCountAggregateInputType | true
    }

  export interface TeamDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Team'], meta: { name: 'Team' } }
    /**
     * Find zero or one Team that matches the filter.
     * @param {TeamFindUniqueArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamFindUniqueArgs>(args: SelectSubset<T, TeamFindUniqueArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Team that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamFindUniqueOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamFindFirstArgs>(args?: SelectSubset<T, TeamFindFirstArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Team that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindFirstOrThrowArgs} args - Arguments to find a Team
     * @example
     * // Get one Team
     * const team = await prisma.team.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Teams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Teams
     * const teams = await prisma.team.findMany()
     * 
     * // Get first 10 Teams
     * const teams = await prisma.team.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const teamWithIdOnly = await prisma.team.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TeamFindManyArgs>(args?: SelectSubset<T, TeamFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Team.
     * @param {TeamCreateArgs} args - Arguments to create a Team.
     * @example
     * // Create one Team
     * const Team = await prisma.team.create({
     *   data: {
     *     // ... data to create a Team
     *   }
     * })
     * 
     */
    create<T extends TeamCreateArgs>(args: SelectSubset<T, TeamCreateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Teams.
     * @param {TeamCreateManyArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamCreateManyArgs>(args?: SelectSubset<T, TeamCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Teams and returns the data saved in the database.
     * @param {TeamCreateManyAndReturnArgs} args - Arguments to create many Teams.
     * @example
     * // Create many Teams
     * const team = await prisma.team.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Team.
     * @param {TeamDeleteArgs} args - Arguments to delete one Team.
     * @example
     * // Delete one Team
     * const Team = await prisma.team.delete({
     *   where: {
     *     // ... filter to delete one Team
     *   }
     * })
     * 
     */
    delete<T extends TeamDeleteArgs>(args: SelectSubset<T, TeamDeleteArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Team.
     * @param {TeamUpdateArgs} args - Arguments to update one Team.
     * @example
     * // Update one Team
     * const team = await prisma.team.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamUpdateArgs>(args: SelectSubset<T, TeamUpdateArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Teams.
     * @param {TeamDeleteManyArgs} args - Arguments to filter Teams to delete.
     * @example
     * // Delete a few Teams
     * const { count } = await prisma.team.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamDeleteManyArgs>(args?: SelectSubset<T, TeamDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamUpdateManyArgs>(args: SelectSubset<T, TeamUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Teams and returns the data updated in the database.
     * @param {TeamUpdateManyAndReturnArgs} args - Arguments to update many Teams.
     * @example
     * // Update many Teams
     * const team = await prisma.team.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Teams and only return the `id`
     * const teamWithIdOnly = await prisma.team.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Team.
     * @param {TeamUpsertArgs} args - Arguments to update or create a Team.
     * @example
     * // Update or create a Team
     * const team = await prisma.team.upsert({
     *   create: {
     *     // ... data to create a Team
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Team we want to update
     *   }
     * })
     */
    upsert<T extends TeamUpsertArgs>(args: SelectSubset<T, TeamUpsertArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Teams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamCountArgs} args - Arguments to filter Teams to count.
     * @example
     * // Count the number of Teams
     * const count = await prisma.team.count({
     *   where: {
     *     // ... the filter for the Teams we want to count
     *   }
     * })
    **/
    count<T extends TeamCountArgs>(
      args?: Subset<T, TeamCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamAggregateArgs>(args: Subset<T, TeamAggregateArgs>): Prisma.PrismaPromise<GetTeamAggregateType<T>>

    /**
     * Group by Team.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamGroupByArgs['orderBy'] }
        : { orderBy?: TeamGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Team model
   */
  readonly fields: TeamFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Team.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    members<T extends Team$membersArgs<ExtArgs> = {}>(args?: Subset<T, Team$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Campaign<T extends Team$CampaignArgs<ExtArgs> = {}>(args?: Subset<T, Team$CampaignArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CampaignPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    SocialPlatformSetting<T extends Team$SocialPlatformSettingArgs<ExtArgs> = {}>(args?: Subset<T, Team$SocialPlatformSettingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SocialPlatformSettingPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Team model
   */
  interface TeamFieldRefs {
    readonly id: FieldRef<"Team", 'String'>
    readonly name: FieldRef<"Team", 'String'>
    readonly description: FieldRef<"Team", 'String'>
    readonly createdAt: FieldRef<"Team", 'DateTime'>
    readonly updatedAt: FieldRef<"Team", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Team findUnique
   */
  export type TeamFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findUniqueOrThrow
   */
  export type TeamFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team findFirst
   */
  export type TeamFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findFirstOrThrow
   */
  export type TeamFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Team to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Teams.
     */
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team findMany
   */
  export type TeamFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter, which Teams to fetch.
     */
    where?: TeamWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Teams to fetch.
     */
    orderBy?: TeamOrderByWithRelationInput | TeamOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Teams.
     */
    cursor?: TeamWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Teams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Teams.
     */
    skip?: number
    distinct?: TeamScalarFieldEnum | TeamScalarFieldEnum[]
  }

  /**
   * Team create
   */
  export type TeamCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to create a Team.
     */
    data: XOR<TeamCreateInput, TeamUncheckedCreateInput>
  }

  /**
   * Team createMany
   */
  export type TeamCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team createManyAndReturn
   */
  export type TeamCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to create many Teams.
     */
    data: TeamCreateManyInput | TeamCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Team update
   */
  export type TeamUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The data needed to update a Team.
     */
    data: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
    /**
     * Choose, which Team to update.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team updateMany
   */
  export type TeamUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team updateManyAndReturn
   */
  export type TeamUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * The data used to update Teams.
     */
    data: XOR<TeamUpdateManyMutationInput, TeamUncheckedUpdateManyInput>
    /**
     * Filter which Teams to update
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to update.
     */
    limit?: number
  }

  /**
   * Team upsert
   */
  export type TeamUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * The filter to search for the Team to update in case it exists.
     */
    where: TeamWhereUniqueInput
    /**
     * In case the Team found by the `where` argument doesn't exist, create a new Team with this data.
     */
    create: XOR<TeamCreateInput, TeamUncheckedCreateInput>
    /**
     * In case the Team was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamUpdateInput, TeamUncheckedUpdateInput>
  }

  /**
   * Team delete
   */
  export type TeamDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
    /**
     * Filter which Team to delete.
     */
    where: TeamWhereUniqueInput
  }

  /**
   * Team deleteMany
   */
  export type TeamDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Teams to delete
     */
    where?: TeamWhereInput
    /**
     * Limit how many Teams to delete.
     */
    limit?: number
  }

  /**
   * Team.members
   */
  export type Team$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    cursor?: TeamMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * Team.Campaign
   */
  export type Team$CampaignArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Campaign
     */
    select?: CampaignSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Campaign
     */
    omit?: CampaignOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CampaignInclude<ExtArgs> | null
    where?: CampaignWhereInput
    orderBy?: CampaignOrderByWithRelationInput | CampaignOrderByWithRelationInput[]
    cursor?: CampaignWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CampaignScalarFieldEnum | CampaignScalarFieldEnum[]
  }

  /**
   * Team.SocialPlatformSetting
   */
  export type Team$SocialPlatformSettingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SocialPlatformSetting
     */
    select?: SocialPlatformSettingSelect<ExtArgs> | null
    /**
     * Omit specific fields from the SocialPlatformSetting
     */
    omit?: SocialPlatformSettingOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SocialPlatformSettingInclude<ExtArgs> | null
    where?: SocialPlatformSettingWhereInput
    orderBy?: SocialPlatformSettingOrderByWithRelationInput | SocialPlatformSettingOrderByWithRelationInput[]
    cursor?: SocialPlatformSettingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SocialPlatformSettingScalarFieldEnum | SocialPlatformSettingScalarFieldEnum[]
  }

  /**
   * Team without action
   */
  export type TeamDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Team
     */
    select?: TeamSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Team
     */
    omit?: TeamOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamInclude<ExtArgs> | null
  }


  /**
   * Model TeamMember
   */

  export type AggregateTeamMember = {
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  export type TeamMemberMinAggregateOutputType = {
    userId: string | null
    teamId: string | null
    role: $Enums.TeamRole | null
  }

  export type TeamMemberMaxAggregateOutputType = {
    userId: string | null
    teamId: string | null
    role: $Enums.TeamRole | null
  }

  export type TeamMemberCountAggregateOutputType = {
    userId: number
    teamId: number
    role: number
    _all: number
  }


  export type TeamMemberMinAggregateInputType = {
    userId?: true
    teamId?: true
    role?: true
  }

  export type TeamMemberMaxAggregateInputType = {
    userId?: true
    teamId?: true
    role?: true
  }

  export type TeamMemberCountAggregateInputType = {
    userId?: true
    teamId?: true
    role?: true
    _all?: true
  }

  export type TeamMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMember to aggregate.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TeamMembers
    **/
    _count?: true | TeamMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TeamMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TeamMemberMaxAggregateInputType
  }

  export type GetTeamMemberAggregateType<T extends TeamMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateTeamMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTeamMember[P]>
      : GetScalarType<T[P], AggregateTeamMember[P]>
  }




  export type TeamMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TeamMemberWhereInput
    orderBy?: TeamMemberOrderByWithAggregationInput | TeamMemberOrderByWithAggregationInput[]
    by: TeamMemberScalarFieldEnum[] | TeamMemberScalarFieldEnum
    having?: TeamMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TeamMemberCountAggregateInputType | true
    _min?: TeamMemberMinAggregateInputType
    _max?: TeamMemberMaxAggregateInputType
  }

  export type TeamMemberGroupByOutputType = {
    userId: string
    teamId: string
    role: $Enums.TeamRole
    _count: TeamMemberCountAggregateOutputType | null
    _min: TeamMemberMinAggregateOutputType | null
    _max: TeamMemberMaxAggregateOutputType | null
  }

  type GetTeamMemberGroupByPayload<T extends TeamMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TeamMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TeamMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
            : GetScalarType<T[P], TeamMemberGroupByOutputType[P]>
        }
      >
    >


  export type TeamMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    teamId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    teamId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    teamId?: boolean
    role?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["teamMember"]>

  export type TeamMemberSelectScalar = {
    userId?: boolean
    teamId?: boolean
    role?: boolean
  }

  export type TeamMemberOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "teamId" | "role", ExtArgs["result"]["teamMember"]>
  export type TeamMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type TeamMemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }
  export type TeamMemberIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    team?: boolean | TeamDefaultArgs<ExtArgs>
  }

  export type $TeamMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TeamMember"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      team: Prisma.$TeamPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      teamId: string
      role: $Enums.TeamRole
    }, ExtArgs["result"]["teamMember"]>
    composites: {}
  }

  type TeamMemberGetPayload<S extends boolean | null | undefined | TeamMemberDefaultArgs> = $Result.GetResult<Prisma.$TeamMemberPayload, S>

  type TeamMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TeamMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TeamMemberCountAggregateInputType | true
    }

  export interface TeamMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TeamMember'], meta: { name: 'TeamMember' } }
    /**
     * Find zero or one TeamMember that matches the filter.
     * @param {TeamMemberFindUniqueArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TeamMemberFindUniqueArgs>(args: SelectSubset<T, TeamMemberFindUniqueArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TeamMember that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TeamMemberFindUniqueOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TeamMemberFindUniqueOrThrowArgs>(args: SelectSubset<T, TeamMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TeamMemberFindFirstArgs>(args?: SelectSubset<T, TeamMemberFindFirstArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TeamMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindFirstOrThrowArgs} args - Arguments to find a TeamMember
     * @example
     * // Get one TeamMember
     * const teamMember = await prisma.teamMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TeamMemberFindFirstOrThrowArgs>(args?: SelectSubset<T, TeamMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TeamMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TeamMembers
     * const teamMembers = await prisma.teamMember.findMany()
     * 
     * // Get first 10 TeamMembers
     * const teamMembers = await prisma.teamMember.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const teamMemberWithUserIdOnly = await prisma.teamMember.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends TeamMemberFindManyArgs>(args?: SelectSubset<T, TeamMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TeamMember.
     * @param {TeamMemberCreateArgs} args - Arguments to create a TeamMember.
     * @example
     * // Create one TeamMember
     * const TeamMember = await prisma.teamMember.create({
     *   data: {
     *     // ... data to create a TeamMember
     *   }
     * })
     * 
     */
    create<T extends TeamMemberCreateArgs>(args: SelectSubset<T, TeamMemberCreateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TeamMembers.
     * @param {TeamMemberCreateManyArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TeamMemberCreateManyArgs>(args?: SelectSubset<T, TeamMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TeamMembers and returns the data saved in the database.
     * @param {TeamMemberCreateManyAndReturnArgs} args - Arguments to create many TeamMembers.
     * @example
     * // Create many TeamMembers
     * const teamMember = await prisma.teamMember.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TeamMembers and only return the `userId`
     * const teamMemberWithUserIdOnly = await prisma.teamMember.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TeamMemberCreateManyAndReturnArgs>(args?: SelectSubset<T, TeamMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TeamMember.
     * @param {TeamMemberDeleteArgs} args - Arguments to delete one TeamMember.
     * @example
     * // Delete one TeamMember
     * const TeamMember = await prisma.teamMember.delete({
     *   where: {
     *     // ... filter to delete one TeamMember
     *   }
     * })
     * 
     */
    delete<T extends TeamMemberDeleteArgs>(args: SelectSubset<T, TeamMemberDeleteArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TeamMember.
     * @param {TeamMemberUpdateArgs} args - Arguments to update one TeamMember.
     * @example
     * // Update one TeamMember
     * const teamMember = await prisma.teamMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TeamMemberUpdateArgs>(args: SelectSubset<T, TeamMemberUpdateArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TeamMembers.
     * @param {TeamMemberDeleteManyArgs} args - Arguments to filter TeamMembers to delete.
     * @example
     * // Delete a few TeamMembers
     * const { count } = await prisma.teamMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TeamMemberDeleteManyArgs>(args?: SelectSubset<T, TeamMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TeamMemberUpdateManyArgs>(args: SelectSubset<T, TeamMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TeamMembers and returns the data updated in the database.
     * @param {TeamMemberUpdateManyAndReturnArgs} args - Arguments to update many TeamMembers.
     * @example
     * // Update many TeamMembers
     * const teamMember = await prisma.teamMember.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TeamMembers and only return the `userId`
     * const teamMemberWithUserIdOnly = await prisma.teamMember.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TeamMemberUpdateManyAndReturnArgs>(args: SelectSubset<T, TeamMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TeamMember.
     * @param {TeamMemberUpsertArgs} args - Arguments to update or create a TeamMember.
     * @example
     * // Update or create a TeamMember
     * const teamMember = await prisma.teamMember.upsert({
     *   create: {
     *     // ... data to create a TeamMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TeamMember we want to update
     *   }
     * })
     */
    upsert<T extends TeamMemberUpsertArgs>(args: SelectSubset<T, TeamMemberUpsertArgs<ExtArgs>>): Prisma__TeamMemberClient<$Result.GetResult<Prisma.$TeamMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TeamMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberCountArgs} args - Arguments to filter TeamMembers to count.
     * @example
     * // Count the number of TeamMembers
     * const count = await prisma.teamMember.count({
     *   where: {
     *     // ... the filter for the TeamMembers we want to count
     *   }
     * })
    **/
    count<T extends TeamMemberCountArgs>(
      args?: Subset<T, TeamMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TeamMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TeamMemberAggregateArgs>(args: Subset<T, TeamMemberAggregateArgs>): Prisma.PrismaPromise<GetTeamMemberAggregateType<T>>

    /**
     * Group by TeamMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TeamMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TeamMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TeamMemberGroupByArgs['orderBy'] }
        : { orderBy?: TeamMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TeamMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTeamMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TeamMember model
   */
  readonly fields: TeamMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TeamMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TeamMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    team<T extends TeamDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TeamDefaultArgs<ExtArgs>>): Prisma__TeamClient<$Result.GetResult<Prisma.$TeamPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TeamMember model
   */
  interface TeamMemberFieldRefs {
    readonly userId: FieldRef<"TeamMember", 'String'>
    readonly teamId: FieldRef<"TeamMember", 'String'>
    readonly role: FieldRef<"TeamMember", 'TeamRole'>
  }
    

  // Custom InputTypes
  /**
   * TeamMember findUnique
   */
  export type TeamMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findUniqueOrThrow
   */
  export type TeamMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember findFirst
   */
  export type TeamMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findFirstOrThrow
   */
  export type TeamMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMember to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TeamMembers.
     */
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember findMany
   */
  export type TeamMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter, which TeamMembers to fetch.
     */
    where?: TeamMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TeamMembers to fetch.
     */
    orderBy?: TeamMemberOrderByWithRelationInput | TeamMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TeamMembers.
     */
    cursor?: TeamMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TeamMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TeamMembers.
     */
    skip?: number
    distinct?: TeamMemberScalarFieldEnum | TeamMemberScalarFieldEnum[]
  }

  /**
   * TeamMember create
   */
  export type TeamMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a TeamMember.
     */
    data: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
  }

  /**
   * TeamMember createMany
   */
  export type TeamMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TeamMember createManyAndReturn
   */
  export type TeamMemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to create many TeamMembers.
     */
    data: TeamMemberCreateManyInput | TeamMemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMember update
   */
  export type TeamMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a TeamMember.
     */
    data: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
    /**
     * Choose, which TeamMember to update.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember updateMany
   */
  export type TeamMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
  }

  /**
   * TeamMember updateManyAndReturn
   */
  export type TeamMemberUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * The data used to update TeamMembers.
     */
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyInput>
    /**
     * Filter which TeamMembers to update
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TeamMember upsert
   */
  export type TeamMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the TeamMember to update in case it exists.
     */
    where: TeamMemberWhereUniqueInput
    /**
     * In case the TeamMember found by the `where` argument doesn't exist, create a new TeamMember with this data.
     */
    create: XOR<TeamMemberCreateInput, TeamMemberUncheckedCreateInput>
    /**
     * In case the TeamMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TeamMemberUpdateInput, TeamMemberUncheckedUpdateInput>
  }

  /**
   * TeamMember delete
   */
  export type TeamMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
    /**
     * Filter which TeamMember to delete.
     */
    where: TeamMemberWhereUniqueInput
  }

  /**
   * TeamMember deleteMany
   */
  export type TeamMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TeamMembers to delete
     */
    where?: TeamMemberWhereInput
    /**
     * Limit how many TeamMembers to delete.
     */
    limit?: number
  }

  /**
   * TeamMember without action
   */
  export type TeamMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TeamMember
     */
    select?: TeamMemberSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TeamMember
     */
    omit?: TeamMemberOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TeamMemberInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    salt: 'salt',
    password: 'password',
    age: 'age',
    isVerified: 'isVerified',
    isActivated: 'isActivated',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CampaignScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    objective: 'objective',
    startDate: 'startDate',
    endDate: 'endDate',
    dailyBudget: 'dailyBudget',
    totalBudget: 'totalBudget',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdUserId: 'createdUserId',
    teamId: 'teamId'
  };

  export type CampaignScalarFieldEnum = (typeof CampaignScalarFieldEnum)[keyof typeof CampaignScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    campaignId: 'campaignId',
    description: 'description',
    content: 'content',
    status: 'status',
    postedTime: 'postedTime',
    platformIds: 'platformIds',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    imageIds: 'imageIds',
    publishedUrl: 'publishedUrl'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const PostSettingScalarFieldEnum: {
    postId: 'postId',
    socialSettingId: 'socialSettingId',
    model: 'model'
  };

  export type PostSettingScalarFieldEnum = (typeof PostSettingScalarFieldEnum)[keyof typeof PostSettingScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    aspectRatio: 'aspectRatio',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const UploadFileScalarFieldEnum: {
    id: 'id',
    url: 'url',
    type: 'type',
    originalName: 'originalName',
    source: 'source',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UploadFileScalarFieldEnum = (typeof UploadFileScalarFieldEnum)[keyof typeof UploadFileScalarFieldEnum]


  export const SocialPlatformSettingScalarFieldEnum: {
    id: 'id',
    platform: 'platform',
    pageId: 'pageId',
    pageName: 'pageName',
    pageLink: 'pageLink',
    accessToken: 'accessToken',
    status: 'status',
    expiresAt: 'expiresAt',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    teamId: 'teamId',
    createdBy: 'createdBy'
  };

  export type SocialPlatformSettingScalarFieldEnum = (typeof SocialPlatformSettingScalarFieldEnum)[keyof typeof SocialPlatformSettingScalarFieldEnum]


  export const UserPageSettingScalarFieldEnum: {
    userId: 'userId',
    socialSettingId: 'socialSettingId',
    role: 'role'
  };

  export type UserPageSettingScalarFieldEnum = (typeof UserPageSettingScalarFieldEnum)[keyof typeof UserPageSettingScalarFieldEnum]


  export const TeamScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TeamScalarFieldEnum = (typeof TeamScalarFieldEnum)[keyof typeof TeamScalarFieldEnum]


  export const TeamMemberScalarFieldEnum: {
    userId: 'userId',
    teamId: 'teamId',
    role: 'role'
  };

  export type TeamMemberScalarFieldEnum = (typeof TeamMemberScalarFieldEnum)[keyof typeof TeamMemberScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'CampaignObjective'
   */
  export type EnumCampaignObjectiveFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignObjective'>
    


  /**
   * Reference to a field of type 'CampaignObjective[]'
   */
  export type ListEnumCampaignObjectiveFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignObjective[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'CampaignStatus'
   */
  export type EnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus'>
    


  /**
   * Reference to a field of type 'CampaignStatus[]'
   */
  export type ListEnumCampaignStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'CampaignStatus[]'>
    


  /**
   * Reference to a field of type 'PostStatus'
   */
  export type EnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus'>
    


  /**
   * Reference to a field of type 'PostStatus[]'
   */
  export type ListEnumPostStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PostStatus[]'>
    


  /**
   * Reference to a field of type 'UploadFileType'
   */
  export type EnumUploadFileTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UploadFileType'>
    


  /**
   * Reference to a field of type 'UploadFileType[]'
   */
  export type ListEnumUploadFileTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UploadFileType[]'>
    


  /**
   * Reference to a field of type 'UploadSource'
   */
  export type EnumUploadSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UploadSource'>
    


  /**
   * Reference to a field of type 'UploadSource[]'
   */
  export type ListEnumUploadSourceFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UploadSource[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Platform'
   */
  export type EnumPlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Platform'>
    


  /**
   * Reference to a field of type 'Platform[]'
   */
  export type ListEnumPlatformFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Platform[]'>
    


  /**
   * Reference to a field of type 'SettingStatus'
   */
  export type EnumSettingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SettingStatus'>
    


  /**
   * Reference to a field of type 'SettingStatus[]'
   */
  export type ListEnumSettingStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SettingStatus[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'TeamRole'
   */
  export type EnumTeamRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeamRole'>
    


  /**
   * Reference to a field of type 'TeamRole[]'
   */
  export type ListEnumTeamRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'TeamRole[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    salt?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    age?: IntNullableFilter<"User"> | number | null
    isVerified?: BoolNullableFilter<"User"> | boolean | null
    isActivated?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    UserPageSetting?: UserPageSettingListRelationFilter
    TeamMember?: TeamMemberListRelationFilter
    Campaign?: CampaignListRelationFilter
    SocialPlatformSetting?: SocialPlatformSettingListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    salt?: SortOrderInput | SortOrder
    password?: SortOrder
    age?: SortOrderInput | SortOrder
    isVerified?: SortOrderInput | SortOrder
    isActivated?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    UserPageSetting?: UserPageSettingOrderByRelationAggregateInput
    TeamMember?: TeamMemberOrderByRelationAggregateInput
    Campaign?: CampaignOrderByRelationAggregateInput
    SocialPlatformSetting?: SocialPlatformSettingOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    salt?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    age?: IntNullableFilter<"User"> | number | null
    isVerified?: BoolNullableFilter<"User"> | boolean | null
    isActivated?: BoolNullableFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    UserPageSetting?: UserPageSettingListRelationFilter
    TeamMember?: TeamMemberListRelationFilter
    Campaign?: CampaignListRelationFilter
    SocialPlatformSetting?: SocialPlatformSettingListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    salt?: SortOrderInput | SortOrder
    password?: SortOrder
    age?: SortOrderInput | SortOrder
    isVerified?: SortOrderInput | SortOrder
    isActivated?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    salt?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    age?: IntNullableWithAggregatesFilter<"User"> | number | null
    isVerified?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    isActivated?: BoolNullableWithAggregatesFilter<"User"> | boolean | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
  }

  export type CampaignWhereInput = {
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    id?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    description?: StringNullableFilter<"Campaign"> | string | null
    objective?: EnumCampaignObjectiveFilter<"Campaign"> | $Enums.CampaignObjective
    startDate?: DateTimeFilter<"Campaign"> | Date | string
    endDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    dailyBudget?: FloatNullableFilter<"Campaign"> | number | null
    totalBudget?: FloatNullableFilter<"Campaign"> | number | null
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    createdUserId?: StringNullableFilter<"Campaign"> | string | null
    teamId?: StringFilter<"Campaign"> | string
    Post?: PostListRelationFilter
    createdUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type CampaignOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    dailyBudget?: SortOrderInput | SortOrder
    totalBudget?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    createdUserId?: SortOrderInput | SortOrder
    teamId?: SortOrder
    Post?: PostOrderByRelationAggregateInput
    createdUser?: UserOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type CampaignWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CampaignWhereInput | CampaignWhereInput[]
    OR?: CampaignWhereInput[]
    NOT?: CampaignWhereInput | CampaignWhereInput[]
    name?: StringFilter<"Campaign"> | string
    description?: StringNullableFilter<"Campaign"> | string | null
    objective?: EnumCampaignObjectiveFilter<"Campaign"> | $Enums.CampaignObjective
    startDate?: DateTimeFilter<"Campaign"> | Date | string
    endDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    dailyBudget?: FloatNullableFilter<"Campaign"> | number | null
    totalBudget?: FloatNullableFilter<"Campaign"> | number | null
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    createdUserId?: StringNullableFilter<"Campaign"> | string | null
    teamId?: StringFilter<"Campaign"> | string
    Post?: PostListRelationFilter
    createdUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "id">

  export type CampaignOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    dailyBudget?: SortOrderInput | SortOrder
    totalBudget?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    createdUserId?: SortOrderInput | SortOrder
    teamId?: SortOrder
    _count?: CampaignCountOrderByAggregateInput
    _avg?: CampaignAvgOrderByAggregateInput
    _max?: CampaignMaxOrderByAggregateInput
    _min?: CampaignMinOrderByAggregateInput
    _sum?: CampaignSumOrderByAggregateInput
  }

  export type CampaignScalarWhereWithAggregatesInput = {
    AND?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    OR?: CampaignScalarWhereWithAggregatesInput[]
    NOT?: CampaignScalarWhereWithAggregatesInput | CampaignScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Campaign"> | string
    name?: StringWithAggregatesFilter<"Campaign"> | string
    description?: StringNullableWithAggregatesFilter<"Campaign"> | string | null
    objective?: EnumCampaignObjectiveWithAggregatesFilter<"Campaign"> | $Enums.CampaignObjective
    startDate?: DateTimeWithAggregatesFilter<"Campaign"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Campaign"> | Date | string | null
    dailyBudget?: FloatNullableWithAggregatesFilter<"Campaign"> | number | null
    totalBudget?: FloatNullableWithAggregatesFilter<"Campaign"> | number | null
    status?: EnumCampaignStatusWithAggregatesFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeNullableWithAggregatesFilter<"Campaign"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Campaign"> | Date | string | null
    createdUserId?: StringNullableWithAggregatesFilter<"Campaign"> | string | null
    teamId?: StringWithAggregatesFilter<"Campaign"> | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    campaignId?: StringNullableFilter<"Post"> | string | null
    description?: StringFilter<"Post"> | string
    content?: StringNullableFilter<"Post"> | string | null
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    postedTime?: DateTimeFilter<"Post"> | Date | string
    platformIds?: StringNullableListFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    imageIds?: StringNullableListFilter<"Post">
    publishedUrl?: StringNullableFilter<"Post"> | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
    PostSetting?: PostSettingListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    campaignId?: SortOrderInput | SortOrder
    description?: SortOrder
    content?: SortOrderInput | SortOrder
    status?: SortOrder
    postedTime?: SortOrder
    platformIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageIds?: SortOrder
    publishedUrl?: SortOrderInput | SortOrder
    campaign?: CampaignOrderByWithRelationInput
    PostSetting?: PostSettingOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    campaignId?: StringNullableFilter<"Post"> | string | null
    description?: StringFilter<"Post"> | string
    content?: StringNullableFilter<"Post"> | string | null
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    postedTime?: DateTimeFilter<"Post"> | Date | string
    platformIds?: StringNullableListFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    imageIds?: StringNullableListFilter<"Post">
    publishedUrl?: StringNullableFilter<"Post"> | string | null
    campaign?: XOR<CampaignNullableScalarRelationFilter, CampaignWhereInput> | null
    PostSetting?: PostSettingListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    campaignId?: SortOrderInput | SortOrder
    description?: SortOrder
    content?: SortOrderInput | SortOrder
    status?: SortOrder
    postedTime?: SortOrder
    platformIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageIds?: SortOrder
    publishedUrl?: SortOrderInput | SortOrder
    _count?: PostCountOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    campaignId?: StringNullableWithAggregatesFilter<"Post"> | string | null
    description?: StringWithAggregatesFilter<"Post"> | string
    content?: StringNullableWithAggregatesFilter<"Post"> | string | null
    status?: EnumPostStatusWithAggregatesFilter<"Post"> | $Enums.PostStatus
    postedTime?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    platformIds?: StringNullableListFilter<"Post">
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    imageIds?: StringNullableListFilter<"Post">
    publishedUrl?: StringNullableWithAggregatesFilter<"Post"> | string | null
  }

  export type PostSettingWhereInput = {
    AND?: PostSettingWhereInput | PostSettingWhereInput[]
    OR?: PostSettingWhereInput[]
    NOT?: PostSettingWhereInput | PostSettingWhereInput[]
    postId?: StringFilter<"PostSetting"> | string
    socialSettingId?: StringFilter<"PostSetting"> | string
    model?: StringNullableFilter<"PostSetting"> | string | null
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    socialSetting?: XOR<SocialPlatformSettingScalarRelationFilter, SocialPlatformSettingWhereInput>
  }

  export type PostSettingOrderByWithRelationInput = {
    postId?: SortOrder
    socialSettingId?: SortOrder
    model?: SortOrderInput | SortOrder
    post?: PostOrderByWithRelationInput
    socialSetting?: SocialPlatformSettingOrderByWithRelationInput
  }

  export type PostSettingWhereUniqueInput = Prisma.AtLeast<{
    postId_socialSettingId?: PostSettingPostIdSocialSettingIdCompoundUniqueInput
    AND?: PostSettingWhereInput | PostSettingWhereInput[]
    OR?: PostSettingWhereInput[]
    NOT?: PostSettingWhereInput | PostSettingWhereInput[]
    postId?: StringFilter<"PostSetting"> | string
    socialSettingId?: StringFilter<"PostSetting"> | string
    model?: StringNullableFilter<"PostSetting"> | string | null
    post?: XOR<PostScalarRelationFilter, PostWhereInput>
    socialSetting?: XOR<SocialPlatformSettingScalarRelationFilter, SocialPlatformSettingWhereInput>
  }, "postId_socialSettingId">

  export type PostSettingOrderByWithAggregationInput = {
    postId?: SortOrder
    socialSettingId?: SortOrder
    model?: SortOrderInput | SortOrder
    _count?: PostSettingCountOrderByAggregateInput
    _max?: PostSettingMaxOrderByAggregateInput
    _min?: PostSettingMinOrderByAggregateInput
  }

  export type PostSettingScalarWhereWithAggregatesInput = {
    AND?: PostSettingScalarWhereWithAggregatesInput | PostSettingScalarWhereWithAggregatesInput[]
    OR?: PostSettingScalarWhereWithAggregatesInput[]
    NOT?: PostSettingScalarWhereWithAggregatesInput | PostSettingScalarWhereWithAggregatesInput[]
    postId?: StringWithAggregatesFilter<"PostSetting"> | string
    socialSettingId?: StringWithAggregatesFilter<"PostSetting"> | string
    model?: StringNullableWithAggregatesFilter<"PostSetting"> | string | null
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    aspectRatio?: StringNullableFilter<"Image"> | string | null
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    aspectRatio?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    url?: StringFilter<"Image"> | string
    aspectRatio?: StringNullableFilter<"Image"> | string | null
    createdAt?: DateTimeFilter<"Image"> | Date | string
    updatedAt?: DateTimeFilter<"Image"> | Date | string
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    aspectRatio?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    url?: StringWithAggregatesFilter<"Image"> | string
    aspectRatio?: StringNullableWithAggregatesFilter<"Image"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Image"> | Date | string
  }

  export type UploadFileWhereInput = {
    AND?: UploadFileWhereInput | UploadFileWhereInput[]
    OR?: UploadFileWhereInput[]
    NOT?: UploadFileWhereInput | UploadFileWhereInput[]
    id?: StringFilter<"UploadFile"> | string
    url?: StringFilter<"UploadFile"> | string
    type?: EnumUploadFileTypeFilter<"UploadFile"> | $Enums.UploadFileType
    originalName?: StringNullableFilter<"UploadFile"> | string | null
    source?: EnumUploadSourceNullableFilter<"UploadFile"> | $Enums.UploadSource | null
    metadata?: JsonNullableFilter<"UploadFile">
    createdAt?: DateTimeFilter<"UploadFile"> | Date | string
    updatedAt?: DateTimeFilter<"UploadFile"> | Date | string
  }

  export type UploadFileOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    originalName?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UploadFileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UploadFileWhereInput | UploadFileWhereInput[]
    OR?: UploadFileWhereInput[]
    NOT?: UploadFileWhereInput | UploadFileWhereInput[]
    url?: StringFilter<"UploadFile"> | string
    type?: EnumUploadFileTypeFilter<"UploadFile"> | $Enums.UploadFileType
    originalName?: StringNullableFilter<"UploadFile"> | string | null
    source?: EnumUploadSourceNullableFilter<"UploadFile"> | $Enums.UploadSource | null
    metadata?: JsonNullableFilter<"UploadFile">
    createdAt?: DateTimeFilter<"UploadFile"> | Date | string
    updatedAt?: DateTimeFilter<"UploadFile"> | Date | string
  }, "id">

  export type UploadFileOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    originalName?: SortOrderInput | SortOrder
    source?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UploadFileCountOrderByAggregateInput
    _max?: UploadFileMaxOrderByAggregateInput
    _min?: UploadFileMinOrderByAggregateInput
  }

  export type UploadFileScalarWhereWithAggregatesInput = {
    AND?: UploadFileScalarWhereWithAggregatesInput | UploadFileScalarWhereWithAggregatesInput[]
    OR?: UploadFileScalarWhereWithAggregatesInput[]
    NOT?: UploadFileScalarWhereWithAggregatesInput | UploadFileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UploadFile"> | string
    url?: StringWithAggregatesFilter<"UploadFile"> | string
    type?: EnumUploadFileTypeWithAggregatesFilter<"UploadFile"> | $Enums.UploadFileType
    originalName?: StringNullableWithAggregatesFilter<"UploadFile"> | string | null
    source?: EnumUploadSourceNullableWithAggregatesFilter<"UploadFile"> | $Enums.UploadSource | null
    metadata?: JsonNullableWithAggregatesFilter<"UploadFile">
    createdAt?: DateTimeWithAggregatesFilter<"UploadFile"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UploadFile"> | Date | string
  }

  export type SocialPlatformSettingWhereInput = {
    AND?: SocialPlatformSettingWhereInput | SocialPlatformSettingWhereInput[]
    OR?: SocialPlatformSettingWhereInput[]
    NOT?: SocialPlatformSettingWhereInput | SocialPlatformSettingWhereInput[]
    id?: StringFilter<"SocialPlatformSetting"> | string
    platform?: EnumPlatformFilter<"SocialPlatformSetting"> | $Enums.Platform
    pageId?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    pageName?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    pageLink?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    accessToken?: StringFilter<"SocialPlatformSetting"> | string
    status?: EnumSettingStatusFilter<"SocialPlatformSetting"> | $Enums.SettingStatus
    expiresAt?: DateTimeNullableFilter<"SocialPlatformSetting"> | Date | string | null
    metadata?: JsonNullableFilter<"SocialPlatformSetting">
    createdAt?: DateTimeFilter<"SocialPlatformSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SocialPlatformSetting"> | Date | string
    teamId?: StringFilter<"SocialPlatformSetting"> | string
    createdBy?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    PostSetting?: PostSettingListRelationFilter
    UserPageSetting?: UserPageSettingListRelationFilter
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    createdUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type SocialPlatformSettingOrderByWithRelationInput = {
    id?: SortOrder
    platform?: SortOrder
    pageId?: SortOrderInput | SortOrder
    pageName?: SortOrderInput | SortOrder
    pageLink?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    PostSetting?: PostSettingOrderByRelationAggregateInput
    UserPageSetting?: UserPageSettingOrderByRelationAggregateInput
    team?: TeamOrderByWithRelationInput
    createdUser?: UserOrderByWithRelationInput
  }

  export type SocialPlatformSettingWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: SocialPlatformSettingWhereInput | SocialPlatformSettingWhereInput[]
    OR?: SocialPlatformSettingWhereInput[]
    NOT?: SocialPlatformSettingWhereInput | SocialPlatformSettingWhereInput[]
    platform?: EnumPlatformFilter<"SocialPlatformSetting"> | $Enums.Platform
    pageId?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    pageName?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    pageLink?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    accessToken?: StringFilter<"SocialPlatformSetting"> | string
    status?: EnumSettingStatusFilter<"SocialPlatformSetting"> | $Enums.SettingStatus
    expiresAt?: DateTimeNullableFilter<"SocialPlatformSetting"> | Date | string | null
    metadata?: JsonNullableFilter<"SocialPlatformSetting">
    createdAt?: DateTimeFilter<"SocialPlatformSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SocialPlatformSetting"> | Date | string
    teamId?: StringFilter<"SocialPlatformSetting"> | string
    createdBy?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    PostSetting?: PostSettingListRelationFilter
    UserPageSetting?: UserPageSettingListRelationFilter
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
    createdUser?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type SocialPlatformSettingOrderByWithAggregationInput = {
    id?: SortOrder
    platform?: SortOrder
    pageId?: SortOrderInput | SortOrder
    pageName?: SortOrderInput | SortOrder
    pageLink?: SortOrderInput | SortOrder
    accessToken?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    createdBy?: SortOrderInput | SortOrder
    _count?: SocialPlatformSettingCountOrderByAggregateInput
    _max?: SocialPlatformSettingMaxOrderByAggregateInput
    _min?: SocialPlatformSettingMinOrderByAggregateInput
  }

  export type SocialPlatformSettingScalarWhereWithAggregatesInput = {
    AND?: SocialPlatformSettingScalarWhereWithAggregatesInput | SocialPlatformSettingScalarWhereWithAggregatesInput[]
    OR?: SocialPlatformSettingScalarWhereWithAggregatesInput[]
    NOT?: SocialPlatformSettingScalarWhereWithAggregatesInput | SocialPlatformSettingScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"SocialPlatformSetting"> | string
    platform?: EnumPlatformWithAggregatesFilter<"SocialPlatformSetting"> | $Enums.Platform
    pageId?: StringNullableWithAggregatesFilter<"SocialPlatformSetting"> | string | null
    pageName?: StringNullableWithAggregatesFilter<"SocialPlatformSetting"> | string | null
    pageLink?: StringNullableWithAggregatesFilter<"SocialPlatformSetting"> | string | null
    accessToken?: StringWithAggregatesFilter<"SocialPlatformSetting"> | string
    status?: EnumSettingStatusWithAggregatesFilter<"SocialPlatformSetting"> | $Enums.SettingStatus
    expiresAt?: DateTimeNullableWithAggregatesFilter<"SocialPlatformSetting"> | Date | string | null
    metadata?: JsonNullableWithAggregatesFilter<"SocialPlatformSetting">
    createdAt?: DateTimeWithAggregatesFilter<"SocialPlatformSetting"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"SocialPlatformSetting"> | Date | string
    teamId?: StringWithAggregatesFilter<"SocialPlatformSetting"> | string
    createdBy?: StringNullableWithAggregatesFilter<"SocialPlatformSetting"> | string | null
  }

  export type UserPageSettingWhereInput = {
    AND?: UserPageSettingWhereInput | UserPageSettingWhereInput[]
    OR?: UserPageSettingWhereInput[]
    NOT?: UserPageSettingWhereInput | UserPageSettingWhereInput[]
    userId?: StringFilter<"UserPageSetting"> | string
    socialSettingId?: StringFilter<"UserPageSetting"> | string
    role?: EnumUserRoleFilter<"UserPageSetting"> | $Enums.UserRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    socialSetting?: XOR<SocialPlatformSettingScalarRelationFilter, SocialPlatformSettingWhereInput>
  }

  export type UserPageSettingOrderByWithRelationInput = {
    userId?: SortOrder
    socialSettingId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    socialSetting?: SocialPlatformSettingOrderByWithRelationInput
  }

  export type UserPageSettingWhereUniqueInput = Prisma.AtLeast<{
    userId_socialSettingId?: UserPageSettingUserIdSocialSettingIdCompoundUniqueInput
    AND?: UserPageSettingWhereInput | UserPageSettingWhereInput[]
    OR?: UserPageSettingWhereInput[]
    NOT?: UserPageSettingWhereInput | UserPageSettingWhereInput[]
    userId?: StringFilter<"UserPageSetting"> | string
    socialSettingId?: StringFilter<"UserPageSetting"> | string
    role?: EnumUserRoleFilter<"UserPageSetting"> | $Enums.UserRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    socialSetting?: XOR<SocialPlatformSettingScalarRelationFilter, SocialPlatformSettingWhereInput>
  }, "userId_socialSettingId">

  export type UserPageSettingOrderByWithAggregationInput = {
    userId?: SortOrder
    socialSettingId?: SortOrder
    role?: SortOrder
    _count?: UserPageSettingCountOrderByAggregateInput
    _max?: UserPageSettingMaxOrderByAggregateInput
    _min?: UserPageSettingMinOrderByAggregateInput
  }

  export type UserPageSettingScalarWhereWithAggregatesInput = {
    AND?: UserPageSettingScalarWhereWithAggregatesInput | UserPageSettingScalarWhereWithAggregatesInput[]
    OR?: UserPageSettingScalarWhereWithAggregatesInput[]
    NOT?: UserPageSettingScalarWhereWithAggregatesInput | UserPageSettingScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserPageSetting"> | string
    socialSettingId?: StringWithAggregatesFilter<"UserPageSetting"> | string
    role?: EnumUserRoleWithAggregatesFilter<"UserPageSetting"> | $Enums.UserRole
  }

  export type TeamWhereInput = {
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    id?: StringFilter<"Team"> | string
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    members?: TeamMemberListRelationFilter
    Campaign?: CampaignListRelationFilter
    SocialPlatformSetting?: SocialPlatformSettingListRelationFilter
  }

  export type TeamOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    members?: TeamMemberOrderByRelationAggregateInput
    Campaign?: CampaignOrderByRelationAggregateInput
    SocialPlatformSetting?: SocialPlatformSettingOrderByRelationAggregateInput
  }

  export type TeamWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TeamWhereInput | TeamWhereInput[]
    OR?: TeamWhereInput[]
    NOT?: TeamWhereInput | TeamWhereInput[]
    name?: StringFilter<"Team"> | string
    description?: StringNullableFilter<"Team"> | string | null
    createdAt?: DateTimeFilter<"Team"> | Date | string
    updatedAt?: DateTimeFilter<"Team"> | Date | string
    members?: TeamMemberListRelationFilter
    Campaign?: CampaignListRelationFilter
    SocialPlatformSetting?: SocialPlatformSettingListRelationFilter
  }, "id">

  export type TeamOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TeamCountOrderByAggregateInput
    _max?: TeamMaxOrderByAggregateInput
    _min?: TeamMinOrderByAggregateInput
  }

  export type TeamScalarWhereWithAggregatesInput = {
    AND?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    OR?: TeamScalarWhereWithAggregatesInput[]
    NOT?: TeamScalarWhereWithAggregatesInput | TeamScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Team"> | string
    name?: StringWithAggregatesFilter<"Team"> | string
    description?: StringNullableWithAggregatesFilter<"Team"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Team"> | Date | string
  }

  export type TeamMemberWhereInput = {
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    userId?: StringFilter<"TeamMember"> | string
    teamId?: StringFilter<"TeamMember"> | string
    role?: EnumTeamRoleFilter<"TeamMember"> | $Enums.TeamRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }

  export type TeamMemberOrderByWithRelationInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
    user?: UserOrderByWithRelationInput
    team?: TeamOrderByWithRelationInput
  }

  export type TeamMemberWhereUniqueInput = Prisma.AtLeast<{
    userId_teamId?: TeamMemberUserIdTeamIdCompoundUniqueInput
    AND?: TeamMemberWhereInput | TeamMemberWhereInput[]
    OR?: TeamMemberWhereInput[]
    NOT?: TeamMemberWhereInput | TeamMemberWhereInput[]
    userId?: StringFilter<"TeamMember"> | string
    teamId?: StringFilter<"TeamMember"> | string
    role?: EnumTeamRoleFilter<"TeamMember"> | $Enums.TeamRole
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    team?: XOR<TeamScalarRelationFilter, TeamWhereInput>
  }, "userId_teamId">

  export type TeamMemberOrderByWithAggregationInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
    _count?: TeamMemberCountOrderByAggregateInput
    _max?: TeamMemberMaxOrderByAggregateInput
    _min?: TeamMemberMinOrderByAggregateInput
  }

  export type TeamMemberScalarWhereWithAggregatesInput = {
    AND?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    OR?: TeamMemberScalarWhereWithAggregatesInput[]
    NOT?: TeamMemberScalarWhereWithAggregatesInput | TeamMemberScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"TeamMember"> | string
    teamId?: StringWithAggregatesFilter<"TeamMember"> | string
    role?: EnumTeamRoleWithAggregatesFilter<"TeamMember"> | $Enums.TeamRole
  }

  export type UserCreateInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Campaign?: CampaignCreateNestedManyWithoutCreatedUserInput
    SocialPlatformSetting?: SocialPlatformSettingCreateNestedManyWithoutCreatedUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutCreatedUserInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedCreateNestedManyWithoutCreatedUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUpdateManyWithoutCreatedUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUpdateManyWithoutCreatedUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutCreatedUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedUpdateManyWithoutCreatedUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CampaignCreateInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Post?: PostCreateNestedManyWithoutCampaignInput
    createdUser?: UserCreateNestedOneWithoutCampaignInput
    team: TeamCreateNestedOneWithoutCampaignInput
  }

  export type CampaignUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdUserId?: string | null
    teamId: string
    Post?: PostUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Post?: PostUpdateManyWithoutCampaignNestedInput
    createdUser?: UserUpdateOneWithoutCampaignNestedInput
    team?: TeamUpdateOneRequiredWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdUserId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
    Post?: PostUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdUserId?: string | null
    teamId: string
  }

  export type CampaignUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type CampaignUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdUserId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateInput = {
    id?: string
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
    campaign?: CampaignCreateNestedOneWithoutPostInput
    PostSetting?: PostSettingCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    campaignId?: string | null
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
    PostSetting?: PostSettingUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: CampaignUpdateOneWithoutPostNestedInput
    PostSetting?: PostSettingUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    PostSetting?: PostSettingUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: string
    campaignId?: string | null
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostSettingCreateInput = {
    model?: string | null
    post: PostCreateNestedOneWithoutPostSettingInput
    socialSetting: SocialPlatformSettingCreateNestedOneWithoutPostSettingInput
  }

  export type PostSettingUncheckedCreateInput = {
    postId: string
    socialSettingId: string
    model?: string | null
  }

  export type PostSettingUpdateInput = {
    model?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateOneRequiredWithoutPostSettingNestedInput
    socialSetting?: SocialPlatformSettingUpdateOneRequiredWithoutPostSettingNestedInput
  }

  export type PostSettingUncheckedUpdateInput = {
    postId?: StringFieldUpdateOperationsInput | string
    socialSettingId?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostSettingCreateManyInput = {
    postId: string
    socialSettingId: string
    model?: string | null
  }

  export type PostSettingUpdateManyMutationInput = {
    model?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostSettingUncheckedUpdateManyInput = {
    postId?: StringFieldUpdateOperationsInput | string
    socialSettingId?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImageCreateInput = {
    id?: string
    url: string
    aspectRatio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    url: string
    aspectRatio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    aspectRatio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    aspectRatio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageCreateManyInput = {
    id?: string
    url: string
    aspectRatio?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    aspectRatio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    aspectRatio?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadFileCreateInput = {
    id?: string
    url: string
    type: $Enums.UploadFileType
    originalName?: string | null
    source?: $Enums.UploadSource | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadFileUncheckedCreateInput = {
    id?: string
    url: string
    type: $Enums.UploadFileType
    originalName?: string | null
    source?: $Enums.UploadSource | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadFileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumUploadFileTypeFieldUpdateOperationsInput | $Enums.UploadFileType
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableEnumUploadSourceFieldUpdateOperationsInput | $Enums.UploadSource | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadFileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumUploadFileTypeFieldUpdateOperationsInput | $Enums.UploadFileType
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableEnumUploadSourceFieldUpdateOperationsInput | $Enums.UploadSource | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadFileCreateManyInput = {
    id?: string
    url: string
    type: $Enums.UploadFileType
    originalName?: string | null
    source?: $Enums.UploadSource | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UploadFileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumUploadFileTypeFieldUpdateOperationsInput | $Enums.UploadFileType
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableEnumUploadSourceFieldUpdateOperationsInput | $Enums.UploadSource | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UploadFileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    type?: EnumUploadFileTypeFieldUpdateOperationsInput | $Enums.UploadFileType
    originalName?: NullableStringFieldUpdateOperationsInput | string | null
    source?: NullableEnumUploadSourceFieldUpdateOperationsInput | $Enums.UploadSource | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialPlatformSettingCreateInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    PostSetting?: PostSettingCreateNestedManyWithoutSocialSettingInput
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutSocialSettingInput
    team: TeamCreateNestedOneWithoutSocialPlatformSettingInput
    createdUser?: UserCreateNestedOneWithoutSocialPlatformSettingInput
  }

  export type SocialPlatformSettingUncheckedCreateInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    createdBy?: string | null
    PostSetting?: PostSettingUncheckedCreateNestedManyWithoutSocialSettingInput
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutSocialSettingInput
  }

  export type SocialPlatformSettingUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PostSetting?: PostSettingUpdateManyWithoutSocialSettingNestedInput
    UserPageSetting?: UserPageSettingUpdateManyWithoutSocialSettingNestedInput
    team?: TeamUpdateOneRequiredWithoutSocialPlatformSettingNestedInput
    createdUser?: UserUpdateOneWithoutSocialPlatformSettingNestedInput
  }

  export type SocialPlatformSettingUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    PostSetting?: PostSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
  }

  export type SocialPlatformSettingCreateManyInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    createdBy?: string | null
  }

  export type SocialPlatformSettingUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SocialPlatformSettingUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPageSettingCreateInput = {
    role?: $Enums.UserRole
    user: UserCreateNestedOneWithoutUserPageSettingInput
    socialSetting: SocialPlatformSettingCreateNestedOneWithoutUserPageSettingInput
  }

  export type UserPageSettingUncheckedCreateInput = {
    userId: string
    socialSettingId: string
    role?: $Enums.UserRole
  }

  export type UserPageSettingUpdateInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    user?: UserUpdateOneRequiredWithoutUserPageSettingNestedInput
    socialSetting?: SocialPlatformSettingUpdateOneRequiredWithoutUserPageSettingNestedInput
  }

  export type UserPageSettingUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    socialSettingId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type UserPageSettingCreateManyInput = {
    userId: string
    socialSettingId: string
    role?: $Enums.UserRole
  }

  export type UserPageSettingUpdateManyMutationInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type UserPageSettingUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    socialSettingId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type TeamCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    Campaign?: CampaignCreateNestedManyWithoutTeamInput
    SocialPlatformSetting?: SocialPlatformSettingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutTeamInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    Campaign?: CampaignUpdateManyWithoutTeamNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutTeamNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type TeamCreateManyInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TeamUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TeamMemberCreateInput = {
    role?: $Enums.TeamRole
    user: UserCreateNestedOneWithoutTeamMemberInput
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type TeamMemberUncheckedCreateInput = {
    userId: string
    teamId: string
    role?: $Enums.TeamRole
  }

  export type TeamMemberUpdateInput = {
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
    user?: UserUpdateOneRequiredWithoutTeamMemberNestedInput
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  }

  export type TeamMemberCreateManyInput = {
    userId: string
    teamId: string
    role?: $Enums.TeamRole
  }

  export type TeamMemberUpdateManyMutationInput = {
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  }

  export type TeamMemberUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    teamId?: StringFieldUpdateOperationsInput | string
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type UserPageSettingListRelationFilter = {
    every?: UserPageSettingWhereInput
    some?: UserPageSettingWhereInput
    none?: UserPageSettingWhereInput
  }

  export type TeamMemberListRelationFilter = {
    every?: TeamMemberWhereInput
    some?: TeamMemberWhereInput
    none?: TeamMemberWhereInput
  }

  export type CampaignListRelationFilter = {
    every?: CampaignWhereInput
    some?: CampaignWhereInput
    none?: CampaignWhereInput
  }

  export type SocialPlatformSettingListRelationFilter = {
    every?: SocialPlatformSettingWhereInput
    some?: SocialPlatformSettingWhereInput
    none?: SocialPlatformSettingWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type UserPageSettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TeamMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SocialPlatformSettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    salt?: SortOrder
    password?: SortOrder
    age?: SortOrder
    isVerified?: SortOrder
    isActivated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    age?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    salt?: SortOrder
    password?: SortOrder
    age?: SortOrder
    isVerified?: SortOrder
    isActivated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    salt?: SortOrder
    password?: SortOrder
    age?: SortOrder
    isVerified?: SortOrder
    isActivated?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    age?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type EnumCampaignObjectiveFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignObjective | EnumCampaignObjectiveFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignObjectiveFilter<$PrismaModel> | $Enums.CampaignObjective
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type EnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type TeamScalarRelationFilter = {
    is?: TeamWhereInput
    isNot?: TeamWhereInput
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CampaignCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dailyBudget?: SortOrder
    totalBudget?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdUserId?: SortOrder
    teamId?: SortOrder
  }

  export type CampaignAvgOrderByAggregateInput = {
    dailyBudget?: SortOrder
    totalBudget?: SortOrder
  }

  export type CampaignMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dailyBudget?: SortOrder
    totalBudget?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdUserId?: SortOrder
    teamId?: SortOrder
  }

  export type CampaignMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    objective?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    dailyBudget?: SortOrder
    totalBudget?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdUserId?: SortOrder
    teamId?: SortOrder
  }

  export type CampaignSumOrderByAggregateInput = {
    dailyBudget?: SortOrder
    totalBudget?: SortOrder
  }

  export type EnumCampaignObjectiveWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignObjective | EnumCampaignObjectiveFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignObjectiveWithAggregatesFilter<$PrismaModel> | $Enums.CampaignObjective
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignObjectiveFilter<$PrismaModel>
    _max?: NestedEnumCampaignObjectiveFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type EnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }

  export type EnumPostStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusFilter<$PrismaModel> | $Enums.PostStatus
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type CampaignNullableScalarRelationFilter = {
    is?: CampaignWhereInput | null
    isNot?: CampaignWhereInput | null
  }

  export type PostSettingListRelationFilter = {
    every?: PostSettingWhereInput
    some?: PostSettingWhereInput
    none?: PostSettingWhereInput
  }

  export type PostSettingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    status?: SortOrder
    postedTime?: SortOrder
    platformIds?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    imageIds?: SortOrder
    publishedUrl?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    status?: SortOrder
    postedTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedUrl?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    campaignId?: SortOrder
    description?: SortOrder
    content?: SortOrder
    status?: SortOrder
    postedTime?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    publishedUrl?: SortOrder
  }

  export type EnumPostStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostStatusFilter<$PrismaModel>
    _max?: NestedEnumPostStatusFilter<$PrismaModel>
  }

  export type PostScalarRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type SocialPlatformSettingScalarRelationFilter = {
    is?: SocialPlatformSettingWhereInput
    isNot?: SocialPlatformSettingWhereInput
  }

  export type PostSettingPostIdSocialSettingIdCompoundUniqueInput = {
    postId: string
    socialSettingId: string
  }

  export type PostSettingCountOrderByAggregateInput = {
    postId?: SortOrder
    socialSettingId?: SortOrder
    model?: SortOrder
  }

  export type PostSettingMaxOrderByAggregateInput = {
    postId?: SortOrder
    socialSettingId?: SortOrder
    model?: SortOrder
  }

  export type PostSettingMinOrderByAggregateInput = {
    postId?: SortOrder
    socialSettingId?: SortOrder
    model?: SortOrder
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    aspectRatio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    aspectRatio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    aspectRatio?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUploadFileTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadFileType | EnumUploadFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUploadFileTypeFilter<$PrismaModel> | $Enums.UploadFileType
  }

  export type EnumUploadSourceNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadSource | EnumUploadSourceFieldRefInput<$PrismaModel> | null
    in?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUploadSourceNullableFilter<$PrismaModel> | $Enums.UploadSource | null
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UploadFileCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    originalName?: SortOrder
    source?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UploadFileMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    originalName?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UploadFileMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    type?: SortOrder
    originalName?: SortOrder
    source?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumUploadFileTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadFileType | EnumUploadFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUploadFileTypeWithAggregatesFilter<$PrismaModel> | $Enums.UploadFileType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUploadFileTypeFilter<$PrismaModel>
    _max?: NestedEnumUploadFileTypeFilter<$PrismaModel>
  }

  export type EnumUploadSourceNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadSource | EnumUploadSourceFieldRefInput<$PrismaModel> | null
    in?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUploadSourceNullableWithAggregatesFilter<$PrismaModel> | $Enums.UploadSource | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUploadSourceNullableFilter<$PrismaModel>
    _max?: NestedEnumUploadSourceNullableFilter<$PrismaModel>
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type EnumPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformFilter<$PrismaModel> | $Enums.Platform
  }

  export type EnumSettingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SettingStatus | EnumSettingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSettingStatusFilter<$PrismaModel> | $Enums.SettingStatus
  }

  export type SocialPlatformSettingCountOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
    pageId?: SortOrder
    pageName?: SortOrder
    pageLink?: SortOrder
    accessToken?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    createdBy?: SortOrder
  }

  export type SocialPlatformSettingMaxOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
    pageId?: SortOrder
    pageName?: SortOrder
    pageLink?: SortOrder
    accessToken?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    createdBy?: SortOrder
  }

  export type SocialPlatformSettingMinOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
    pageId?: SortOrder
    pageName?: SortOrder
    pageLink?: SortOrder
    accessToken?: SortOrder
    status?: SortOrder
    expiresAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    teamId?: SortOrder
    createdBy?: SortOrder
  }

  export type EnumPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformWithAggregatesFilter<$PrismaModel> | $Enums.Platform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlatformFilter<$PrismaModel>
    _max?: NestedEnumPlatformFilter<$PrismaModel>
  }

  export type EnumSettingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SettingStatus | EnumSettingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSettingStatusWithAggregatesFilter<$PrismaModel> | $Enums.SettingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSettingStatusFilter<$PrismaModel>
    _max?: NestedEnumSettingStatusFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserPageSettingUserIdSocialSettingIdCompoundUniqueInput = {
    userId: string
    socialSettingId: string
  }

  export type UserPageSettingCountOrderByAggregateInput = {
    userId?: SortOrder
    socialSettingId?: SortOrder
    role?: SortOrder
  }

  export type UserPageSettingMaxOrderByAggregateInput = {
    userId?: SortOrder
    socialSettingId?: SortOrder
    role?: SortOrder
  }

  export type UserPageSettingMinOrderByAggregateInput = {
    userId?: SortOrder
    socialSettingId?: SortOrder
    role?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type TeamCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TeamMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type EnumTeamRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamRole | EnumTeamRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamRoleFilter<$PrismaModel> | $Enums.TeamRole
  }

  export type TeamMemberUserIdTeamIdCompoundUniqueInput = {
    userId: string
    teamId: string
  }

  export type TeamMemberCountOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
  }

  export type TeamMemberMaxOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
  }

  export type TeamMemberMinOrderByAggregateInput = {
    userId?: SortOrder
    teamId?: SortOrder
    role?: SortOrder
  }

  export type EnumTeamRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamRole | EnumTeamRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamRoleWithAggregatesFilter<$PrismaModel> | $Enums.TeamRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamRoleFilter<$PrismaModel>
    _max?: NestedEnumTeamRoleFilter<$PrismaModel>
  }

  export type UserPageSettingCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPageSettingCreateWithoutUserInput, UserPageSettingUncheckedCreateWithoutUserInput> | UserPageSettingCreateWithoutUserInput[] | UserPageSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutUserInput | UserPageSettingCreateOrConnectWithoutUserInput[]
    createMany?: UserPageSettingCreateManyUserInputEnvelope
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
  }

  export type TeamMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutCreatedUserInput = {
    create?: XOR<CampaignCreateWithoutCreatedUserInput, CampaignUncheckedCreateWithoutCreatedUserInput> | CampaignCreateWithoutCreatedUserInput[] | CampaignUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutCreatedUserInput | CampaignCreateOrConnectWithoutCreatedUserInput[]
    createMany?: CampaignCreateManyCreatedUserInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type SocialPlatformSettingCreateNestedManyWithoutCreatedUserInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutCreatedUserInput, SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput> | SocialPlatformSettingCreateWithoutCreatedUserInput[] | SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput | SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput[]
    createMany?: SocialPlatformSettingCreateManyCreatedUserInputEnvelope
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
  }

  export type UserPageSettingUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPageSettingCreateWithoutUserInput, UserPageSettingUncheckedCreateWithoutUserInput> | UserPageSettingCreateWithoutUserInput[] | UserPageSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutUserInput | UserPageSettingCreateOrConnectWithoutUserInput[]
    createMany?: UserPageSettingCreateManyUserInputEnvelope
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutCreatedUserInput = {
    create?: XOR<CampaignCreateWithoutCreatedUserInput, CampaignUncheckedCreateWithoutCreatedUserInput> | CampaignCreateWithoutCreatedUserInput[] | CampaignUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutCreatedUserInput | CampaignCreateOrConnectWithoutCreatedUserInput[]
    createMany?: CampaignCreateManyCreatedUserInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type SocialPlatformSettingUncheckedCreateNestedManyWithoutCreatedUserInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutCreatedUserInput, SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput> | SocialPlatformSettingCreateWithoutCreatedUserInput[] | SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput | SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput[]
    createMany?: SocialPlatformSettingCreateManyCreatedUserInputEnvelope
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserPageSettingUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPageSettingCreateWithoutUserInput, UserPageSettingUncheckedCreateWithoutUserInput> | UserPageSettingCreateWithoutUserInput[] | UserPageSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutUserInput | UserPageSettingCreateOrConnectWithoutUserInput[]
    upsert?: UserPageSettingUpsertWithWhereUniqueWithoutUserInput | UserPageSettingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPageSettingCreateManyUserInputEnvelope
    set?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    disconnect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    delete?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    update?: UserPageSettingUpdateWithWhereUniqueWithoutUserInput | UserPageSettingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPageSettingUpdateManyWithWhereWithoutUserInput | UserPageSettingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPageSettingScalarWhereInput | UserPageSettingScalarWhereInput[]
  }

  export type TeamMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutCreatedUserNestedInput = {
    create?: XOR<CampaignCreateWithoutCreatedUserInput, CampaignUncheckedCreateWithoutCreatedUserInput> | CampaignCreateWithoutCreatedUserInput[] | CampaignUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutCreatedUserInput | CampaignCreateOrConnectWithoutCreatedUserInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutCreatedUserInput | CampaignUpsertWithWhereUniqueWithoutCreatedUserInput[]
    createMany?: CampaignCreateManyCreatedUserInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutCreatedUserInput | CampaignUpdateWithWhereUniqueWithoutCreatedUserInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutCreatedUserInput | CampaignUpdateManyWithWhereWithoutCreatedUserInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type SocialPlatformSettingUpdateManyWithoutCreatedUserNestedInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutCreatedUserInput, SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput> | SocialPlatformSettingCreateWithoutCreatedUserInput[] | SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput | SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput[]
    upsert?: SocialPlatformSettingUpsertWithWhereUniqueWithoutCreatedUserInput | SocialPlatformSettingUpsertWithWhereUniqueWithoutCreatedUserInput[]
    createMany?: SocialPlatformSettingCreateManyCreatedUserInputEnvelope
    set?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    disconnect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    delete?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    update?: SocialPlatformSettingUpdateWithWhereUniqueWithoutCreatedUserInput | SocialPlatformSettingUpdateWithWhereUniqueWithoutCreatedUserInput[]
    updateMany?: SocialPlatformSettingUpdateManyWithWhereWithoutCreatedUserInput | SocialPlatformSettingUpdateManyWithWhereWithoutCreatedUserInput[]
    deleteMany?: SocialPlatformSettingScalarWhereInput | SocialPlatformSettingScalarWhereInput[]
  }

  export type UserPageSettingUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPageSettingCreateWithoutUserInput, UserPageSettingUncheckedCreateWithoutUserInput> | UserPageSettingCreateWithoutUserInput[] | UserPageSettingUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutUserInput | UserPageSettingCreateOrConnectWithoutUserInput[]
    upsert?: UserPageSettingUpsertWithWhereUniqueWithoutUserInput | UserPageSettingUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPageSettingCreateManyUserInputEnvelope
    set?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    disconnect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    delete?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    update?: UserPageSettingUpdateWithWhereUniqueWithoutUserInput | UserPageSettingUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPageSettingUpdateManyWithWhereWithoutUserInput | UserPageSettingUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPageSettingScalarWhereInput | UserPageSettingScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput> | TeamMemberCreateWithoutUserInput[] | TeamMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutUserInput | TeamMemberCreateOrConnectWithoutUserInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutUserInput | TeamMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TeamMemberCreateManyUserInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutUserInput | TeamMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutUserInput | TeamMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutCreatedUserNestedInput = {
    create?: XOR<CampaignCreateWithoutCreatedUserInput, CampaignUncheckedCreateWithoutCreatedUserInput> | CampaignCreateWithoutCreatedUserInput[] | CampaignUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutCreatedUserInput | CampaignCreateOrConnectWithoutCreatedUserInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutCreatedUserInput | CampaignUpsertWithWhereUniqueWithoutCreatedUserInput[]
    createMany?: CampaignCreateManyCreatedUserInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutCreatedUserInput | CampaignUpdateWithWhereUniqueWithoutCreatedUserInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutCreatedUserInput | CampaignUpdateManyWithWhereWithoutCreatedUserInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type SocialPlatformSettingUncheckedUpdateManyWithoutCreatedUserNestedInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutCreatedUserInput, SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput> | SocialPlatformSettingCreateWithoutCreatedUserInput[] | SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput | SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput[]
    upsert?: SocialPlatformSettingUpsertWithWhereUniqueWithoutCreatedUserInput | SocialPlatformSettingUpsertWithWhereUniqueWithoutCreatedUserInput[]
    createMany?: SocialPlatformSettingCreateManyCreatedUserInputEnvelope
    set?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    disconnect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    delete?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    update?: SocialPlatformSettingUpdateWithWhereUniqueWithoutCreatedUserInput | SocialPlatformSettingUpdateWithWhereUniqueWithoutCreatedUserInput[]
    updateMany?: SocialPlatformSettingUpdateManyWithWhereWithoutCreatedUserInput | SocialPlatformSettingUpdateManyWithWhereWithoutCreatedUserInput[]
    deleteMany?: SocialPlatformSettingScalarWhereInput | SocialPlatformSettingScalarWhereInput[]
  }

  export type PostCreateNestedManyWithoutCampaignInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCampaignInput = {
    create?: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: UserCreateOrConnectWithoutCampaignInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutCampaignInput = {
    create?: XOR<TeamCreateWithoutCampaignInput, TeamUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCampaignInput
    connect?: TeamWhereUniqueInput
  }

  export type PostUncheckedCreateNestedManyWithoutCampaignInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type EnumCampaignObjectiveFieldUpdateOperationsInput = {
    set?: $Enums.CampaignObjective
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumCampaignStatusFieldUpdateOperationsInput = {
    set?: $Enums.CampaignStatus
  }

  export type PostUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCampaignInput | PostUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCampaignInput | PostUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCampaignInput | PostUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCampaignNestedInput = {
    create?: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: UserCreateOrConnectWithoutCampaignInput
    upsert?: UserUpsertWithoutCampaignInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCampaignInput, UserUpdateWithoutCampaignInput>, UserUncheckedUpdateWithoutCampaignInput>
  }

  export type TeamUpdateOneRequiredWithoutCampaignNestedInput = {
    create?: XOR<TeamCreateWithoutCampaignInput, TeamUncheckedCreateWithoutCampaignInput>
    connectOrCreate?: TeamCreateOrConnectWithoutCampaignInput
    upsert?: TeamUpsertWithoutCampaignInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutCampaignInput, TeamUpdateWithoutCampaignInput>, TeamUncheckedUpdateWithoutCampaignInput>
  }

  export type PostUncheckedUpdateManyWithoutCampaignNestedInput = {
    create?: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput> | PostCreateWithoutCampaignInput[] | PostUncheckedCreateWithoutCampaignInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCampaignInput | PostCreateOrConnectWithoutCampaignInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCampaignInput | PostUpsertWithWhereUniqueWithoutCampaignInput[]
    createMany?: PostCreateManyCampaignInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCampaignInput | PostUpdateWithWhereUniqueWithoutCampaignInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCampaignInput | PostUpdateManyWithWhereWithoutCampaignInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type PostCreateplatformIdsInput = {
    set: string[]
  }

  export type PostCreateimageIdsInput = {
    set: string[]
  }

  export type CampaignCreateNestedOneWithoutPostInput = {
    create?: XOR<CampaignCreateWithoutPostInput, CampaignUncheckedCreateWithoutPostInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutPostInput
    connect?: CampaignWhereUniqueInput
  }

  export type PostSettingCreateNestedManyWithoutPostInput = {
    create?: XOR<PostSettingCreateWithoutPostInput, PostSettingUncheckedCreateWithoutPostInput> | PostSettingCreateWithoutPostInput[] | PostSettingUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutPostInput | PostSettingCreateOrConnectWithoutPostInput[]
    createMany?: PostSettingCreateManyPostInputEnvelope
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
  }

  export type PostSettingUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostSettingCreateWithoutPostInput, PostSettingUncheckedCreateWithoutPostInput> | PostSettingCreateWithoutPostInput[] | PostSettingUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutPostInput | PostSettingCreateOrConnectWithoutPostInput[]
    createMany?: PostSettingCreateManyPostInputEnvelope
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
  }

  export type EnumPostStatusFieldUpdateOperationsInput = {
    set?: $Enums.PostStatus
  }

  export type PostUpdateplatformIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type PostUpdateimageIdsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type CampaignUpdateOneWithoutPostNestedInput = {
    create?: XOR<CampaignCreateWithoutPostInput, CampaignUncheckedCreateWithoutPostInput>
    connectOrCreate?: CampaignCreateOrConnectWithoutPostInput
    upsert?: CampaignUpsertWithoutPostInput
    disconnect?: CampaignWhereInput | boolean
    delete?: CampaignWhereInput | boolean
    connect?: CampaignWhereUniqueInput
    update?: XOR<XOR<CampaignUpdateToOneWithWhereWithoutPostInput, CampaignUpdateWithoutPostInput>, CampaignUncheckedUpdateWithoutPostInput>
  }

  export type PostSettingUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostSettingCreateWithoutPostInput, PostSettingUncheckedCreateWithoutPostInput> | PostSettingCreateWithoutPostInput[] | PostSettingUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutPostInput | PostSettingCreateOrConnectWithoutPostInput[]
    upsert?: PostSettingUpsertWithWhereUniqueWithoutPostInput | PostSettingUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostSettingCreateManyPostInputEnvelope
    set?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    disconnect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    delete?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    update?: PostSettingUpdateWithWhereUniqueWithoutPostInput | PostSettingUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostSettingUpdateManyWithWhereWithoutPostInput | PostSettingUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostSettingScalarWhereInput | PostSettingScalarWhereInput[]
  }

  export type PostSettingUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostSettingCreateWithoutPostInput, PostSettingUncheckedCreateWithoutPostInput> | PostSettingCreateWithoutPostInput[] | PostSettingUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutPostInput | PostSettingCreateOrConnectWithoutPostInput[]
    upsert?: PostSettingUpsertWithWhereUniqueWithoutPostInput | PostSettingUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostSettingCreateManyPostInputEnvelope
    set?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    disconnect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    delete?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    update?: PostSettingUpdateWithWhereUniqueWithoutPostInput | PostSettingUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostSettingUpdateManyWithWhereWithoutPostInput | PostSettingUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostSettingScalarWhereInput | PostSettingScalarWhereInput[]
  }

  export type PostCreateNestedOneWithoutPostSettingInput = {
    create?: XOR<PostCreateWithoutPostSettingInput, PostUncheckedCreateWithoutPostSettingInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostSettingInput
    connect?: PostWhereUniqueInput
  }

  export type SocialPlatformSettingCreateNestedOneWithoutPostSettingInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutPostSettingInput, SocialPlatformSettingUncheckedCreateWithoutPostSettingInput>
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutPostSettingInput
    connect?: SocialPlatformSettingWhereUniqueInput
  }

  export type PostUpdateOneRequiredWithoutPostSettingNestedInput = {
    create?: XOR<PostCreateWithoutPostSettingInput, PostUncheckedCreateWithoutPostSettingInput>
    connectOrCreate?: PostCreateOrConnectWithoutPostSettingInput
    upsert?: PostUpsertWithoutPostSettingInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutPostSettingInput, PostUpdateWithoutPostSettingInput>, PostUncheckedUpdateWithoutPostSettingInput>
  }

  export type SocialPlatformSettingUpdateOneRequiredWithoutPostSettingNestedInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutPostSettingInput, SocialPlatformSettingUncheckedCreateWithoutPostSettingInput>
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutPostSettingInput
    upsert?: SocialPlatformSettingUpsertWithoutPostSettingInput
    connect?: SocialPlatformSettingWhereUniqueInput
    update?: XOR<XOR<SocialPlatformSettingUpdateToOneWithWhereWithoutPostSettingInput, SocialPlatformSettingUpdateWithoutPostSettingInput>, SocialPlatformSettingUncheckedUpdateWithoutPostSettingInput>
  }

  export type EnumUploadFileTypeFieldUpdateOperationsInput = {
    set?: $Enums.UploadFileType
  }

  export type NullableEnumUploadSourceFieldUpdateOperationsInput = {
    set?: $Enums.UploadSource | null
  }

  export type PostSettingCreateNestedManyWithoutSocialSettingInput = {
    create?: XOR<PostSettingCreateWithoutSocialSettingInput, PostSettingUncheckedCreateWithoutSocialSettingInput> | PostSettingCreateWithoutSocialSettingInput[] | PostSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutSocialSettingInput | PostSettingCreateOrConnectWithoutSocialSettingInput[]
    createMany?: PostSettingCreateManySocialSettingInputEnvelope
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
  }

  export type UserPageSettingCreateNestedManyWithoutSocialSettingInput = {
    create?: XOR<UserPageSettingCreateWithoutSocialSettingInput, UserPageSettingUncheckedCreateWithoutSocialSettingInput> | UserPageSettingCreateWithoutSocialSettingInput[] | UserPageSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutSocialSettingInput | UserPageSettingCreateOrConnectWithoutSocialSettingInput[]
    createMany?: UserPageSettingCreateManySocialSettingInputEnvelope
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
  }

  export type TeamCreateNestedOneWithoutSocialPlatformSettingInput = {
    create?: XOR<TeamCreateWithoutSocialPlatformSettingInput, TeamUncheckedCreateWithoutSocialPlatformSettingInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSocialPlatformSettingInput
    connect?: TeamWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSocialPlatformSettingInput = {
    create?: XOR<UserCreateWithoutSocialPlatformSettingInput, UserUncheckedCreateWithoutSocialPlatformSettingInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialPlatformSettingInput
    connect?: UserWhereUniqueInput
  }

  export type PostSettingUncheckedCreateNestedManyWithoutSocialSettingInput = {
    create?: XOR<PostSettingCreateWithoutSocialSettingInput, PostSettingUncheckedCreateWithoutSocialSettingInput> | PostSettingCreateWithoutSocialSettingInput[] | PostSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutSocialSettingInput | PostSettingCreateOrConnectWithoutSocialSettingInput[]
    createMany?: PostSettingCreateManySocialSettingInputEnvelope
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
  }

  export type UserPageSettingUncheckedCreateNestedManyWithoutSocialSettingInput = {
    create?: XOR<UserPageSettingCreateWithoutSocialSettingInput, UserPageSettingUncheckedCreateWithoutSocialSettingInput> | UserPageSettingCreateWithoutSocialSettingInput[] | UserPageSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutSocialSettingInput | UserPageSettingCreateOrConnectWithoutSocialSettingInput[]
    createMany?: UserPageSettingCreateManySocialSettingInputEnvelope
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
  }

  export type EnumPlatformFieldUpdateOperationsInput = {
    set?: $Enums.Platform
  }

  export type EnumSettingStatusFieldUpdateOperationsInput = {
    set?: $Enums.SettingStatus
  }

  export type PostSettingUpdateManyWithoutSocialSettingNestedInput = {
    create?: XOR<PostSettingCreateWithoutSocialSettingInput, PostSettingUncheckedCreateWithoutSocialSettingInput> | PostSettingCreateWithoutSocialSettingInput[] | PostSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutSocialSettingInput | PostSettingCreateOrConnectWithoutSocialSettingInput[]
    upsert?: PostSettingUpsertWithWhereUniqueWithoutSocialSettingInput | PostSettingUpsertWithWhereUniqueWithoutSocialSettingInput[]
    createMany?: PostSettingCreateManySocialSettingInputEnvelope
    set?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    disconnect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    delete?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    update?: PostSettingUpdateWithWhereUniqueWithoutSocialSettingInput | PostSettingUpdateWithWhereUniqueWithoutSocialSettingInput[]
    updateMany?: PostSettingUpdateManyWithWhereWithoutSocialSettingInput | PostSettingUpdateManyWithWhereWithoutSocialSettingInput[]
    deleteMany?: PostSettingScalarWhereInput | PostSettingScalarWhereInput[]
  }

  export type UserPageSettingUpdateManyWithoutSocialSettingNestedInput = {
    create?: XOR<UserPageSettingCreateWithoutSocialSettingInput, UserPageSettingUncheckedCreateWithoutSocialSettingInput> | UserPageSettingCreateWithoutSocialSettingInput[] | UserPageSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutSocialSettingInput | UserPageSettingCreateOrConnectWithoutSocialSettingInput[]
    upsert?: UserPageSettingUpsertWithWhereUniqueWithoutSocialSettingInput | UserPageSettingUpsertWithWhereUniqueWithoutSocialSettingInput[]
    createMany?: UserPageSettingCreateManySocialSettingInputEnvelope
    set?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    disconnect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    delete?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    update?: UserPageSettingUpdateWithWhereUniqueWithoutSocialSettingInput | UserPageSettingUpdateWithWhereUniqueWithoutSocialSettingInput[]
    updateMany?: UserPageSettingUpdateManyWithWhereWithoutSocialSettingInput | UserPageSettingUpdateManyWithWhereWithoutSocialSettingInput[]
    deleteMany?: UserPageSettingScalarWhereInput | UserPageSettingScalarWhereInput[]
  }

  export type TeamUpdateOneRequiredWithoutSocialPlatformSettingNestedInput = {
    create?: XOR<TeamCreateWithoutSocialPlatformSettingInput, TeamUncheckedCreateWithoutSocialPlatformSettingInput>
    connectOrCreate?: TeamCreateOrConnectWithoutSocialPlatformSettingInput
    upsert?: TeamUpsertWithoutSocialPlatformSettingInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutSocialPlatformSettingInput, TeamUpdateWithoutSocialPlatformSettingInput>, TeamUncheckedUpdateWithoutSocialPlatformSettingInput>
  }

  export type UserUpdateOneWithoutSocialPlatformSettingNestedInput = {
    create?: XOR<UserCreateWithoutSocialPlatformSettingInput, UserUncheckedCreateWithoutSocialPlatformSettingInput>
    connectOrCreate?: UserCreateOrConnectWithoutSocialPlatformSettingInput
    upsert?: UserUpsertWithoutSocialPlatformSettingInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSocialPlatformSettingInput, UserUpdateWithoutSocialPlatformSettingInput>, UserUncheckedUpdateWithoutSocialPlatformSettingInput>
  }

  export type PostSettingUncheckedUpdateManyWithoutSocialSettingNestedInput = {
    create?: XOR<PostSettingCreateWithoutSocialSettingInput, PostSettingUncheckedCreateWithoutSocialSettingInput> | PostSettingCreateWithoutSocialSettingInput[] | PostSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: PostSettingCreateOrConnectWithoutSocialSettingInput | PostSettingCreateOrConnectWithoutSocialSettingInput[]
    upsert?: PostSettingUpsertWithWhereUniqueWithoutSocialSettingInput | PostSettingUpsertWithWhereUniqueWithoutSocialSettingInput[]
    createMany?: PostSettingCreateManySocialSettingInputEnvelope
    set?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    disconnect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    delete?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    connect?: PostSettingWhereUniqueInput | PostSettingWhereUniqueInput[]
    update?: PostSettingUpdateWithWhereUniqueWithoutSocialSettingInput | PostSettingUpdateWithWhereUniqueWithoutSocialSettingInput[]
    updateMany?: PostSettingUpdateManyWithWhereWithoutSocialSettingInput | PostSettingUpdateManyWithWhereWithoutSocialSettingInput[]
    deleteMany?: PostSettingScalarWhereInput | PostSettingScalarWhereInput[]
  }

  export type UserPageSettingUncheckedUpdateManyWithoutSocialSettingNestedInput = {
    create?: XOR<UserPageSettingCreateWithoutSocialSettingInput, UserPageSettingUncheckedCreateWithoutSocialSettingInput> | UserPageSettingCreateWithoutSocialSettingInput[] | UserPageSettingUncheckedCreateWithoutSocialSettingInput[]
    connectOrCreate?: UserPageSettingCreateOrConnectWithoutSocialSettingInput | UserPageSettingCreateOrConnectWithoutSocialSettingInput[]
    upsert?: UserPageSettingUpsertWithWhereUniqueWithoutSocialSettingInput | UserPageSettingUpsertWithWhereUniqueWithoutSocialSettingInput[]
    createMany?: UserPageSettingCreateManySocialSettingInputEnvelope
    set?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    disconnect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    delete?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    connect?: UserPageSettingWhereUniqueInput | UserPageSettingWhereUniqueInput[]
    update?: UserPageSettingUpdateWithWhereUniqueWithoutSocialSettingInput | UserPageSettingUpdateWithWhereUniqueWithoutSocialSettingInput[]
    updateMany?: UserPageSettingUpdateManyWithWhereWithoutSocialSettingInput | UserPageSettingUpdateManyWithWhereWithoutSocialSettingInput[]
    deleteMany?: UserPageSettingScalarWhereInput | UserPageSettingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutUserPageSettingInput = {
    create?: XOR<UserCreateWithoutUserPageSettingInput, UserUncheckedCreateWithoutUserPageSettingInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPageSettingInput
    connect?: UserWhereUniqueInput
  }

  export type SocialPlatformSettingCreateNestedOneWithoutUserPageSettingInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutUserPageSettingInput, SocialPlatformSettingUncheckedCreateWithoutUserPageSettingInput>
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutUserPageSettingInput
    connect?: SocialPlatformSettingWhereUniqueInput
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type UserUpdateOneRequiredWithoutUserPageSettingNestedInput = {
    create?: XOR<UserCreateWithoutUserPageSettingInput, UserUncheckedCreateWithoutUserPageSettingInput>
    connectOrCreate?: UserCreateOrConnectWithoutUserPageSettingInput
    upsert?: UserUpsertWithoutUserPageSettingInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUserPageSettingInput, UserUpdateWithoutUserPageSettingInput>, UserUncheckedUpdateWithoutUserPageSettingInput>
  }

  export type SocialPlatformSettingUpdateOneRequiredWithoutUserPageSettingNestedInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutUserPageSettingInput, SocialPlatformSettingUncheckedCreateWithoutUserPageSettingInput>
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutUserPageSettingInput
    upsert?: SocialPlatformSettingUpsertWithoutUserPageSettingInput
    connect?: SocialPlatformSettingWhereUniqueInput
    update?: XOR<XOR<SocialPlatformSettingUpdateToOneWithWhereWithoutUserPageSettingInput, SocialPlatformSettingUpdateWithoutUserPageSettingInput>, SocialPlatformSettingUncheckedUpdateWithoutUserPageSettingInput>
  }

  export type TeamMemberCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type CampaignCreateNestedManyWithoutTeamInput = {
    create?: XOR<CampaignCreateWithoutTeamInput, CampaignUncheckedCreateWithoutTeamInput> | CampaignCreateWithoutTeamInput[] | CampaignUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutTeamInput | CampaignCreateOrConnectWithoutTeamInput[]
    createMany?: CampaignCreateManyTeamInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type SocialPlatformSettingCreateNestedManyWithoutTeamInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutTeamInput, SocialPlatformSettingUncheckedCreateWithoutTeamInput> | SocialPlatformSettingCreateWithoutTeamInput[] | SocialPlatformSettingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutTeamInput | SocialPlatformSettingCreateOrConnectWithoutTeamInput[]
    createMany?: SocialPlatformSettingCreateManyTeamInputEnvelope
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
  }

  export type TeamMemberUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
  }

  export type CampaignUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<CampaignCreateWithoutTeamInput, CampaignUncheckedCreateWithoutTeamInput> | CampaignCreateWithoutTeamInput[] | CampaignUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutTeamInput | CampaignCreateOrConnectWithoutTeamInput[]
    createMany?: CampaignCreateManyTeamInputEnvelope
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
  }

  export type SocialPlatformSettingUncheckedCreateNestedManyWithoutTeamInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutTeamInput, SocialPlatformSettingUncheckedCreateWithoutTeamInput> | SocialPlatformSettingCreateWithoutTeamInput[] | SocialPlatformSettingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutTeamInput | SocialPlatformSettingCreateOrConnectWithoutTeamInput[]
    createMany?: SocialPlatformSettingCreateManyTeamInputEnvelope
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
  }

  export type TeamMemberUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type CampaignUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CampaignCreateWithoutTeamInput, CampaignUncheckedCreateWithoutTeamInput> | CampaignCreateWithoutTeamInput[] | CampaignUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutTeamInput | CampaignCreateOrConnectWithoutTeamInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutTeamInput | CampaignUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CampaignCreateManyTeamInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutTeamInput | CampaignUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutTeamInput | CampaignUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type SocialPlatformSettingUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutTeamInput, SocialPlatformSettingUncheckedCreateWithoutTeamInput> | SocialPlatformSettingCreateWithoutTeamInput[] | SocialPlatformSettingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutTeamInput | SocialPlatformSettingCreateOrConnectWithoutTeamInput[]
    upsert?: SocialPlatformSettingUpsertWithWhereUniqueWithoutTeamInput | SocialPlatformSettingUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SocialPlatformSettingCreateManyTeamInputEnvelope
    set?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    disconnect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    delete?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    update?: SocialPlatformSettingUpdateWithWhereUniqueWithoutTeamInput | SocialPlatformSettingUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SocialPlatformSettingUpdateManyWithWhereWithoutTeamInput | SocialPlatformSettingUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SocialPlatformSettingScalarWhereInput | SocialPlatformSettingScalarWhereInput[]
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput> | TeamMemberCreateWithoutTeamInput[] | TeamMemberUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: TeamMemberCreateOrConnectWithoutTeamInput | TeamMemberCreateOrConnectWithoutTeamInput[]
    upsert?: TeamMemberUpsertWithWhereUniqueWithoutTeamInput | TeamMemberUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: TeamMemberCreateManyTeamInputEnvelope
    set?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    disconnect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    delete?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    connect?: TeamMemberWhereUniqueInput | TeamMemberWhereUniqueInput[]
    update?: TeamMemberUpdateWithWhereUniqueWithoutTeamInput | TeamMemberUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: TeamMemberUpdateManyWithWhereWithoutTeamInput | TeamMemberUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
  }

  export type CampaignUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<CampaignCreateWithoutTeamInput, CampaignUncheckedCreateWithoutTeamInput> | CampaignCreateWithoutTeamInput[] | CampaignUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: CampaignCreateOrConnectWithoutTeamInput | CampaignCreateOrConnectWithoutTeamInput[]
    upsert?: CampaignUpsertWithWhereUniqueWithoutTeamInput | CampaignUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: CampaignCreateManyTeamInputEnvelope
    set?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    disconnect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    delete?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    connect?: CampaignWhereUniqueInput | CampaignWhereUniqueInput[]
    update?: CampaignUpdateWithWhereUniqueWithoutTeamInput | CampaignUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: CampaignUpdateManyWithWhereWithoutTeamInput | CampaignUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
  }

  export type SocialPlatformSettingUncheckedUpdateManyWithoutTeamNestedInput = {
    create?: XOR<SocialPlatformSettingCreateWithoutTeamInput, SocialPlatformSettingUncheckedCreateWithoutTeamInput> | SocialPlatformSettingCreateWithoutTeamInput[] | SocialPlatformSettingUncheckedCreateWithoutTeamInput[]
    connectOrCreate?: SocialPlatformSettingCreateOrConnectWithoutTeamInput | SocialPlatformSettingCreateOrConnectWithoutTeamInput[]
    upsert?: SocialPlatformSettingUpsertWithWhereUniqueWithoutTeamInput | SocialPlatformSettingUpsertWithWhereUniqueWithoutTeamInput[]
    createMany?: SocialPlatformSettingCreateManyTeamInputEnvelope
    set?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    disconnect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    delete?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    connect?: SocialPlatformSettingWhereUniqueInput | SocialPlatformSettingWhereUniqueInput[]
    update?: SocialPlatformSettingUpdateWithWhereUniqueWithoutTeamInput | SocialPlatformSettingUpdateWithWhereUniqueWithoutTeamInput[]
    updateMany?: SocialPlatformSettingUpdateManyWithWhereWithoutTeamInput | SocialPlatformSettingUpdateManyWithWhereWithoutTeamInput[]
    deleteMany?: SocialPlatformSettingScalarWhereInput | SocialPlatformSettingScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutTeamMemberInput = {
    create?: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMemberInput
    connect?: UserWhereUniqueInput
  }

  export type TeamCreateNestedOneWithoutMembersInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    connect?: TeamWhereUniqueInput
  }

  export type EnumTeamRoleFieldUpdateOperationsInput = {
    set?: $Enums.TeamRole
  }

  export type UserUpdateOneRequiredWithoutTeamMemberNestedInput = {
    create?: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutTeamMemberInput
    upsert?: UserUpsertWithoutTeamMemberInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTeamMemberInput, UserUpdateWithoutTeamMemberInput>, UserUncheckedUpdateWithoutTeamMemberInput>
  }

  export type TeamUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    connectOrCreate?: TeamCreateOrConnectWithoutMembersInput
    upsert?: TeamUpsertWithoutMembersInput
    connect?: TeamWhereUniqueInput
    update?: XOR<XOR<TeamUpdateToOneWithWhereWithoutMembersInput, TeamUpdateWithoutMembersInput>, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumCampaignObjectiveFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignObjective | EnumCampaignObjectiveFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignObjectiveFilter<$PrismaModel> | $Enums.CampaignObjective
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedEnumCampaignStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusFilter<$PrismaModel> | $Enums.CampaignStatus
  }

  export type NestedEnumCampaignObjectiveWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignObjective | EnumCampaignObjectiveFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignObjective[] | ListEnumCampaignObjectiveFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignObjectiveWithAggregatesFilter<$PrismaModel> | $Enums.CampaignObjective
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignObjectiveFilter<$PrismaModel>
    _max?: NestedEnumCampaignObjectiveFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.CampaignStatus | EnumCampaignStatusFieldRefInput<$PrismaModel>
    in?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.CampaignStatus[] | ListEnumCampaignStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumCampaignStatusWithAggregatesFilter<$PrismaModel> | $Enums.CampaignStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumCampaignStatusFilter<$PrismaModel>
    _max?: NestedEnumCampaignStatusFilter<$PrismaModel>
  }

  export type NestedEnumPostStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusFilter<$PrismaModel> | $Enums.PostStatus
  }

  export type NestedEnumPostStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PostStatus | EnumPostStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PostStatus[] | ListEnumPostStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPostStatusWithAggregatesFilter<$PrismaModel> | $Enums.PostStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPostStatusFilter<$PrismaModel>
    _max?: NestedEnumPostStatusFilter<$PrismaModel>
  }

  export type NestedEnumUploadFileTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadFileType | EnumUploadFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUploadFileTypeFilter<$PrismaModel> | $Enums.UploadFileType
  }

  export type NestedEnumUploadSourceNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadSource | EnumUploadSourceFieldRefInput<$PrismaModel> | null
    in?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUploadSourceNullableFilter<$PrismaModel> | $Enums.UploadSource | null
  }

  export type NestedEnumUploadFileTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadFileType | EnumUploadFileTypeFieldRefInput<$PrismaModel>
    in?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.UploadFileType[] | ListEnumUploadFileTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumUploadFileTypeWithAggregatesFilter<$PrismaModel> | $Enums.UploadFileType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUploadFileTypeFilter<$PrismaModel>
    _max?: NestedEnumUploadFileTypeFilter<$PrismaModel>
  }

  export type NestedEnumUploadSourceNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UploadSource | EnumUploadSourceFieldRefInput<$PrismaModel> | null
    in?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    notIn?: $Enums.UploadSource[] | ListEnumUploadSourceFieldRefInput<$PrismaModel> | null
    not?: NestedEnumUploadSourceNullableWithAggregatesFilter<$PrismaModel> | $Enums.UploadSource | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumUploadSourceNullableFilter<$PrismaModel>
    _max?: NestedEnumUploadSourceNullableFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedEnumPlatformFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformFilter<$PrismaModel> | $Enums.Platform
  }

  export type NestedEnumSettingStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.SettingStatus | EnumSettingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSettingStatusFilter<$PrismaModel> | $Enums.SettingStatus
  }

  export type NestedEnumPlatformWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Platform | EnumPlatformFieldRefInput<$PrismaModel>
    in?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    notIn?: $Enums.Platform[] | ListEnumPlatformFieldRefInput<$PrismaModel>
    not?: NestedEnumPlatformWithAggregatesFilter<$PrismaModel> | $Enums.Platform
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPlatformFilter<$PrismaModel>
    _max?: NestedEnumPlatformFilter<$PrismaModel>
  }

  export type NestedEnumSettingStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SettingStatus | EnumSettingStatusFieldRefInput<$PrismaModel>
    in?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.SettingStatus[] | ListEnumSettingStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumSettingStatusWithAggregatesFilter<$PrismaModel> | $Enums.SettingStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSettingStatusFilter<$PrismaModel>
    _max?: NestedEnumSettingStatusFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumTeamRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamRole | EnumTeamRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamRoleFilter<$PrismaModel> | $Enums.TeamRole
  }

  export type NestedEnumTeamRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.TeamRole | EnumTeamRoleFieldRefInput<$PrismaModel>
    in?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.TeamRole[] | ListEnumTeamRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumTeamRoleWithAggregatesFilter<$PrismaModel> | $Enums.TeamRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumTeamRoleFilter<$PrismaModel>
    _max?: NestedEnumTeamRoleFilter<$PrismaModel>
  }

  export type UserPageSettingCreateWithoutUserInput = {
    role?: $Enums.UserRole
    socialSetting: SocialPlatformSettingCreateNestedOneWithoutUserPageSettingInput
  }

  export type UserPageSettingUncheckedCreateWithoutUserInput = {
    socialSettingId: string
    role?: $Enums.UserRole
  }

  export type UserPageSettingCreateOrConnectWithoutUserInput = {
    where: UserPageSettingWhereUniqueInput
    create: XOR<UserPageSettingCreateWithoutUserInput, UserPageSettingUncheckedCreateWithoutUserInput>
  }

  export type UserPageSettingCreateManyUserInputEnvelope = {
    data: UserPageSettingCreateManyUserInput | UserPageSettingCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TeamMemberCreateWithoutUserInput = {
    role?: $Enums.TeamRole
    team: TeamCreateNestedOneWithoutMembersInput
  }

  export type TeamMemberUncheckedCreateWithoutUserInput = {
    teamId: string
    role?: $Enums.TeamRole
  }

  export type TeamMemberCreateOrConnectWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberCreateManyUserInputEnvelope = {
    data: TeamMemberCreateManyUserInput | TeamMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CampaignCreateWithoutCreatedUserInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Post?: PostCreateNestedManyWithoutCampaignInput
    team: TeamCreateNestedOneWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutCreatedUserInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    teamId: string
    Post?: PostUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutCreatedUserInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutCreatedUserInput, CampaignUncheckedCreateWithoutCreatedUserInput>
  }

  export type CampaignCreateManyCreatedUserInputEnvelope = {
    data: CampaignCreateManyCreatedUserInput | CampaignCreateManyCreatedUserInput[]
    skipDuplicates?: boolean
  }

  export type SocialPlatformSettingCreateWithoutCreatedUserInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    PostSetting?: PostSettingCreateNestedManyWithoutSocialSettingInput
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutSocialSettingInput
    team: TeamCreateNestedOneWithoutSocialPlatformSettingInput
  }

  export type SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    PostSetting?: PostSettingUncheckedCreateNestedManyWithoutSocialSettingInput
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutSocialSettingInput
  }

  export type SocialPlatformSettingCreateOrConnectWithoutCreatedUserInput = {
    where: SocialPlatformSettingWhereUniqueInput
    create: XOR<SocialPlatformSettingCreateWithoutCreatedUserInput, SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput>
  }

  export type SocialPlatformSettingCreateManyCreatedUserInputEnvelope = {
    data: SocialPlatformSettingCreateManyCreatedUserInput | SocialPlatformSettingCreateManyCreatedUserInput[]
    skipDuplicates?: boolean
  }

  export type UserPageSettingUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPageSettingWhereUniqueInput
    update: XOR<UserPageSettingUpdateWithoutUserInput, UserPageSettingUncheckedUpdateWithoutUserInput>
    create: XOR<UserPageSettingCreateWithoutUserInput, UserPageSettingUncheckedCreateWithoutUserInput>
  }

  export type UserPageSettingUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPageSettingWhereUniqueInput
    data: XOR<UserPageSettingUpdateWithoutUserInput, UserPageSettingUncheckedUpdateWithoutUserInput>
  }

  export type UserPageSettingUpdateManyWithWhereWithoutUserInput = {
    where: UserPageSettingScalarWhereInput
    data: XOR<UserPageSettingUpdateManyMutationInput, UserPageSettingUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPageSettingScalarWhereInput = {
    AND?: UserPageSettingScalarWhereInput | UserPageSettingScalarWhereInput[]
    OR?: UserPageSettingScalarWhereInput[]
    NOT?: UserPageSettingScalarWhereInput | UserPageSettingScalarWhereInput[]
    userId?: StringFilter<"UserPageSetting"> | string
    socialSettingId?: StringFilter<"UserPageSetting"> | string
    role?: EnumUserRoleFilter<"UserPageSetting"> | $Enums.UserRole
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
    create: XOR<TeamMemberCreateWithoutUserInput, TeamMemberUncheckedCreateWithoutUserInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutUserInput, TeamMemberUncheckedUpdateWithoutUserInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutUserInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type TeamMemberScalarWhereInput = {
    AND?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    OR?: TeamMemberScalarWhereInput[]
    NOT?: TeamMemberScalarWhereInput | TeamMemberScalarWhereInput[]
    userId?: StringFilter<"TeamMember"> | string
    teamId?: StringFilter<"TeamMember"> | string
    role?: EnumTeamRoleFilter<"TeamMember"> | $Enums.TeamRole
  }

  export type CampaignUpsertWithWhereUniqueWithoutCreatedUserInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutCreatedUserInput, CampaignUncheckedUpdateWithoutCreatedUserInput>
    create: XOR<CampaignCreateWithoutCreatedUserInput, CampaignUncheckedCreateWithoutCreatedUserInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutCreatedUserInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutCreatedUserInput, CampaignUncheckedUpdateWithoutCreatedUserInput>
  }

  export type CampaignUpdateManyWithWhereWithoutCreatedUserInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutCreatedUserInput>
  }

  export type CampaignScalarWhereInput = {
    AND?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    OR?: CampaignScalarWhereInput[]
    NOT?: CampaignScalarWhereInput | CampaignScalarWhereInput[]
    id?: StringFilter<"Campaign"> | string
    name?: StringFilter<"Campaign"> | string
    description?: StringNullableFilter<"Campaign"> | string | null
    objective?: EnumCampaignObjectiveFilter<"Campaign"> | $Enums.CampaignObjective
    startDate?: DateTimeFilter<"Campaign"> | Date | string
    endDate?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    dailyBudget?: FloatNullableFilter<"Campaign"> | number | null
    totalBudget?: FloatNullableFilter<"Campaign"> | number | null
    status?: EnumCampaignStatusFilter<"Campaign"> | $Enums.CampaignStatus
    createdAt?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Campaign"> | Date | string | null
    createdUserId?: StringNullableFilter<"Campaign"> | string | null
    teamId?: StringFilter<"Campaign"> | string
  }

  export type SocialPlatformSettingUpsertWithWhereUniqueWithoutCreatedUserInput = {
    where: SocialPlatformSettingWhereUniqueInput
    update: XOR<SocialPlatformSettingUpdateWithoutCreatedUserInput, SocialPlatformSettingUncheckedUpdateWithoutCreatedUserInput>
    create: XOR<SocialPlatformSettingCreateWithoutCreatedUserInput, SocialPlatformSettingUncheckedCreateWithoutCreatedUserInput>
  }

  export type SocialPlatformSettingUpdateWithWhereUniqueWithoutCreatedUserInput = {
    where: SocialPlatformSettingWhereUniqueInput
    data: XOR<SocialPlatformSettingUpdateWithoutCreatedUserInput, SocialPlatformSettingUncheckedUpdateWithoutCreatedUserInput>
  }

  export type SocialPlatformSettingUpdateManyWithWhereWithoutCreatedUserInput = {
    where: SocialPlatformSettingScalarWhereInput
    data: XOR<SocialPlatformSettingUpdateManyMutationInput, SocialPlatformSettingUncheckedUpdateManyWithoutCreatedUserInput>
  }

  export type SocialPlatformSettingScalarWhereInput = {
    AND?: SocialPlatformSettingScalarWhereInput | SocialPlatformSettingScalarWhereInput[]
    OR?: SocialPlatformSettingScalarWhereInput[]
    NOT?: SocialPlatformSettingScalarWhereInput | SocialPlatformSettingScalarWhereInput[]
    id?: StringFilter<"SocialPlatformSetting"> | string
    platform?: EnumPlatformFilter<"SocialPlatformSetting"> | $Enums.Platform
    pageId?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    pageName?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    pageLink?: StringNullableFilter<"SocialPlatformSetting"> | string | null
    accessToken?: StringFilter<"SocialPlatformSetting"> | string
    status?: EnumSettingStatusFilter<"SocialPlatformSetting"> | $Enums.SettingStatus
    expiresAt?: DateTimeNullableFilter<"SocialPlatformSetting"> | Date | string | null
    metadata?: JsonNullableFilter<"SocialPlatformSetting">
    createdAt?: DateTimeFilter<"SocialPlatformSetting"> | Date | string
    updatedAt?: DateTimeFilter<"SocialPlatformSetting"> | Date | string
    teamId?: StringFilter<"SocialPlatformSetting"> | string
    createdBy?: StringNullableFilter<"SocialPlatformSetting"> | string | null
  }

  export type PostCreateWithoutCampaignInput = {
    id?: string
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
    PostSetting?: PostSettingCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCampaignInput = {
    id?: string
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
    PostSetting?: PostSettingUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCampaignInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput>
  }

  export type PostCreateManyCampaignInputEnvelope = {
    data: PostCreateManyCampaignInput | PostCreateManyCampaignInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCampaignInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    SocialPlatformSetting?: SocialPlatformSettingCreateNestedManyWithoutCreatedUserInput
  }

  export type UserUncheckedCreateWithoutCampaignInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedCreateNestedManyWithoutCreatedUserInput
  }

  export type UserCreateOrConnectWithoutCampaignInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
  }

  export type TeamCreateWithoutCampaignInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    SocialPlatformSetting?: SocialPlatformSettingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutCampaignInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutCampaignInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutCampaignInput, TeamUncheckedCreateWithoutCampaignInput>
  }

  export type PostUpsertWithWhereUniqueWithoutCampaignInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutCampaignInput, PostUncheckedUpdateWithoutCampaignInput>
    create: XOR<PostCreateWithoutCampaignInput, PostUncheckedCreateWithoutCampaignInput>
  }

  export type PostUpdateWithWhereUniqueWithoutCampaignInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutCampaignInput, PostUncheckedUpdateWithoutCampaignInput>
  }

  export type PostUpdateManyWithWhereWithoutCampaignInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutCampaignInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    campaignId?: StringNullableFilter<"Post"> | string | null
    description?: StringFilter<"Post"> | string
    content?: StringNullableFilter<"Post"> | string | null
    status?: EnumPostStatusFilter<"Post"> | $Enums.PostStatus
    postedTime?: DateTimeFilter<"Post"> | Date | string
    platformIds?: StringNullableListFilter<"Post">
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    imageIds?: StringNullableListFilter<"Post">
    publishedUrl?: StringNullableFilter<"Post"> | string | null
  }

  export type UserUpsertWithoutCampaignInput = {
    update: XOR<UserUpdateWithoutCampaignInput, UserUncheckedUpdateWithoutCampaignInput>
    create: XOR<UserCreateWithoutCampaignInput, UserUncheckedCreateWithoutCampaignInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCampaignInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCampaignInput, UserUncheckedUpdateWithoutCampaignInput>
  }

  export type UserUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUpdateManyWithoutCreatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedUpdateManyWithoutCreatedUserNestedInput
  }

  export type TeamUpsertWithoutCampaignInput = {
    update: XOR<TeamUpdateWithoutCampaignInput, TeamUncheckedUpdateWithoutCampaignInput>
    create: XOR<TeamCreateWithoutCampaignInput, TeamUncheckedCreateWithoutCampaignInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutCampaignInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutCampaignInput, TeamUncheckedUpdateWithoutCampaignInput>
  }

  export type TeamUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type CampaignCreateWithoutPostInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdUser?: UserCreateNestedOneWithoutCampaignInput
    team: TeamCreateNestedOneWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutPostInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdUserId?: string | null
    teamId: string
  }

  export type CampaignCreateOrConnectWithoutPostInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutPostInput, CampaignUncheckedCreateWithoutPostInput>
  }

  export type PostSettingCreateWithoutPostInput = {
    model?: string | null
    socialSetting: SocialPlatformSettingCreateNestedOneWithoutPostSettingInput
  }

  export type PostSettingUncheckedCreateWithoutPostInput = {
    socialSettingId: string
    model?: string | null
  }

  export type PostSettingCreateOrConnectWithoutPostInput = {
    where: PostSettingWhereUniqueInput
    create: XOR<PostSettingCreateWithoutPostInput, PostSettingUncheckedCreateWithoutPostInput>
  }

  export type PostSettingCreateManyPostInputEnvelope = {
    data: PostSettingCreateManyPostInput | PostSettingCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type CampaignUpsertWithoutPostInput = {
    update: XOR<CampaignUpdateWithoutPostInput, CampaignUncheckedUpdateWithoutPostInput>
    create: XOR<CampaignCreateWithoutPostInput, CampaignUncheckedCreateWithoutPostInput>
    where?: CampaignWhereInput
  }

  export type CampaignUpdateToOneWithWhereWithoutPostInput = {
    where?: CampaignWhereInput
    data: XOR<CampaignUpdateWithoutPostInput, CampaignUncheckedUpdateWithoutPostInput>
  }

  export type CampaignUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdUser?: UserUpdateOneWithoutCampaignNestedInput
    team?: TeamUpdateOneRequiredWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdUserId?: NullableStringFieldUpdateOperationsInput | string | null
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type PostSettingUpsertWithWhereUniqueWithoutPostInput = {
    where: PostSettingWhereUniqueInput
    update: XOR<PostSettingUpdateWithoutPostInput, PostSettingUncheckedUpdateWithoutPostInput>
    create: XOR<PostSettingCreateWithoutPostInput, PostSettingUncheckedCreateWithoutPostInput>
  }

  export type PostSettingUpdateWithWhereUniqueWithoutPostInput = {
    where: PostSettingWhereUniqueInput
    data: XOR<PostSettingUpdateWithoutPostInput, PostSettingUncheckedUpdateWithoutPostInput>
  }

  export type PostSettingUpdateManyWithWhereWithoutPostInput = {
    where: PostSettingScalarWhereInput
    data: XOR<PostSettingUpdateManyMutationInput, PostSettingUncheckedUpdateManyWithoutPostInput>
  }

  export type PostSettingScalarWhereInput = {
    AND?: PostSettingScalarWhereInput | PostSettingScalarWhereInput[]
    OR?: PostSettingScalarWhereInput[]
    NOT?: PostSettingScalarWhereInput | PostSettingScalarWhereInput[]
    postId?: StringFilter<"PostSetting"> | string
    socialSettingId?: StringFilter<"PostSetting"> | string
    model?: StringNullableFilter<"PostSetting"> | string | null
  }

  export type PostCreateWithoutPostSettingInput = {
    id?: string
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
    campaign?: CampaignCreateNestedOneWithoutPostInput
  }

  export type PostUncheckedCreateWithoutPostSettingInput = {
    id?: string
    campaignId?: string | null
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
  }

  export type PostCreateOrConnectWithoutPostSettingInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutPostSettingInput, PostUncheckedCreateWithoutPostSettingInput>
  }

  export type SocialPlatformSettingCreateWithoutPostSettingInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutSocialSettingInput
    team: TeamCreateNestedOneWithoutSocialPlatformSettingInput
    createdUser?: UserCreateNestedOneWithoutSocialPlatformSettingInput
  }

  export type SocialPlatformSettingUncheckedCreateWithoutPostSettingInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    createdBy?: string | null
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutSocialSettingInput
  }

  export type SocialPlatformSettingCreateOrConnectWithoutPostSettingInput = {
    where: SocialPlatformSettingWhereUniqueInput
    create: XOR<SocialPlatformSettingCreateWithoutPostSettingInput, SocialPlatformSettingUncheckedCreateWithoutPostSettingInput>
  }

  export type PostUpsertWithoutPostSettingInput = {
    update: XOR<PostUpdateWithoutPostSettingInput, PostUncheckedUpdateWithoutPostSettingInput>
    create: XOR<PostCreateWithoutPostSettingInput, PostUncheckedCreateWithoutPostSettingInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutPostSettingInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutPostSettingInput, PostUncheckedUpdateWithoutPostSettingInput>
  }

  export type PostUpdateWithoutPostSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    campaign?: CampaignUpdateOneWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutPostSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    campaignId?: NullableStringFieldUpdateOperationsInput | string | null
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SocialPlatformSettingUpsertWithoutPostSettingInput = {
    update: XOR<SocialPlatformSettingUpdateWithoutPostSettingInput, SocialPlatformSettingUncheckedUpdateWithoutPostSettingInput>
    create: XOR<SocialPlatformSettingCreateWithoutPostSettingInput, SocialPlatformSettingUncheckedCreateWithoutPostSettingInput>
    where?: SocialPlatformSettingWhereInput
  }

  export type SocialPlatformSettingUpdateToOneWithWhereWithoutPostSettingInput = {
    where?: SocialPlatformSettingWhereInput
    data: XOR<SocialPlatformSettingUpdateWithoutPostSettingInput, SocialPlatformSettingUncheckedUpdateWithoutPostSettingInput>
  }

  export type SocialPlatformSettingUpdateWithoutPostSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    UserPageSetting?: UserPageSettingUpdateManyWithoutSocialSettingNestedInput
    team?: TeamUpdateOneRequiredWithoutSocialPlatformSettingNestedInput
    createdUser?: UserUpdateOneWithoutSocialPlatformSettingNestedInput
  }

  export type SocialPlatformSettingUncheckedUpdateWithoutPostSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
  }

  export type PostSettingCreateWithoutSocialSettingInput = {
    model?: string | null
    post: PostCreateNestedOneWithoutPostSettingInput
  }

  export type PostSettingUncheckedCreateWithoutSocialSettingInput = {
    postId: string
    model?: string | null
  }

  export type PostSettingCreateOrConnectWithoutSocialSettingInput = {
    where: PostSettingWhereUniqueInput
    create: XOR<PostSettingCreateWithoutSocialSettingInput, PostSettingUncheckedCreateWithoutSocialSettingInput>
  }

  export type PostSettingCreateManySocialSettingInputEnvelope = {
    data: PostSettingCreateManySocialSettingInput | PostSettingCreateManySocialSettingInput[]
    skipDuplicates?: boolean
  }

  export type UserPageSettingCreateWithoutSocialSettingInput = {
    role?: $Enums.UserRole
    user: UserCreateNestedOneWithoutUserPageSettingInput
  }

  export type UserPageSettingUncheckedCreateWithoutSocialSettingInput = {
    userId: string
    role?: $Enums.UserRole
  }

  export type UserPageSettingCreateOrConnectWithoutSocialSettingInput = {
    where: UserPageSettingWhereUniqueInput
    create: XOR<UserPageSettingCreateWithoutSocialSettingInput, UserPageSettingUncheckedCreateWithoutSocialSettingInput>
  }

  export type UserPageSettingCreateManySocialSettingInputEnvelope = {
    data: UserPageSettingCreateManySocialSettingInput | UserPageSettingCreateManySocialSettingInput[]
    skipDuplicates?: boolean
  }

  export type TeamCreateWithoutSocialPlatformSettingInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMemberCreateNestedManyWithoutTeamInput
    Campaign?: CampaignCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutSocialPlatformSettingInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    members?: TeamMemberUncheckedCreateNestedManyWithoutTeamInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutSocialPlatformSettingInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutSocialPlatformSettingInput, TeamUncheckedCreateWithoutSocialPlatformSettingInput>
  }

  export type UserCreateWithoutSocialPlatformSettingInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Campaign?: CampaignCreateNestedManyWithoutCreatedUserInput
  }

  export type UserUncheckedCreateWithoutSocialPlatformSettingInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutUserInput
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutCreatedUserInput
  }

  export type UserCreateOrConnectWithoutSocialPlatformSettingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSocialPlatformSettingInput, UserUncheckedCreateWithoutSocialPlatformSettingInput>
  }

  export type PostSettingUpsertWithWhereUniqueWithoutSocialSettingInput = {
    where: PostSettingWhereUniqueInput
    update: XOR<PostSettingUpdateWithoutSocialSettingInput, PostSettingUncheckedUpdateWithoutSocialSettingInput>
    create: XOR<PostSettingCreateWithoutSocialSettingInput, PostSettingUncheckedCreateWithoutSocialSettingInput>
  }

  export type PostSettingUpdateWithWhereUniqueWithoutSocialSettingInput = {
    where: PostSettingWhereUniqueInput
    data: XOR<PostSettingUpdateWithoutSocialSettingInput, PostSettingUncheckedUpdateWithoutSocialSettingInput>
  }

  export type PostSettingUpdateManyWithWhereWithoutSocialSettingInput = {
    where: PostSettingScalarWhereInput
    data: XOR<PostSettingUpdateManyMutationInput, PostSettingUncheckedUpdateManyWithoutSocialSettingInput>
  }

  export type UserPageSettingUpsertWithWhereUniqueWithoutSocialSettingInput = {
    where: UserPageSettingWhereUniqueInput
    update: XOR<UserPageSettingUpdateWithoutSocialSettingInput, UserPageSettingUncheckedUpdateWithoutSocialSettingInput>
    create: XOR<UserPageSettingCreateWithoutSocialSettingInput, UserPageSettingUncheckedCreateWithoutSocialSettingInput>
  }

  export type UserPageSettingUpdateWithWhereUniqueWithoutSocialSettingInput = {
    where: UserPageSettingWhereUniqueInput
    data: XOR<UserPageSettingUpdateWithoutSocialSettingInput, UserPageSettingUncheckedUpdateWithoutSocialSettingInput>
  }

  export type UserPageSettingUpdateManyWithWhereWithoutSocialSettingInput = {
    where: UserPageSettingScalarWhereInput
    data: XOR<UserPageSettingUpdateManyMutationInput, UserPageSettingUncheckedUpdateManyWithoutSocialSettingInput>
  }

  export type TeamUpsertWithoutSocialPlatformSettingInput = {
    update: XOR<TeamUpdateWithoutSocialPlatformSettingInput, TeamUncheckedUpdateWithoutSocialPlatformSettingInput>
    create: XOR<TeamCreateWithoutSocialPlatformSettingInput, TeamUncheckedCreateWithoutSocialPlatformSettingInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutSocialPlatformSettingInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutSocialPlatformSettingInput, TeamUncheckedUpdateWithoutSocialPlatformSettingInput>
  }

  export type TeamUpdateWithoutSocialPlatformSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUpdateManyWithoutTeamNestedInput
    Campaign?: CampaignUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutSocialPlatformSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    members?: TeamMemberUncheckedUpdateManyWithoutTeamNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserUpsertWithoutSocialPlatformSettingInput = {
    update: XOR<UserUpdateWithoutSocialPlatformSettingInput, UserUncheckedUpdateWithoutSocialPlatformSettingInput>
    create: XOR<UserCreateWithoutSocialPlatformSettingInput, UserUncheckedCreateWithoutSocialPlatformSettingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSocialPlatformSettingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSocialPlatformSettingInput, UserUncheckedUpdateWithoutSocialPlatformSettingInput>
  }

  export type UserUpdateWithoutSocialPlatformSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUpdateManyWithoutCreatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSocialPlatformSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutUserNestedInput
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutCreatedUserNestedInput
  }

  export type UserCreateWithoutUserPageSettingInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    TeamMember?: TeamMemberCreateNestedManyWithoutUserInput
    Campaign?: CampaignCreateNestedManyWithoutCreatedUserInput
    SocialPlatformSetting?: SocialPlatformSettingCreateNestedManyWithoutCreatedUserInput
  }

  export type UserUncheckedCreateWithoutUserPageSettingInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    TeamMember?: TeamMemberUncheckedCreateNestedManyWithoutUserInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutCreatedUserInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedCreateNestedManyWithoutCreatedUserInput
  }

  export type UserCreateOrConnectWithoutUserPageSettingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUserPageSettingInput, UserUncheckedCreateWithoutUserPageSettingInput>
  }

  export type SocialPlatformSettingCreateWithoutUserPageSettingInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    PostSetting?: PostSettingCreateNestedManyWithoutSocialSettingInput
    team: TeamCreateNestedOneWithoutSocialPlatformSettingInput
    createdUser?: UserCreateNestedOneWithoutSocialPlatformSettingInput
  }

  export type SocialPlatformSettingUncheckedCreateWithoutUserPageSettingInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
    createdBy?: string | null
    PostSetting?: PostSettingUncheckedCreateNestedManyWithoutSocialSettingInput
  }

  export type SocialPlatformSettingCreateOrConnectWithoutUserPageSettingInput = {
    where: SocialPlatformSettingWhereUniqueInput
    create: XOR<SocialPlatformSettingCreateWithoutUserPageSettingInput, SocialPlatformSettingUncheckedCreateWithoutUserPageSettingInput>
  }

  export type UserUpsertWithoutUserPageSettingInput = {
    update: XOR<UserUpdateWithoutUserPageSettingInput, UserUncheckedUpdateWithoutUserPageSettingInput>
    create: XOR<UserCreateWithoutUserPageSettingInput, UserUncheckedCreateWithoutUserPageSettingInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUserPageSettingInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUserPageSettingInput, UserUncheckedUpdateWithoutUserPageSettingInput>
  }

  export type UserUpdateWithoutUserPageSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TeamMember?: TeamMemberUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUpdateManyWithoutCreatedUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUpdateManyWithoutCreatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUserPageSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    TeamMember?: TeamMemberUncheckedUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutCreatedUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedUpdateManyWithoutCreatedUserNestedInput
  }

  export type SocialPlatformSettingUpsertWithoutUserPageSettingInput = {
    update: XOR<SocialPlatformSettingUpdateWithoutUserPageSettingInput, SocialPlatformSettingUncheckedUpdateWithoutUserPageSettingInput>
    create: XOR<SocialPlatformSettingCreateWithoutUserPageSettingInput, SocialPlatformSettingUncheckedCreateWithoutUserPageSettingInput>
    where?: SocialPlatformSettingWhereInput
  }

  export type SocialPlatformSettingUpdateToOneWithWhereWithoutUserPageSettingInput = {
    where?: SocialPlatformSettingWhereInput
    data: XOR<SocialPlatformSettingUpdateWithoutUserPageSettingInput, SocialPlatformSettingUncheckedUpdateWithoutUserPageSettingInput>
  }

  export type SocialPlatformSettingUpdateWithoutUserPageSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PostSetting?: PostSettingUpdateManyWithoutSocialSettingNestedInput
    team?: TeamUpdateOneRequiredWithoutSocialPlatformSettingNestedInput
    createdUser?: UserUpdateOneWithoutSocialPlatformSettingNestedInput
  }

  export type SocialPlatformSettingUncheckedUpdateWithoutUserPageSettingInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    PostSetting?: PostSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
  }

  export type TeamMemberCreateWithoutTeamInput = {
    role?: $Enums.TeamRole
    user: UserCreateNestedOneWithoutTeamMemberInput
  }

  export type TeamMemberUncheckedCreateWithoutTeamInput = {
    userId: string
    role?: $Enums.TeamRole
  }

  export type TeamMemberCreateOrConnectWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberCreateManyTeamInputEnvelope = {
    data: TeamMemberCreateManyTeamInput | TeamMemberCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type CampaignCreateWithoutTeamInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    Post?: PostCreateNestedManyWithoutCampaignInput
    createdUser?: UserCreateNestedOneWithoutCampaignInput
  }

  export type CampaignUncheckedCreateWithoutTeamInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdUserId?: string | null
    Post?: PostUncheckedCreateNestedManyWithoutCampaignInput
  }

  export type CampaignCreateOrConnectWithoutTeamInput = {
    where: CampaignWhereUniqueInput
    create: XOR<CampaignCreateWithoutTeamInput, CampaignUncheckedCreateWithoutTeamInput>
  }

  export type CampaignCreateManyTeamInputEnvelope = {
    data: CampaignCreateManyTeamInput | CampaignCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type SocialPlatformSettingCreateWithoutTeamInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    PostSetting?: PostSettingCreateNestedManyWithoutSocialSettingInput
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutSocialSettingInput
    createdUser?: UserCreateNestedOneWithoutSocialPlatformSettingInput
  }

  export type SocialPlatformSettingUncheckedCreateWithoutTeamInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
    PostSetting?: PostSettingUncheckedCreateNestedManyWithoutSocialSettingInput
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutSocialSettingInput
  }

  export type SocialPlatformSettingCreateOrConnectWithoutTeamInput = {
    where: SocialPlatformSettingWhereUniqueInput
    create: XOR<SocialPlatformSettingCreateWithoutTeamInput, SocialPlatformSettingUncheckedCreateWithoutTeamInput>
  }

  export type SocialPlatformSettingCreateManyTeamInputEnvelope = {
    data: SocialPlatformSettingCreateManyTeamInput | SocialPlatformSettingCreateManyTeamInput[]
    skipDuplicates?: boolean
  }

  export type TeamMemberUpsertWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    update: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
    create: XOR<TeamMemberCreateWithoutTeamInput, TeamMemberUncheckedCreateWithoutTeamInput>
  }

  export type TeamMemberUpdateWithWhereUniqueWithoutTeamInput = {
    where: TeamMemberWhereUniqueInput
    data: XOR<TeamMemberUpdateWithoutTeamInput, TeamMemberUncheckedUpdateWithoutTeamInput>
  }

  export type TeamMemberUpdateManyWithWhereWithoutTeamInput = {
    where: TeamMemberScalarWhereInput
    data: XOR<TeamMemberUpdateManyMutationInput, TeamMemberUncheckedUpdateManyWithoutTeamInput>
  }

  export type CampaignUpsertWithWhereUniqueWithoutTeamInput = {
    where: CampaignWhereUniqueInput
    update: XOR<CampaignUpdateWithoutTeamInput, CampaignUncheckedUpdateWithoutTeamInput>
    create: XOR<CampaignCreateWithoutTeamInput, CampaignUncheckedCreateWithoutTeamInput>
  }

  export type CampaignUpdateWithWhereUniqueWithoutTeamInput = {
    where: CampaignWhereUniqueInput
    data: XOR<CampaignUpdateWithoutTeamInput, CampaignUncheckedUpdateWithoutTeamInput>
  }

  export type CampaignUpdateManyWithWhereWithoutTeamInput = {
    where: CampaignScalarWhereInput
    data: XOR<CampaignUpdateManyMutationInput, CampaignUncheckedUpdateManyWithoutTeamInput>
  }

  export type SocialPlatformSettingUpsertWithWhereUniqueWithoutTeamInput = {
    where: SocialPlatformSettingWhereUniqueInput
    update: XOR<SocialPlatformSettingUpdateWithoutTeamInput, SocialPlatformSettingUncheckedUpdateWithoutTeamInput>
    create: XOR<SocialPlatformSettingCreateWithoutTeamInput, SocialPlatformSettingUncheckedCreateWithoutTeamInput>
  }

  export type SocialPlatformSettingUpdateWithWhereUniqueWithoutTeamInput = {
    where: SocialPlatformSettingWhereUniqueInput
    data: XOR<SocialPlatformSettingUpdateWithoutTeamInput, SocialPlatformSettingUncheckedUpdateWithoutTeamInput>
  }

  export type SocialPlatformSettingUpdateManyWithWhereWithoutTeamInput = {
    where: SocialPlatformSettingScalarWhereInput
    data: XOR<SocialPlatformSettingUpdateManyMutationInput, SocialPlatformSettingUncheckedUpdateManyWithoutTeamInput>
  }

  export type UserCreateWithoutTeamMemberInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingCreateNestedManyWithoutUserInput
    Campaign?: CampaignCreateNestedManyWithoutCreatedUserInput
    SocialPlatformSetting?: SocialPlatformSettingCreateNestedManyWithoutCreatedUserInput
  }

  export type UserUncheckedCreateWithoutTeamMemberInput = {
    id?: string
    name: string
    email: string
    salt?: string | null
    password: string
    age?: number | null
    isVerified?: boolean | null
    isActivated?: boolean | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    UserPageSetting?: UserPageSettingUncheckedCreateNestedManyWithoutUserInput
    Campaign?: CampaignUncheckedCreateNestedManyWithoutCreatedUserInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedCreateNestedManyWithoutCreatedUserInput
  }

  export type UserCreateOrConnectWithoutTeamMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
  }

  export type TeamCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Campaign?: CampaignCreateNestedManyWithoutTeamInput
    SocialPlatformSetting?: SocialPlatformSettingCreateNestedManyWithoutTeamInput
  }

  export type TeamUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    Campaign?: CampaignUncheckedCreateNestedManyWithoutTeamInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedCreateNestedManyWithoutTeamInput
  }

  export type TeamCreateOrConnectWithoutMembersInput = {
    where: TeamWhereUniqueInput
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutTeamMemberInput = {
    update: XOR<UserUpdateWithoutTeamMemberInput, UserUncheckedUpdateWithoutTeamMemberInput>
    create: XOR<UserCreateWithoutTeamMemberInput, UserUncheckedCreateWithoutTeamMemberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTeamMemberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTeamMemberInput, UserUncheckedUpdateWithoutTeamMemberInput>
  }

  export type UserUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUpdateManyWithoutCreatedUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUpdateManyWithoutCreatedUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTeamMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    salt?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    age?: NullableIntFieldUpdateOperationsInput | number | null
    isVerified?: NullableBoolFieldUpdateOperationsInput | boolean | null
    isActivated?: NullableBoolFieldUpdateOperationsInput | boolean | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutUserNestedInput
    Campaign?: CampaignUncheckedUpdateManyWithoutCreatedUserNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedUpdateManyWithoutCreatedUserNestedInput
  }

  export type TeamUpsertWithoutMembersInput = {
    update: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
    create: XOR<TeamCreateWithoutMembersInput, TeamUncheckedCreateWithoutMembersInput>
    where?: TeamWhereInput
  }

  export type TeamUpdateToOneWithWhereWithoutMembersInput = {
    where?: TeamWhereInput
    data: XOR<TeamUpdateWithoutMembersInput, TeamUncheckedUpdateWithoutMembersInput>
  }

  export type TeamUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Campaign?: CampaignUpdateManyWithoutTeamNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUpdateManyWithoutTeamNestedInput
  }

  export type TeamUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    Campaign?: CampaignUncheckedUpdateManyWithoutTeamNestedInput
    SocialPlatformSetting?: SocialPlatformSettingUncheckedUpdateManyWithoutTeamNestedInput
  }

  export type UserPageSettingCreateManyUserInput = {
    socialSettingId: string
    role?: $Enums.UserRole
  }

  export type TeamMemberCreateManyUserInput = {
    teamId: string
    role?: $Enums.TeamRole
  }

  export type CampaignCreateManyCreatedUserInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    teamId: string
  }

  export type SocialPlatformSettingCreateManyCreatedUserInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    teamId: string
  }

  export type UserPageSettingUpdateWithoutUserInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    socialSetting?: SocialPlatformSettingUpdateOneRequiredWithoutUserPageSettingNestedInput
  }

  export type UserPageSettingUncheckedUpdateWithoutUserInput = {
    socialSettingId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type UserPageSettingUncheckedUpdateManyWithoutUserInput = {
    socialSettingId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type TeamMemberUpdateWithoutUserInput = {
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
    team?: TeamUpdateOneRequiredWithoutMembersNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutUserInput = {
    teamId?: StringFieldUpdateOperationsInput | string
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  }

  export type TeamMemberUncheckedUpdateManyWithoutUserInput = {
    teamId?: StringFieldUpdateOperationsInput | string
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  }

  export type CampaignUpdateWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Post?: PostUpdateManyWithoutCampaignNestedInput
    team?: TeamUpdateOneRequiredWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teamId?: StringFieldUpdateOperationsInput | string
    Post?: PostUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateManyWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type SocialPlatformSettingUpdateWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PostSetting?: PostSettingUpdateManyWithoutSocialSettingNestedInput
    UserPageSetting?: UserPageSettingUpdateManyWithoutSocialSettingNestedInput
    team?: TeamUpdateOneRequiredWithoutSocialPlatformSettingNestedInput
  }

  export type SocialPlatformSettingUncheckedUpdateWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
    PostSetting?: PostSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
  }

  export type SocialPlatformSettingUncheckedUpdateManyWithoutCreatedUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    teamId?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateManyCampaignInput = {
    id?: string
    description: string
    content?: string | null
    status?: $Enums.PostStatus
    postedTime: Date | string
    platformIds?: PostCreateplatformIdsInput | string[]
    createdAt?: Date | string
    updatedAt?: Date | string
    imageIds?: PostCreateimageIdsInput | string[]
    publishedUrl?: string | null
  }

  export type PostUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    PostSetting?: PostSettingUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
    PostSetting?: PostSettingUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutCampaignInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    status?: EnumPostStatusFieldUpdateOperationsInput | $Enums.PostStatus
    postedTime?: DateTimeFieldUpdateOperationsInput | Date | string
    platformIds?: PostUpdateplatformIdsInput | string[]
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    imageIds?: PostUpdateimageIdsInput | string[]
    publishedUrl?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostSettingCreateManyPostInput = {
    socialSettingId: string
    model?: string | null
  }

  export type PostSettingUpdateWithoutPostInput = {
    model?: NullableStringFieldUpdateOperationsInput | string | null
    socialSetting?: SocialPlatformSettingUpdateOneRequiredWithoutPostSettingNestedInput
  }

  export type PostSettingUncheckedUpdateWithoutPostInput = {
    socialSettingId?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostSettingUncheckedUpdateManyWithoutPostInput = {
    socialSettingId?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostSettingCreateManySocialSettingInput = {
    postId: string
    model?: string | null
  }

  export type UserPageSettingCreateManySocialSettingInput = {
    userId: string
    role?: $Enums.UserRole
  }

  export type PostSettingUpdateWithoutSocialSettingInput = {
    model?: NullableStringFieldUpdateOperationsInput | string | null
    post?: PostUpdateOneRequiredWithoutPostSettingNestedInput
  }

  export type PostSettingUncheckedUpdateWithoutSocialSettingInput = {
    postId?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostSettingUncheckedUpdateManyWithoutSocialSettingInput = {
    postId?: StringFieldUpdateOperationsInput | string
    model?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPageSettingUpdateWithoutSocialSettingInput = {
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    user?: UserUpdateOneRequiredWithoutUserPageSettingNestedInput
  }

  export type UserPageSettingUncheckedUpdateWithoutSocialSettingInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type UserPageSettingUncheckedUpdateManyWithoutSocialSettingInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
  }

  export type TeamMemberCreateManyTeamInput = {
    userId: string
    role?: $Enums.TeamRole
  }

  export type CampaignCreateManyTeamInput = {
    id?: string
    name: string
    description?: string | null
    objective?: $Enums.CampaignObjective
    startDate?: Date | string
    endDate?: Date | string | null
    dailyBudget?: number | null
    totalBudget?: number | null
    status?: $Enums.CampaignStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdUserId?: string | null
  }

  export type SocialPlatformSettingCreateManyTeamInput = {
    id?: string
    platform: $Enums.Platform
    pageId?: string | null
    pageName?: string | null
    pageLink?: string | null
    accessToken: string
    status?: $Enums.SettingStatus
    expiresAt?: Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: string | null
  }

  export type TeamMemberUpdateWithoutTeamInput = {
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
    user?: UserUpdateOneRequiredWithoutTeamMemberNestedInput
  }

  export type TeamMemberUncheckedUpdateWithoutTeamInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  }

  export type TeamMemberUncheckedUpdateManyWithoutTeamInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumTeamRoleFieldUpdateOperationsInput | $Enums.TeamRole
  }

  export type CampaignUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    Post?: PostUpdateManyWithoutCampaignNestedInput
    createdUser?: UserUpdateOneWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdUserId?: NullableStringFieldUpdateOperationsInput | string | null
    Post?: PostUncheckedUpdateManyWithoutCampaignNestedInput
  }

  export type CampaignUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    objective?: EnumCampaignObjectiveFieldUpdateOperationsInput | $Enums.CampaignObjective
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dailyBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    totalBudget?: NullableFloatFieldUpdateOperationsInput | number | null
    status?: EnumCampaignStatusFieldUpdateOperationsInput | $Enums.CampaignStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdUserId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type SocialPlatformSettingUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    PostSetting?: PostSettingUpdateManyWithoutSocialSettingNestedInput
    UserPageSetting?: UserPageSettingUpdateManyWithoutSocialSettingNestedInput
    createdUser?: UserUpdateOneWithoutSocialPlatformSettingNestedInput
  }

  export type SocialPlatformSettingUncheckedUpdateWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
    PostSetting?: PostSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
    UserPageSetting?: UserPageSettingUncheckedUpdateManyWithoutSocialSettingNestedInput
  }

  export type SocialPlatformSettingUncheckedUpdateManyWithoutTeamInput = {
    id?: StringFieldUpdateOperationsInput | string
    platform?: EnumPlatformFieldUpdateOperationsInput | $Enums.Platform
    pageId?: NullableStringFieldUpdateOperationsInput | string | null
    pageName?: NullableStringFieldUpdateOperationsInput | string | null
    pageLink?: NullableStringFieldUpdateOperationsInput | string | null
    accessToken?: StringFieldUpdateOperationsInput | string
    status?: EnumSettingStatusFieldUpdateOperationsInput | $Enums.SettingStatus
    expiresAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}